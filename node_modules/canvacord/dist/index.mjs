var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var __privateMethod = (obj, member, method) => {
  __accessCheck(obj, member, "access private method");
  return method;
};

// src/assets/Font.ts
import { randomUUID } from "crypto";
import { readFileSync } from "fs";
import { readFile } from "fs/promises";

// src/assets/AssetsFactory.ts
var FontFactory = /* @__PURE__ */ new Map();
var BASE_URL = process.env.CANVACORD_ASSETS_BASE_URL || "https://raw.githubusercontent.com/neplextech/canvacord-assets/main/public/canvacord";
var prepareURL = /* @__PURE__ */ __name((path) => `${BASE_URL}/${path}`, "prepareURL");
var ImageFactory = {
  AFFECT: prepareURL("AFFECT.png"),
  BATSLAP: prepareURL("BATSLAP.png"),
  BEAUTIFUL: prepareURL("BEAUTIFUL.png"),
  BED: prepareURL("BED.png"),
  BOTBADGE: prepareURL("BOTBADGE.png"),
  CAPTCHA: prepareURL("CAPTCHA.png"),
  CHANGEMYMIND: prepareURL("CHANGEMYMIND.png"),
  CLYDE: prepareURL("CLYDE.png"),
  DELETE: prepareURL("DELETE.png"),
  DISCORD: prepareURL("DISCORD.png"),
  DISTRACTED: prepareURL("DISTRACTED.png"),
  DND: prepareURL("DND.png"),
  FACEPALM: prepareURL("FACEPALM.png"),
  RAINBOW: prepareURL("RAINBOW.png"),
  HITLER: prepareURL("HITLER.png"),
  IDLE: prepareURL("IDLE.png"),
  IMPOSTER: prepareURL("IMPOSTER.png"),
  IMPOSTERWITH: prepareURL("IMPOSTERWITH.png"),
  JAIL: prepareURL("JAIL.png"),
  JOKEOVERHEAD: prepareURL("JOKEOVERHEAD.png"),
  KICK: prepareURL("KICK.png"),
  KISS: prepareURL("KISS.png"),
  KO: prepareURL("KO.png"),
  OFFLINE: prepareURL("OFFLINE.png"),
  OHNO: prepareURL("OHNO.png"),
  ONLINE: prepareURL("ONLINE.png"),
  OPINION: prepareURL("OPINION.png"),
  PHUB: prepareURL("PHUB.png"),
  PUNCH: prepareURL("PUNCH.png"),
  RIP: prepareURL("RIP.png"),
  SHIT: prepareURL("SHIT.png"),
  SNOWFLAKE: prepareURL("SNOWFLAKE.png"),
  SPANK: prepareURL("SPANK.png"),
  TOBECONTINUED: prepareURL("TOBECONTINUED.png"),
  TRASH: prepareURL("TRASH.png"),
  TRIGGERED: prepareURL("TRIGGERED.png"),
  WANTED: prepareURL("WANTED.png"),
  WASTED: prepareURL("WASTED.png"),
  WELCOMEBG: prepareURL("WELCOMEBG.png"),
  YOUTUBE: prepareURL("YOUTUBE.png")
};

// src/assets/Font.ts
import { GlobalFonts } from "@napi-rs/canvas";

// src/assets/fonts/fonts.ts
var Fonts = {
  /**
   * Geist sans font
   * @see https://vercel.com/font/sans
   */
  get Geist() {
    return Buffer.from(
      "T1RUTwAMAIAAAwBAQ0ZGIC9Bk94AABT8AACZE0dERUY4EjfYAACuEAAAARJHUE9TxZMpCAAAryQAABi2R1NVQowLjN4AAMfcAAASgE9TLzJOyiLSAAALgAAAAGBjbWFwDu5h1AAADngAAAZkaGVhZCrJAR4AAADUAAAANmhoZWEM+AmbAAALXAAAACRobXR4vqWNQQAAAQwAAApObWF4cAKUUAAAAADMAAAABm5hbWU8hhcjAAAL4AAAApdwb3N0/58AMgAAFNwAAAAgAABQAAKUAAAAAQAAAAEAg3lXnhpfDzz1AAMD6AAAAADhXF5uAAAAAOFcXm7/1/8lCSIDtgAAAAcAAgAAAAAAAAGuAFAA+gAAApwAFQKcABUCnAAVApwAFQKcABUCnAAVApwAFQKcABUCvAAVApwAFQKcABUDywAVAqYAXAK8ADECvAAxArwAMQK8ADECvAAxArwAMQK9AFwDFQAxAr0AXAMVADECWgBcAloAXAJaAFwCWgBcAloAXAJaAFwCWgBcAloAXAJaAFwCWgBcAtEAMQJNAFwCwwAxAsMAMQLDADECwwAxAsMAMQLDADECvgBcA2UAXAK+AFwBDQBcAxMAXAENAFwBDf/+AQ0AEQENAFsBDQAOAQ0ABwENADABDf/fAlQAQwJUAEMCVABDAosAXAKLAFwCQwBcAkMAXAIfAFwCQwBcAmUAFgNsAFwC4QBcAuEAXALhAFwC4QBcAuEAXALkADEC5AAxAuQAMQLkADEC5AAxAuQAMQLkADEC6QAyAuQAMQQ9ADECiQBcAmsAXALkADECngBcAp4AXAKeAFwCngBcAocAOwKHADsAuQAxAocAOwKHADsChwA7AocAOwKVAFwCQgAZAkIAGQJCABkCQgAZArAATQKwAE0CsABNArAATQKwAE0CsABNArAATQKwAE0CsABNArAATQKwAE0CnAAVA44AFQOOABUDjgAVA44AFQOOABUCdAAbAnQAFQJ0ABUCdAAVAnQAFQJ0ABUCdAAVAh4AGwIeABsCHgAbAh4AGwJDAFwC4QBcAqMAXAKjAFwCowBcAqMAXAGuADEBrgAxAa4AMQGuADEBrgAxAa4AMQGuADEBrgAxAa4AMAK8ADECvAAxArwAMQK8ADECvAAxArwAMQKcABUCvAAxAloAXAJaAFwCwwAxAQ0AAQENAFMC5AAxArAATQOOABUCdAAVAh4AGwGuADEBrgAxArwAMQRKABUEXgBNAj4ALwI+AC8CPgAvAj4ALwI+AC8CPgAvAj4ALwI+AC8CPgAvAj4ALwI+AC8DpAAvAloAVQInAC8CJwAvAicALwInAC8CJwAvAicALwJaAC8CVAAvAvIALwKPAC8CNwAvAjcALwI3AC8CNwAvAjcALwI3AC8CNwAvAjcALwI3AC8CNwAvAjcALwGRAEECWQAvAlkALwJZAC8CWQAvAlkALwJZAC8CSABVAjkAGQJI//YA/ABTAPwAVQD8AFUA/P/2APwACQD8AFMA/AAGAfQAUwD8//8A/AAmAPz/1wEC//sBAv/7AQL/+wEC//sCUgBVAlIAVQEgAFcBIABXAZIAVwEgAE0BfwBXA28AVQJIAFUCSABVAkgAVQJIAFUCSABVAkIALwJCAC8CQgAvAkIALwJCAC8CQgAvAkIALwIyAAwCQgAvA8UALwJaAFUCWgBVAloALwGBAFUBgQBVAYEAPgGBAB8CEQAvAhEALwC5ADECEQAvAhEALwIRAC8CEQAvAlIAVQGPADwBvwA8AY8APAGPADwCSgBXAkoAVwJKAFcCSgBXAkoAVwJKAFcCSgBXAkoAVwJKAFcCSgBXAkoAVwIWABYDMQAWAzEAFgMxABYDMQAWAzEAFgJIAC8CFwAWAhcAFgIXABYCFwAWAhcAFgIXABYCJQA5AiUAOQIlADkCJQA5ASAATQJIAFUCLwAqAi8AKgIvACoCLwAqAi8AKgIvACoCLwAqAi8AKgIvACoCLwAqAi8AKgJUAC8CVAAvAlQALwJUAC8CVAAvAlQALwJUAC8CVAAvAlQALwJUAC8CVAAvAQsAXAELAFwBnABXAQsAJwGAAFcCPgAvAicALwI3AC8CNwAvAlkALwD8AEsA/P/5APwASwH0AEsA/AAmAQL/+wJCAC8CSgBXAzEAFgIXABYCJQA5Ai8AKgJUAC8CrgBBArsAPAKOAEECngBBAj4ALwJCAC8C4gAxApYAPAKUADEBXAAZAlQAMQJuADECSAAZAloAMQJZADECKQAZAm0AMQJZADEDQAAvA0AALwNAAC8DQAAvA0AALwNAAC8DQAAvA0AALwNAAC8DQAAvA0AALwNAAC8DQAAvA0AALwNAAC8DQAAvA0AALwNAAC8DQAAvA0AALwKUADEBsAAZAlgAEAJYAH8CWAAxAlgAKgJYABkCWAAvAlgALgJYAC0CWAAkAlgALgJYAA4DzQAyA8EAMgO6ADEDvAAyA80AMQO1ADIDvwAyA9AAMQPLADIEsACmAlgAlQJYALQCWACgAlgAoAJYAIQCWACmAlgApQJYAKYCWACfAlgAqAJYAJUCWAC0AlgAoAJYAKACWACEAlgApgJYAKUCWACmAlgAnwJYAKgA+gAAAV8ALwlgAD4HCAA+BLAAPgDIAC8AyAAvASIAXAEiAF0COgAvANYANgDWADYCMwAvAjMALwDIAC8BIwAvAbQALwFxAC8B3v/2Ad8AKAHcADQCfgAxAbQALwOPAC8B1wAvAMgALwDIAC8BEgA3Ad7/9gL+AC8AyAAvAjMALwFcAC8AtQAvAMgALwHeACcAzwAvASkAXAEqAFwCQgAvAM8ALwDPAC8CMwAvAjMALwDPAC8CMgAvAM8ALwESADAAzwAvAjMALwDQAC8BqAAvAa0ALwJUAC8DkAAvAjIALwNWAC8C0AAvATQALwE0AC8BpQAvAaUALwFLAC8BSwAvAWQALwFkAC8BbwAvAW8ALwGlAC8BpQAvAYwALwGMAC8CCwAvAgsALwGMADABjAAvAY0ALwGNAC8BZwAvAWcALwFLAC8BSwAvATQALwE0AC8AzAAxAWUAMQFlADEBZQAxAMwAMQDMADECFwAvAhcALwFNAC8BTQAvAWAAMQC5ADEB1ABBAn8AXASwAD4HCAA+CWAAPgcHAD4DQAAvA0AALwOTADECfAAxAkgAIwItADsDRAAxAlsAMQJbADEDegBcAYgALwD5AC8BcQAvAQUAXAEFAFwCOQBcAjkAXARCAFwDVwAxAicALwJJADEChwA7At8AOwKhADsCzQAtAqUAXAMEAFwCZwA7AnQAFQI6AC8COgAvAeUALwI6AC8ClQBcAjoALwIpADECJQAvAjoALwI6AC8COgAvAhcALwIXAC8B5QAvAY4ALwNKAC8BeQAAAosAFQJoABkCEQAbAmIAFgJVAC8CUABaAv4ALwQ/AC8C0QAxAnUAMQMoADECdQAxAtEAMQJ1ADEDKAAxAnUAMQQTADEC0QAxApAAMQKlADECpQAxApcAMQKXADECnQAxAp0AMQKdADECogAxAp0AMQMZABUBoQAxAl0AMQMGADECXQAxAaEAMQJdADIDBgAxAl0AMQNLADEBoQAyA1QAMQNUADEDVAAxAhkAMQNdABUDOABcA10AFQM4ABYDXQAVAzgAXANdABUDOAAWAAAALwAAAC8AAAAvAAAALwAAAC8AAAAvAAAALwAAAC8AAAAvAAAALwAAAC8AAAAvAAAALwAAAC8AAAAvAAAALwAAAC8AAAAvAAAALwFDAC8AtAAvAPkALwD5AC8BcAAvAW8ALwFvAC8BeAAvARYALwGsAC8BXQAvATQALwECAC8BZAAvAMUALwJYAAADQAAvAC8AAAABAAADmP8kAGQJYP/X/oMJIgABAAAAAAAAAAAAAAAAAAACkwAEAkwBkAAFAAgCigJYAAAASwKKAlgAAAFeADIBCQAAAAAAAAAAAAAAAKEAAP8AAeT7AAAAEAAAAABVS1dOAMAAIP9dA5j/JABkA5gA3CAAAJMAAAAAAhICxgAAACAABAAAABYBDgABAAAAAAABAAUAAAABAAAAAAACAAcABQABAAAAAAAEAA0ADAABAAAAAAAFACEAGQABAAAAAAAGAA0AOgADAAEECQABAAoARwADAAEECQACAA4AUQADAAEECQADADAAXwADAAEECQAEABoAjwADAAEECQAFAEIAqQADAAEECQAGABoA6wADAAEECQAQAAoARwADAAEECQARAA4AUQADAAEECQEAABIBBQADAAEECQEBAAoBFwADAAEECQECAAoBIQADAAEECQEDAAoBKwADAAEECQEEAAoBNQADAAEECQEFAAoBPwADAAEECQEGABQBSQADAAEECQEHABYBXQADAAEECQEIABYBc0dlaXN0UmVndWxhckdlaXN0IFJlZ3VsYXJWZXJzaW9uIDEuMDAyO0dseXBocyAzLjEuMiAoMzE1MSlHZWlzdC1SZWd1bGFyAEcAZQBpAHMAdABSAGUAZwB1AGwAYQByADEALgAwADAAMgA7AFUASwBXAE4AOwBHAGUAaQBzAHQALQBSAGUAZwB1AGwAYQByAEcAZQBpAHMAdAAgAFIAZQBnAHUAbABhAHIAVgBlAHIAcwBpAG8AbgAgADEALgAwADAAMgA7AEcAbAB5AHAAaABzACAAMwAuADEALgAyACAAKAAzADEANQAxACkARwBlAGkAcwB0AC0AUgBlAGcAdQBsAGEAcgBOAG8AIAB0AGEAaQBsACAAYQBBAGwAdAAgAGEAQQBsAHQAIABsAEEAbAB0ACAAUgBBAGwAdAAgAEkAQQBsAHQAIABHAEEAbAB0ACAAYQByAHIAbwB3AHMAUgBvAHUAbgBkAGUAZAAgAGQAbwB0AEEAbAB0ACAAbgB1AG0AYgBlAHIAcwAAAAACAAAAAwAAABQAAwABAAAAFAAEBlAAAADEAIAABgBEAC8AOQB+ARMBKwE3AT4BSAFNAWUBfgGPAZIBzgIbAjcCWQLHAt0DBAMIAwwDEgMoA6kDwA4/HiEehR6eHr0e8x75IBQgGiAeICIgJiAwIDMgOiBEIHAgeSCJIKogrCC0ILkgvSEXISIhVSFeIZkhnSGqIbEhtSHlIeciAiIGIg8iEiIaIh4iKyJIImAiZSPOJGgk6iT/JbMltyW9JcElzCXPJjonfjADMBEwFzAcp4z/A/8K/w//G/8g/z3/P/9b/13//wAAACAAMAA6AKABFgEuATkBQQFMAVABaAGPAZIBzQIYAjcCWQLGAtgDAAMGAwoDEgMmA6kDwA4/HiAegB6eHrwe8h74IBMgGCAcICAgJiAwIDIgOSBEIHAgdCCAIKogrCC0ILkgvSEWISIhUyFbIZAhnSGpIbAhsyHkIeciAiIGIg8iESIaIh4iKyJIImAiZCPOJGAk6iT/JbIltiW8JcAlyiXPJjkndjACMAgwFDAcp4v/Af8F/wz/Gv8f/zv/P/9b/13//wAAAS8AAAAAAAAAAAAAAAAAAAAAAAD+lAB2AAAAAP6o/m//wQAAAAAAAAAA/2n/Vv20/Z7zygAAAADhwgAAAAAAAOHKAAAAAAAA4YviE+Hn4cvhReEu4S7hFOF+4XjhceFu4WkAAOD1AADgNQAA4LHgqOCj4KLga+Bx4D7gNuAuAADgJeAc4BDf7t/QAADeUt0U3IncagAAAAAAAAAAAADclNvV2fQAAAAAAADRxAAAAAAAAAAAAAAAAAAAApYCkQKQAAEAxAAAAOABaAJOAngCigKUAqICpALOAAAAAAL2AvgAAAAAAAAC+AMCAwoDDgAAAAAAAAAAAAADCAMKAAADEgMUAxYAAAMWAxoDHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwgAAAMIAAADCgAAAAAAAAAAAAAAAAAAAAAAAAMKAAAAAAAAAAAAAAMCAAAAAAAAAAAC/AL+AwADAgMEAAAAAAAAAwIDBAMWAAADGgMcAyADKgMwAzIDNAAAAAAAAAAAAAEBsgIGAboCIwJCAhECBwHiAeMBuAIrAa4B2wGtAbsBrwGwAjICLwIxAbQCEAACAA4ADwAVABkAJAAlACsALgA4ADsAPQBCAEMASABSAFQAVQBZAGEAZQBwAHEAdgB3AH0B5gG8AecCOQHfAoQApwCzALQAugC+AMkAygDQANMA3gDiAOQA6QDqAO8A+QD7APwBAAEIAQwBFwEYAR0BHgEkAeQCGwHlAjcBqAGzAiECKQIiAioCHAITAoICFAFbAgICOAHcAhUCjAIYAjUBoAGhAoUCQQISAbYCjQGfAVwCAwGNAYoBjgG1AAgAAwAGAAwABwALAA0AEgAfABoAHAAdADQAMAAxADIAFgBHAEwASQBKAFAASwItAE8AagBmAGgAaQB4AFMBBwCtAKgAqwCxAKwAsACyALcAxAC/AMEAwgDZANUA1gDXALsA7gDzAPAA8QD3APICLgD2AREBDQEPARABHwD6ASEACQCuAAQAqQAKAK8AEAC1ABMAuAAUALkAEQC2ABcAvAAYAL0AIADFAB4AwwAhAMYAGwDAACcAzAAmAMsAKQDOACgAzQAtANIALADRADcA3QA1ANsANgDcADMA1AAvANoAOgDhADwA4wA+AOUAQADnAD8A5gBBAOgARADrAEYA7QBFAOwATgD1AE0A9ABRAPgAVgD9AFgA/wBXAP4AWgEBAF4BBQBdAQQAXAEDAGMBCgBiAQkAbwEWAGwBEwBnAQ4AbgEVAGsBEgBtARQAcwEaAHkBIAB6AH4BJQCAAScAfwEmAAUAqgBfAQYAZAELAokCgwKKAo4CiwKGAnECcgJ1AnkCegJ3AnACbwJ4AnMCdgAqAM8AdQEcAHIBGQB0ARsAIgDHAHsBIgB8ASMCAAIBAfwB/gH/Af0CHQIeAbcCHwIWAYsBjAGPAkoCRAJGAkgCTAJNAksCRQJHAkkCPgIsAjQCMwJnAmsCaAJsAmkCbQJqAm4CZgJkAmUBqQG5AegB6QHwAfEB7gHvAfQB9QHqAesB8gHzAfYB9wBbAQIBwwHIAcQBxQG9AckB+gH7Ab4BwgHhAcYBywHBAcoBxwG/AfgBwAH5AAMAAAAAAAD/nAAyAAAAAAAAAAAAAAAAAAAAAAAAAAABAAQCAAEBAQ5HZWlzdC1SZWd1bGFyAAEBASn4EQD5zAH5zQL4GAT7EQwDYvtvHAki+koFHCnHDxwsuRGpHQAAiQwSAbMCAAEABwAOABUAHAAiACgAMwA9AEMASQBPAFkAYABnAG4AdQB7AIYAjQCXAJ4AogCtAK8AuQDAAMcAzQDYAOMA6gDwAPYA/QEDAQkBEAEdASQBKgEwATcBPQFEAUwBVwFeAWUBawFyAXkBfwGMAZMBmgGfAaUBqwG2Ab8BxQHQAdYB3QHjAe0B/AILAhECHAInAjMCOQJEAlQCYgJxAnwCiAKUAp8CpQKwAsACzALbAucC9QMEAxIDIQMwAz4DTQNbA2kDdwOFA5QDpwO7A88D1wPfA+UD7APzA/oEAAQGBBEEGwQhBCcELQQ3BD4ERQRMBFMEWQRkBGsEdQR8BIAEiwSUBJYEnQSkBKoEsQS8BMcEzgTUBNoE4QTnBO0E9AUBBQgFDgUUBRsFIQUoBTAFOwVCBUgFTwVWBVwFaQVwBXcFfAWCBYgFkwWcBaIFrQWzBboFwAXKBdkF6AXuBfkGBAYQBiAGLgY5BkUGUQZbBmYGbAZ3BoIGjgaeBqwGtwbDBs8G2QbkBuoG9QcABwwHFwclBzQHQgdRB2AHZgd0B4IHiQeVB5sHqQe3B8UH0wfiB/UICAgQCBgIHwgmCC0ILwg2CD0IRAhLCFIIWQhgCGcIbgh1CHwIgwiKCJEImAifCKYIrQi0CLsIxAjMCNMI2QjfCOcI7gj1CPsJAwkLCRIJGQkgCScJLgk1CTwJQwlKCVEJWAlfCWYJbQl0CXsJggmJCZAJlwmeCaUJrAmzCboJwQniCfwKDwoWCh0KJAorCjIKOQpACkcKTgpVClwKYwpqCnEKeAp/CooKlAqiCq8KugrJCtYK5wr6CwELDQsZCyULMQs9C0QLSwtSC1kLYAtnC24LdQt8C4MLiguRC5gLnwumC60LtAu7C8ILyQvQC9cL3gvlC/UMDAwqDEIMSQxSDFkMXwxlDGwMcwx3DH4MhQyMDJMMmwynDLAMuwzDDMsM0gzZDOIM6Qz0DPsNAg0JDRMNGg0jDSoNMw06DUMNTA1TDVoNYQ1oDW8Ndg19DYQNiw2ZDaANrA24DccN0w3hDe0N+w4HDhUOIw4qDjAONw4+DkUOTA5TDloOYQ5oDm8Odg59DoQOjQ6WDp0OqA6vDrYOvQ7EDs0O1A7bDuIO6Q7wDv8PCw8XDyQPMg88D0gPWg9rD3hBYnJldmV1bmkwMUNEQW1hY3JvbkFvZ29uZWtDYWN1dGVDY2Fyb25DY2lyY3VtZmxleENkb3RhY2NlbnREY2Fyb25EY3JvYXRFY2Fyb25FZG90YWNjZW50RW1hY3JvbkVvZ29uZWt1bmkxRUJDdW5pMDE4RkdicmV2ZUdjaXJjdW1mbGV4dW5pMDEyMkdkb3RhY2NlbnR1bmkxRTIwSGJhckhjaXJjdW1mbGV4SUpJZG90YWNjZW50SW1hY3JvbklvZ29uZWtJdGlsZGV1bmkwMDRBMDMwMUpjaXJjdW1mbGV4dW5pMDEzNkxhY3V0ZUxjYXJvbnVuaTAxM0JOYWN1dGVOY2Fyb251bmkwMTQ1T2h1bmdhcnVtbGF1dE9tYWNyb25SYWN1dGVSY2Fyb251bmkwMTU2U2FjdXRldW5pQTc4QlNjZWRpbGxhU2NpcmN1bWZsZXh1bmkwMjE4dW5pMUU5RVRjYXJvbnVuaTAxNjJ1bmkwMjFBVWJyZXZlVWh1bmdhcnVtbGF1dFVtYWNyb25Vb2dvbmVrVXJpbmdVdGlsZGVXYWN1dGVXY2lyY3VtZmxleFdkaWVyZXNpc1dncmF2ZVljaXJjdW1mbGV4WWdyYXZldW5pMUVGOFphY3V0ZVpkb3RhY2NlbnR1bmkwMTNCLmxvY2xNQUh1bmkwMTQ1LmxvY2xNQUhSLnNzMDRSYWN1dGUuc3MwNFJjYXJvbi5zczA0dW5pMDE1Ni5zczA0SS5zczA1SWFjdXRlLnNzMDVJY2lyY3VtZmxleC5zczA1SWRpZXJlc2lzLnNzMDVJZG90YWNjZW50LnNzMDVJZ3JhdmUuc3MwNUltYWNyb24uc3MwNUlvZ29uZWsuc3MwNUl0aWxkZS5zczA1Ry5zczA2R2JyZXZlLnNzMDZHY2lyY3VtZmxleC5zczA2dW5pMDEyMi5zczA2R2RvdGFjY2VudC5zczA2dW5pMUUyMC5zczA2QWRpZXJlc2lzLnNzMDhDZG90YWNjZW50LnNzMDhFZGllcmVzaXMuc3MwOEVkb3RhY2NlbnQuc3MwOEdkb3RhY2NlbnQuc3MwOElkaWVyZXNpcy5zczA4SWRvdGFjY2VudC5zczA4T2RpZXJlc2lzLnNzMDhVZGllcmVzaXMuc3MwOFdkaWVyZXNpcy5zczA4WWRpZXJlc2lzLnNzMDhaZG90YWNjZW50LnNzMDhJZGllcmVzaXMuc3MwNS5zczA4SWRvdGFjY2VudC5zczA1LnNzMDhHZG90YWNjZW50LnNzMDYuc3MwOEFfSS5kbGlnVV9JLmRsaWdhYnJldmV1bmkwMUNFYW1hY3JvbmFvZ29uZWtjYWN1dGVjY2Fyb25jY2lyY3VtZmxleGNkb3RhY2NlbnRkY2Fyb25kY3JvYXRlY2Fyb25lZG90YWNjZW50ZW1hY3JvbmVvZ29uZWt1bmkxRUJEdW5pMDI1OWdicmV2ZWdjaXJjdW1mbGV4dW5pMDEyM2dkb3RhY2NlbnR1bmkxRTIxaGJhcmhjaXJjdW1mbGV4aS5sb2NsVFJLaWppbWFjcm9uaW9nb25la2l0aWxkZXVuaTAyMzd1bmkwMDZBMDMwMWpjaXJjdW1mbGV4dW5pMDEzN2xhY3V0ZWxjYXJvbnVuaTAxM0NuYWN1dGVuY2Fyb251bmkwMTQ2b2h1bmdhcnVtbGF1dG9tYWNyb25yYWN1dGVyY2Fyb251bmkwMTU3c2FjdXRldW5pQTc4Q3NjZWRpbGxhc2NpcmN1bWZsZXh1bmkwMjE5dGNhcm9udW5pMDE2M3VuaTAyMUJ1YnJldmV1aHVuZ2FydW1sYXV0dW1hY3JvbnVvZ29uZWt1cmluZ3V0aWxkZXdhY3V0ZXdjaXJjdW1mbGV4d2RpZXJlc2lzd2dyYXZleWNpcmN1bWZsZXh5Z3JhdmV1bmkxRUY5emFjdXRlemRvdGFjY2VudHVuaTAxM0MubG9jbE1BSHVuaTAxNDYubG9jbE1BSGEuc3MwMWFhY3V0ZS5zczAxYWJyZXZlLnNzMDF1bmkwMUNFLnNzMDFhY2lyY3VtZmxleC5zczAxYWRpZXJlc2lzLnNzMDFhZ3JhdmUuc3MwMWFtYWNyb24uc3MwMWFvZ29uZWsuc3MwMWFyaW5nLnNzMDFhdGlsZGUuc3MwMWEuc3MwMmFhY3V0ZS5zczAyYWJyZXZlLnNzMDJ1bmkwMUNFLnNzMDJhY2lyY3VtZmxleC5zczAyYWRpZXJlc2lzLnNzMDJhZ3JhdmUuc3MwMmFtYWNyb24uc3MwMmFvZ29uZWsuc3MwMmFyaW5nLnNzMDJhdGlsZGUuc3MwMmwuc3MwM2xhY3V0ZS5zczAzbGNhcm9uLnNzMDN1bmkwMTNDLnNzMDNsc2xhc2guc3MwM2FkaWVyZXNpcy5zczA4Y2RvdGFjY2VudC5zczA4ZWRpZXJlc2lzLnNzMDhlZG90YWNjZW50LnNzMDhnZG90YWNjZW50LnNzMDhpLnNzMDhpZGllcmVzaXMuc3MwOGkubG9jbFRSSy5zczA4aWouc3MwOGlvZ29uZWsuc3MwOGouc3MwOG9kaWVyZXNpcy5zczA4dWRpZXJlc2lzLnNzMDh3ZGllcmVzaXMuc3MwOHlkaWVyZXNpcy5zczA4emRvdGFjY2VudC5zczA4YWRpZXJlc2lzLnNzMDEuc3MwOGFkaWVyZXNpcy5zczAyLnNzMDhmX2YubGlnYXRfdC5saWdhZmkubGlnYWZsLmxpZ2F1bmkwM0E5cGl1bmkyNEZGdW5pMjc3NnVuaTI3Nzd1bmkyNzc4dW5pMjc3OXVuaTI3N0F1bmkyNzdCdW5pMjc3Q3VuaTI3N0R1bmkyNzdFdW5pMjRFQXVuaTI0NjB1bmkyNDYxdW5pMjQ2MnVuaTI0NjN1bmkyNDY0dW5pMjQ2NXVuaTI0NjZ1bmkyNDY3dW5pMjQ2OHplcm8uc3MwOW9uZS5zczA5emVyby50Zm9uZS50ZnR3by50ZnRocmVlLnRmZm91ci50ZmZpdmUudGZzaXgudGZzZXZlbi50ZmVpZ2h0LnRmbmluZS50ZnVuaTIxNTN1bmkyMTU0dW5pMjE1NXVuaTIwODB1bmkyMDgxdW5pMjA4MnVuaTIwODN1bmkyMDg0dW5pMjA4NXVuaTIwODZ1bmkyMDg3dW5pMjA4OHVuaTIwODl1bmkyMDcwdW5pMDBCOXVuaTAwQjJ1bmkwMEIzdW5pMjA3NHVuaTIwNzV1bmkyMDc2dW5pMjA3N3VuaTIwNzh1bmkyMDc5dW5pMDBBMHVuaTMwMDJoeXBoZW5faHlwaGVuX2h5cGhlbl9ncmVhdGVyLmxpZ2FoeXBoZW5faHlwaGVuX2dyZWF0ZXIubGlnYWh5cGhlbl9ncmVhdGVyLmxpZ2F1bmkzMDAzdW5pRkYwNnVuaUZGMEF1bmlGRjIwdW5pRkYzQ3VuaUZGMUF1bmlGRjBDdW5pRkYwMXVuaUZGMDN1bmlGRjA1dW5pRkYwRXVuaUZGMUZ1bmlGRjAydW5pRkYwN3VuaUZGMUJ1bmlGRjBGcGVyaW9kLnNzMDhjb2xvbi5zczA4c2VtaWNvbG9uLnNzMDhlbGxpcHNpcy5zczA4ZXhjbGFtLnNzMDhleGNsYW1kb3duLnNzMDhxdWVzdGlvbi5zczA4cXVlc3Rpb25kb3duLnNzMDhwZXJpb2RjZW50ZXJlZC5zczA4dW5pRkYzRnVuaUZGMUEuc3MwOHVuaUZGMDEuc3MwOHVuaUZGMEUuc3MwOHVuaUZGMUYuc3MwOHVuaUZGMUIuc3MwOHVuaTAwQUR1bmkzMDFDdW5pRkYwRHVuaTMwMDh1bmkzMDA5dW5pMzAxMHVuaTMwMTF1bmlGRjVCdW5pRkY1RHVuaTMwMEN1bmkzMDBEdW5pMzAwQXVuaTMwMEJ1bmkzMDE0dW5pMzAxNXVuaTMwMEV1bmkzMDBGdW5pMzAxNnVuaTMwMTd1bmlGRjNCdW5pRkYzRHVuaUZGMDh1bmlGRjA5dW5pMEUzRmxlc3NfaHlwaGVuLmxpZ2FsZXNzX2h5cGhlbl9oeXBoZW4ubGlnYWxlc3NfaHlwaGVuX2h5cGhlbl9oeXBoZW4ubGlnYWxlc3NfaHlwaGVuX2dyZWF0ZXIubGlnYXVuaTI2MzlzbWlsZWZhY2V1bmkyMTE3bWludXRlc2Vjb25kdW5pMjExNnVuaTIzQ0VFdXJvdW5pMjBCNHVuaTIwQkR1bmkyMEI5dW5pMjBBQW5vdGVxdWFsZ3JlYXRlcmVxdWFsbGVzc2VxdWFsYXBwcm94ZXF1YWxpbmZpbml0eWludGVncmFsdW5pMjIwNnByb2R1Y3RzdW1tYXRpb25yYWRpY2FscGFydGlhbGRpZmZ1bmkwMEI1YXJyb3d1cHVuaTIxOTdhcnJvd3JpZ2h0dW5pMjE5OGFycm93ZG93bnVuaTIxOTlhcnJvd2xlZnR1bmkyMTk2YXJyb3dib3RoYXJyb3d1cGRudW5pMjE5RHVuaTIxRTR1bmkyMUU1dW5pMjFBOXVuaTIxQUF1bmkyMUIwdW5pMjFCMXVuaTIxQjN1bmkyMUI0Y2FycmlhZ2VyZXR1cm51bmkyMUU3YXJyb3d1cC5zczA3dW5pMjE5Ny5zczA3YXJyb3dyaWdodC5zczA3dW5pMjE5OC5zczA3YXJyb3dkb3duLnNzMDd1bmkyMTk5LnNzMDdhcnJvd2xlZnQuc3MwN3VuaTIxOTYu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ClwHgggAClwH+ggAClwH+ggAClwH+ggAClwH+ggAClwH+ggAClwH+ggAClwH+ggAClwH+ggAAAAHiAAAAAAHiAAAAAAHiAAAAAAHjgeUAAAHjgeUAAAH+gfKAAAH+gfKAAAH+gfKAAAH+gfKAAAHmgegAAAH0AfWAAAH0AfWAAAH0AfWAAAH0AfWAAAH0AfWAAAIPAhCAAAIPAhCAAAIPAhCAAAIPAhCAAAIPAhCAAAIPAhCAAAIPAhCAAAHpgesAAAIPAhCAAAIPAhCAAAHsge4AAAHsge4AAAHsge4AAAHsge4AAAHvgfiAAAHvgfiAAAHvgfiAAAHvgfiAAAHvgfiAAAHvgfiAAAHxAmMAAAHxAmMAAAHxAmMAAAHxAmMCrYKvArCCrYKvArCCrYKvArCCrYKvArCCrYKvArCCrYKvArCCrYKvArCCrYKvArCCrYKvArCCrYKvArCCrYKvArCAAAIBggMAAAIBggMAAAIBggMAAAIBggMAAAIBggMAAAIEggYAAAIEggYAAAIEggYAAAIEggYAAAIEggYAAAIEggYAAAIHggkAAAIHggkAAAIHggkAAAIHggkAAAH+gfKAAAH0AfWAAAH3AfiAAAH3AfiAAAH3AfiAAAH3AfiCCoIMAg2CCoIMAg2CCoIMAg2CCoIMAg2CCoIMAg2CCoIMAg2CCoIMAg2CCoIMAg2CCoIMAg2AAAIPAhCAAAIPAhCAAAIPAhCAAAIPAhCAAAIPAhCAAAIPAhCCooKkAAAAAAIPAhCB+gH7gf0B+gH7gf0AAAIPAhCClwH+ggAClwH+ggAAAAIPAhCCrYKvArCAAAIBggMAAAIEggYAAAIHggkCCoIMAg2CCoIMAg2AAAIPAhCCXQJegmACXQJegmACXQJegmACXQJegmACXQJegmACXQJegmACXQJegmACXQJegmACXQJegmACXQJegmACXQJegmACEgITghUAAAJhgmMAAAJhgmMAAAJhgmMAAAJhgmMAAAJhgmMAAAJhgmMCPAI9gmMCPAI9gmMCPAI9gmMCPAI9gmMCPAI9gmMCPAI9gmMCPAI9gmMCPAI9gmMCPAI9gmMCPAI9gmMCFoIYAhmAAAI/AAAAAAI/AAAAAAI/AAAAAAI/AAAAAAI/AAAAAAI/AAAAAAIbAAAAAAIbAAAAAAIbAAACQ4JFAAACQ4JFAAA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BkBmd2lkBkBmd2lkBkBsaWdhBkZsaWdhBkZsaWdhBkZsaWdhBkZsaWdhBkZsaWdhBkZsaWdhBkZsaWdhBkZsaWdhBkZsaWdhBkZsaWdhBkZsaWdhBkZsb2NsBkxsb2NsBmRsb2NsBmRsb2NsBmRsb2NsBlJsb2NsBl5sb2NsBlhsb2NsBl5sb2NsBmRsb2NsBmRvcmRuBmpvcmRuBmpvcmRuBmpvcmRuBmpvcmRuBmpvcmRuBmpvcmRuBmpvcmRuBmpvcmRuBmpvcmRuBmpvcmRuBmpvcmRuBmpwbnVtBnJwbnVtBnJwbnVtBnJwbnVtBnJwbnVtBnJwbnVtBnJwbnVtBnJwbnVtBnJwbnVtBnJwbnVtBnJwbnVtBnJwbnVtBnJzaW5mBnhzaW5mBnhzaW5mBnhzaW5mBnhzaW5mBnhzaW5mBnhzaW5mBnhzaW5mBnhzaW5mBnhzaW5mBnhzaW5mBnhzaW5mBnhzczAxBn5zczAxBn5zczAxBn5zczAxBn5zczAxBn5zczAxBn5zczAxBn5zczAxBn5zczAxBn5zczAxBn5zczAxBn5zczAxBn5zczAyBohzczAyBohzczAyBohzczAyBohzczAyBohzczAyBohzczAyBohzczAyBohzczAyBohzczAyBohzczAyBohzczAyBohzczAzBpJzczAzBpJzczAzBpJzczAzBpJzczAzBpJzczAzBpJzczAzBpJzczAzBpJzczAzBpJzczAzBpJzczAzBpJzczAzBpJzczA0BpxzczA0BpxzczA0BpxzczA0BpxzczA0BpxzczA0BpxzczA0BpxzczA0BpxzczA0BpxzczA0BpxzczA0BpxzczA0BpxzczA1BqZzczA1BqZzczA1BqZzczA1BqZzczA1BqZzczA1BqZzczA1BqZzczA1BqZzczA1BqZzczA1BqZzczA1BqZzczA1BqZzczA2BrBzczA2BrBzczA2BrBzczA2BrBzczA2BrBzczA2BrBzczA2BrBzczA2BrBzczA2BrBzczA2BrBzczA2BrBzczA2BrBzczA3BrpzczA3BrpzczA3BrpzczA3BrpzczA3BrpzczA3BrpzczA3BrpzczA3BrpzczA3BrpzczA3BrpzczA3BrpzczA3BrpzczA4BsRzczA4BsRzczA4BsRzczA4BsRzczA4BsRzczA4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",
      "base64"
    );
  }
};

// src/assets/Font.ts
var randomAlias = /* @__PURE__ */ __name(() => randomUUID(), "randomAlias");
var _Font = class _Font {
  /**
   * Creates and registers a new Font instance for both canvas and builder apis.
   * @param data The font data
   * @param [alias] The font alias. If not provided, a random UUID will be used.
   *
   * const data = await readFile('path/to/font.ttf');
   * const font = new Font(data, 'my-font');
   
   */
  constructor(data, alias = randomAlias()) {
    this.data = data;
    this.alias = alias;
    GlobalFonts.register(data, alias);
    FontFactory.set(this.alias, this);
  }
  /**
   * The alias for this font.
   */
  get name() {
    return this.alias;
  }
  /**
   * Returns the font data that includes information such as the font name, weight, data, and style.
   */
  getData() {
    return {
      data: this.data,
      name: this.alias,
      weight: 400,
      style: "normal"
    };
  }
  /**
   * String representation of this font.
   */
  toString() {
    return this.alias;
  }
  /**
   * JSON representation of this font.
   */
  toJSON() {
    return this.getData();
  }
  /**
   * Creates a new Font instance from a file.
   * @param path The path to the font file
   * @param [alias] The font alias. If not provided, a random UUID will be used.
   *
   * const font = await Font.fromFile('path/to/font.ttf', 'my-font');
   
   */
  static async fromFile(path, alias) {
    const buffer3 = await readFile(path);
    return new _Font(buffer3, alias);
  }
  /**
   * Creates a new Font instance from a file synchronously.
   * @param path The path to the font file
   * @param [alias] The font alias. If not provided, a random UUID will be used.
   *
   * const font = Font.fromFileSync('path/to/font.ttf', 'my-font');
   */
  static fromFileSync(path, alias) {
    const buffer3 = readFileSync(path);
    return new _Font(buffer3, alias);
  }
  /**
   * Creates a new Font instance from a buffer.
   * @param buffer The buffer containing the font data
   * @param [alias] The font alias. If not provided, a random UUID will be used.
   *
   * const buffer = await readFile('path/to/font.ttf');
   * const font = Font.fromBuffer(buffer, 'my-font');
   
   */
  static fromBuffer(buffer3, alias) {
    return new _Font(buffer3, alias);
  }
  /**
   * Loads the default font bundled with this package.
   *
   * const font = Font.loadDefault();
   
   */
  static loadDefault() {
    return this.fromBuffer(Fonts.Geist, "geist");
  }
};
__name(_Font, "Font");
var Font = _Font;

// src/helpers/StyleSheet.ts
import { twMerge } from "tailwind-merge";
var performObjectCleanup = /* @__PURE__ */ __name((obj, deep = false) => {
  for (const prop in obj) {
    if (obj[prop] === void 0)
      delete obj[prop];
    if (typeof obj[prop] === "object" && deep)
      performObjectCleanup(obj[prop], deep);
  }
}, "performObjectCleanup");
var _StyleSheet = class _StyleSheet extends null {
  constructor() {
  }
  /**
   * Creates a new CSSPropertiesLike object.
   */
  static create(styles) {
    if (!styles || typeof styles !== "object")
      return {};
    performObjectCleanup(styles);
    return styles;
  }
  /**
   * Composes two CSSPropertiesLike objects.
   */
  static compose(style1, style2) {
    performObjectCleanup(style1);
    performObjectCleanup(style2);
    return Object.assign(style1, style2);
  }
  /**
   * Flattens an array of CSSPropertiesLike objects.
   */
  static flatten(style) {
    return style.reduce((previous, current) => {
      performObjectCleanup(current);
      return Object.assign(previous, current);
    }, {});
  }
  /**
   * Merges multiple tailwind-like class names into appropriate class names.
   */
  static cn(...classes) {
    return twMerge(...classes);
  }
  /**
   * Returns the className string from stylable data.
   */
  static tw(data) {
    if (typeof data === "string")
      return data;
    return data?.className ?? "";
  }
  /**
   * Returns the style object from stylable data.
   */
  static css(data) {
    if (typeof data === "string")
      return {};
    return data?.style ?? {};
  }
};
__name(_StyleSheet, "StyleSheet");
var StyleSheet = _StyleSheet;

// src/helpers/jsx.ts
var isNode = /* @__PURE__ */ __name((node) => {
  return typeof node === "object" && node != null && "toElement" in node;
}, "isNode");
var _Element = class _Element {
  /**
   * Creates a new JSX element.
   * @param _init The initialization options
   */
  constructor(_init) {
    this.type = _init.type;
    this.props = _init.props;
    this.key = _init.key ?? null;
    this.children = _init.children;
  }
};
__name(_Element, "Element");
var Element = _Element;
var cleanStyles = /* @__PURE__ */ __name((properties) => {
  performObjectCleanup(properties, true);
  return properties;
}, "cleanStyles");
var JSX = {
  /**
   * The JSX element instance.
   */
  Element,
  /**
   * Creates a new JSX element.
   * @param type The type of the element
   * @param props The props of the element
   * @param children The children of the element
   * @returns The created element
   */
  createElement(type, props, ...children) {
    if (type instanceof Element)
      return type;
    props ??= {};
    if (isObjectEmpty(props.style))
      delete props.style;
    if ("className" in props)
      props.tw ??= props.className;
    if (type === "div") {
      if (!("tw" in props) && !("style" in props)) {
        props.tw = StyleSheet.cn(
          "flex flex-col content-start shrink-0",
          props.tw
        );
      }
    }
    return new Element({
      type,
      props: {
        ...cleanStyles(props),
        children
      },
      children
    });
  },
  /**
   * Creates a new JSX fragment.
   * @param children The children of the fragment
   */
  Fragment({ children }) {
    return new Element({ type: "Fragment", props: { children }, children });
  }
};
function render(components) {
  return components.map((component) => {
    if (component == null)
      return [];
    if (component instanceof Element)
      return component;
    if (isNode(component))
      return component.toElement();
    const child = String(component);
    return JSX.createElement("span", { children: child }, child);
  }).flat(1);
}
__name(render, "render");
function isObjectEmpty(obj) {
  return obj ? Object.keys(obj).length === 0 : false;
}
__name(isObjectEmpty, "isObjectEmpty");

// src/helpers/loadImage.ts
import { Readable } from "stream";
import * as fs from "fs";

// src/helpers/image.ts
import { renderAsync } from "@resvg/resvg-js";
import { Transformer } from "@napi-rs/image";
async function renderSvg({
  svg,
  format,
  options,
  signal
}) {
  const opts = {
    font: {
      loadSystemFonts: false
    },
    logLevel: "off"
  };
  const output = await renderAsync(svg, opts);
  if (format === "png") {
    return output.asPng();
  }
  const transformer = Transformer.fromRgbaPixels(output.pixels, output.width, output.height);
  options ??= null;
  signal ??= null;
  switch (format) {
    case "avif":
      return transformer.avif(options, signal);
    case "jpeg":
      return transformer.jpeg(options, signal);
    case "webp":
      return transformer.webp(options, signal);
    default:
      throw new TypeError(`Unsupported encoding format: "${format}"`);
  }
}
__name(renderSvg, "renderSvg");
var _CanvacordImage = class _CanvacordImage {
  constructor(data, mime) {
    this.data = data;
    this.mime = mime;
  }
  toBase64() {
    return this.data.toString("base64");
  }
  toDataURL() {
    return `data:${this.mime};base64,${this.toBase64()}`;
  }
};
__name(_CanvacordImage, "CanvacordImage");
var CanvacordImage = _CanvacordImage;

// src/helpers/loadImage.ts
import * as fileType from "file-type";
import { Image } from "@napi-rs/canvas";
import { buffer } from "stream/consumers";
import { Transformer as Transformer2 } from "@napi-rs/image";
var http;
var https;
var MAX_REDIRECTS = 20;
var REDIRECT_STATUSES = /* @__PURE__ */ new Set([301, 302]);
var DATA_URI = /^\s*data:/;
var NEEDS_TRANSFORMATION = [
  "image/webp",
  "image/gif",
  "image/bmp",
  "image/icns",
  "image/tiff"
];
async function loadImage(source, options = {}) {
  if (source instanceof CanvacordImage)
    return source;
  if (source instanceof Readable)
    return createImage(await buffer(source));
  if (Buffer.isBuffer(source))
    return createImage(source);
  if (isBufferLike(source))
    return createImage(Buffer.from(source));
  if (source instanceof Image)
    return createImage(source.src);
  if (typeof source === "string" && DATA_URI.test(source)) {
    const commaIdx = source.indexOf(",");
    const encoding = source.lastIndexOf("base64", commaIdx) < 0 ? "utf-8" : "base64";
    const data = Buffer.from(source.slice(commaIdx + 1), encoding);
    return createImage(data);
  }
  if (typeof source === "string" || source instanceof URL) {
    if (await exists(source)) {
      return createImage(await fs.promises.readFile(source));
    } else {
      if (typeof fetch !== "undefined") {
        return fetch(source, {
          redirect: "follow",
          // @ts-expect-error
          headers: options.requestOptions?.headers
        }).then(async (res) => {
          if (!res.ok)
            throw new Error(
              `remote source rejected with status code ${res.status}`
            );
          return await createImage(Buffer.from(await res.arrayBuffer()));
        });
      }
      source = source instanceof URL ? source : new URL(source);
      const data = await new Promise(
        (resolve, reject) => makeRequest(
          source,
          resolve,
          reject,
          typeof options.maxRedirects === "number" && options.maxRedirects >= 0 ? options.maxRedirects : MAX_REDIRECTS,
          options.requestOptions || {}
        )
      );
      return createImage(data);
    }
  }
  throw new TypeError("unsupported image source");
}
__name(loadImage, "loadImage");
function makeRequest(url, resolve, reject, redirectCount, requestOptions) {
  const isHttps = url.protocol === "https:";
  const lib = isHttps ? !https ? https = __require("https") : https : !http ? http = __require("http") : http;
  lib.get(url.toString(), requestOptions || {}, (res) => {
    const shouldRedirect = REDIRECT_STATUSES.has(res.statusCode) && typeof res.headers.location === "string";
    if (shouldRedirect && redirectCount > 0)
      return makeRequest(
        new URL(res.headers.location),
        resolve,
        reject,
        redirectCount - 1,
        requestOptions
      );
    if (typeof res.statusCode === "number" && (res.statusCode < 200 || res.statusCode >= 300)) {
      return reject(
        new Error(`remote source rejected with status code ${res.statusCode}`)
      );
    }
    buffer(res).then(resolve, reject);
  }).on("error", reject);
}
__name(makeRequest, "makeRequest");
async function createImage(src) {
  const mime = await fileType.fromBuffer(src);
  if (!mime?.mime)
    throw new Error("failed to load image");
  if (NEEDS_TRANSFORMATION.includes(mime.mime)) {
    const transformed = await new Transformer2(src).png();
    return new CanvacordImage(transformed, "image/png");
  }
  return new CanvacordImage(src, mime.mime);
}
__name(createImage, "createImage");
function isBufferLike(src) {
  return (
    // @ts-ignore
    src && src.type === "Buffer" || Array.isArray(src) || src instanceof ArrayBuffer || src instanceof SharedArrayBuffer || src instanceof Object.getPrototypeOf(Uint8Array)
  );
}
__name(isBufferLike, "isBufferLike");
async function exists(path) {
  try {
    await fs.promises.access(path, fs.constants.F_OK);
    return true;
  } catch {
    return false;
  }
}
__name(exists, "exists");

// src/canvas/utils.ts
import { loadImage as createImage2 } from "@napi-rs/canvas";
var createCanvasImage = /* @__PURE__ */ __name(async (img) => {
  const canvacordImg = await loadImage(img);
  const nativeImage = await createImage2(canvacordImg.data);
  return nativeImage;
}, "createCanvasImage");

// src/canvas/ImageGen.ts
import { createCanvas } from "@napi-rs/canvas";
import { GifEncoder } from "@skyra/gifenc";

// src/canvas/Encodable.ts
var _Encodable = class _Encodable {
  /**
   * Encodes the canvas to a buffer.
   * @param format The encoding format
   * @param [options] The encoding options or quality
   */
  async encode(format = "png", options) {
    const canvas = await this.getFinalCanvas();
    switch (format) {
      case "png":
        return canvas.encode(format);
      case "jpeg":
      case "webp":
        if (typeof options === "number")
          return canvas.encode(format, options);
        return canvas.encode(format);
      case "avif":
        if (typeof options === "object")
          return canvas.encode(format, options);
        return canvas.encode(format);
      default:
        throw new TypeError(`Invalid encoding format: "${format}"`);
    }
  }
};
__name(_Encodable, "Encodable");
var Encodable = _Encodable;

// src/canvas/ImageGen.ts
var _ImageGenerationTemplate = class _ImageGenerationTemplate {
  /**
   * Creates a new ImageGenerationTemplate instance.
   * @param width The width of the template
   * @param height The height of the template
   */
  constructor(width, height) {
    this.width = width;
    this.height = height;
    /**
     * The steps to apply to the canvas.
     */
    this.steps = [];
  }
  /**
   * Creates a new ImageGenerationTemplate instance from a template.
   * @param template The template to use
   * @returns The created template
   */
  static from(template) {
    return new _ImageGenerationTemplate(template.width, template.height).setSteps(template.steps).setGifOptions(template.gif);
  }
  /**
   * Sets the steps. This will overwrite any existing steps.
   * @param steps The steps to set
   */
  setSteps(steps) {
    this.steps = steps;
    return this;
  }
  /**
   * Sets the gif options.
   * @param options The gif options
   */
  setGifOptions(options) {
    this.gif = options;
    return this;
  }
  /**
   * Returns whether the template is a gif.
   */
  isGif() {
    return this.gif != null;
  }
  /**
   * Adds a step to the template.
   * @param step The step to add
   */
  addStep(step) {
    this.steps.push(step);
    return this;
  }
  /**
   * Adds steps to the template.
   * @param steps The steps to add
   */
  addSteps(steps) {
    this.steps.push(...steps);
    return this;
  }
  /**
   * Clears the steps.
   */
  clearSteps() {
    this.steps = [];
    return this;
  }
  /**
   * Returns whether the size is inferrable.
   */
  isInferrable() {
    return [this.width, this.height].some((r) => r != null);
  }
  /**
   * Returns the width of the template.
   */
  getWidth() {
    return this.width ?? this.height;
  }
  /**
   * Returns the height of the template.
   */
  getHeight() {
    return this.height ?? this.width;
  }
  /**
   * Returns the JSON representation of the template.
   */
  toJSON() {
    return {
      width: this.width,
      height: this.height,
      steps: this.steps,
      gif: this.gif
    };
  }
};
__name(_ImageGenerationTemplate, "ImageGenerationTemplate");
var ImageGenerationTemplate = _ImageGenerationTemplate;
var _inferSize, inferSize_fn, _applyGeneration, applyGeneration_fn;
var _ImageGen = class _ImageGen extends Encodable {
  /**
   * Creates a new ImageGen instance.
   * @param template The template to use
   */
  constructor(template) {
    super();
    this.template = template;
    __privateAdd(this, _inferSize);
    __privateAdd(this, _applyGeneration);
  }
  /**
   * Adds a step to the template.
   * @param step The step to add
   */
  addStep(step) {
    this.template.addStep(step);
    return this;
  }
  /**
   * Adds steps to the template.
   * @param steps The steps to add
   */
  addSteps(steps) {
    this.template.addSteps(steps);
    return this;
  }
  /**
   * Sets the gif options.
   * @param options The gif options
   */
  setGifOptions(options) {
    this.template.setGifOptions(options);
    return this;
  }
  /**
   * Returns whether the template is a gif.
   */
  isGif() {
    return this.template.isGif();
  }
  /**
   * Generates a readable stream containing GIF data by applying the steps.
   */
  async generateGif() {
    if (this.template.gif == null)
      throw new Error("Cannot generate gif on non-gif template");
    const options = this.template.gif;
    const { width, height } = await __privateMethod(this, _inferSize, inferSize_fn).call(this);
    const encoder = new GifEncoder(width, height);
    if (options.repeat != null)
      encoder.setRepeat(options.repeat);
    if (options.delay != null)
      encoder.setDelay(options.delay);
    if (options.quality != null)
      encoder.setQuality(options.quality);
    if (options.dispose != null)
      encoder.setDispose(options.dispose);
    if (options.framerate != null)
      encoder.setFramerate(options.framerate);
    if (options.transparent != null)
      encoder.setTransparent(options.transparent);
    const canvas = this._canvas = createCanvas(width, height);
    const ctx = canvas.getContext("2d");
    const stream = encoder.createReadStream();
    encoder.start();
    for (const step of this.template.steps) {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      await __privateMethod(this, _applyGeneration, applyGeneration_fn).call(this, canvas, ctx, step);
      encoder.addFrame(ctx);
    }
    encoder.finish();
    return stream;
  }
  /**
   * Renders the image by applying the steps.
   */
  async render() {
    const { width, height } = await __privateMethod(this, _inferSize, inferSize_fn).call(this);
    const canvas = this._canvas = createCanvas(width, height);
    const ctx = canvas.getContext("2d");
    for (const step of this.template.steps) {
      await __privateMethod(this, _applyGeneration, applyGeneration_fn).call(this, canvas, ctx, step);
    }
    return this;
  }
  /**
   * Returns the canvas instance by applying the steps.
   */
  getFinalCanvas() {
    if (!this._canvas)
      throw new Error("render() or generateGif() must be called before accessing the final canvas");
    return Promise.resolve(this._canvas);
  }
};
_inferSize = new WeakSet();
inferSize_fn = /* @__PURE__ */ __name(async function() {
  if (this.template.isInferrable())
    return { width: this.template.getWidth(), height: this.template.getHeight() };
  if (!this.template.steps.length)
    throw new Error("Cannot infer size from empty template");
  const firstImg = this.template.steps.find((s) => s.image?.length)?.image?.[0];
  if (!firstImg)
    throw new Error("Cannot infer size from non-image template");
  const img = await firstImg.source.resolve();
  return { width: img.width, height: img.height };
}, "#inferSize");
_applyGeneration = new WeakSet();
applyGeneration_fn = /* @__PURE__ */ __name(async function(canvas, ctx, step) {
  if (step.preprocess) {
    await step.preprocess(canvas, ctx, step);
  }
  if (step.process) {
    await step.process(canvas, ctx, step);
  } else {
    if (step.custom) {
      for (const custom of step.custom) {
        await custom.process(canvas, ctx, step);
      }
    }
    if (step.image) {
      for (const img of step.image) {
        if (img.preprocess) {
          await img.preprocess(canvas, ctx, img);
        }
        if (img.process) {
          await img.process(canvas, ctx, img);
        } else {
          const image = await img.source.resolve();
          if (!img.width || !img.height) {
            ctx.drawImage(image, img.x, img.y, canvas.width, canvas.height);
          } else {
            ctx.drawImage(image, img.x, img.y, img.width, img.height);
          }
        }
        if (img.postprocess) {
          await img.postprocess(canvas, ctx, img);
        }
      }
    }
    if (step.text) {
      for (const text of step.text) {
        if (text.preprocess) {
          await text.preprocess(canvas, ctx, text);
        }
        if (text.process) {
          await text.process(canvas, ctx, text);
        } else {
          if (text.font != null)
            ctx.font = text.font;
          if (text.color != null)
            ctx[text.stroke ? "strokeStyle" : "fillStyle"] = text.color;
          if (text.align != null)
            ctx.textAlign = text.align;
          if (text.baseline != null)
            ctx.textBaseline = text.baseline;
          if (text.direction != null)
            ctx.direction = text.direction;
          if (text.lineWidth != null)
            ctx.lineWidth = text.lineWidth;
          ctx[text.stroke ? "strokeText" : "fillText"](text.value, text.x, text.y, text.maxWidth);
        }
        if (text.postprocess) {
          await text.postprocess(canvas, ctx, text);
        }
      }
    }
  }
  if (step.postprocess) {
    await step.postprocess(canvas, ctx, step);
  }
}, "#applyGeneration");
__name(_ImageGen, "ImageGen");
var ImageGen = _ImageGen;
function createImageGenerator(template) {
  const gen = new ImageGen(template);
  return gen;
}
__name(createImageGenerator, "createImageGenerator");

// src/assets/TemplateFactory.ts
var _resolved;
var _TemplateImage = class _TemplateImage {
  /**
   * Creates a new TemplateImage instance.
   * @param source The image source
   *
   * const image = new TemplateImage('https://example.com/image.png');
   
   */
  constructor(source) {
    this.source = source;
    __privateAdd(this, _resolved, null);
  }
  /**
   * Whether this image has been resolved.
   */
  resolved() {
    return __privateGet(this, _resolved) != null;
  }
  /**
   * Resolves this image to consumable form.
   */
  async resolve() {
    if (__privateGet(this, _resolved))
      return __privateGet(this, _resolved);
    return __privateSet(this, _resolved, await createCanvasImage(this.source));
  }
};
_resolved = new WeakMap();
__name(_TemplateImage, "TemplateImage");
var TemplateImage = _TemplateImage;
var createTemplate = /* @__PURE__ */ __name((cb) => {
  return (...args) => {
    const template = cb(...args);
    return ImageGenerationTemplate.from(template);
  };
}, "createTemplate");
var TemplateFactory = {
  Affect: createTemplate((image) => {
    return {
      steps: [
        {
          image: [
            {
              source: new TemplateImage(ImageFactory.AFFECT),
              x: 0,
              y: 0
            }
          ]
        },
        {
          image: [
            {
              source: new TemplateImage(image),
              x: 180,
              y: 383,
              width: 200,
              height: 157
            }
          ]
        }
      ]
    };
  }),
  Triggered: createTemplate((image) => {
    const src = new TemplateImage(image);
    const factory2 = new TemplateImage(ImageFactory.TRIGGERED);
    return {
      gif: {
        repeat: 0,
        delay: 15
      },
      width: 256,
      height: 310,
      steps: (() => {
        const d = [];
        const BR = 30;
        const LR = 20;
        for (let i = 0; i < 9; i++) {
          d.push({
            image: [
              {
                source: src,
                x: Math.floor(Math.random() * BR) - BR,
                y: Math.floor(Math.random() * BR) - BR,
                width: 256 + BR,
                height: 310 - 54 + BR
              },
              {
                source: factory2,
                x: Math.floor(Math.random() * LR) - LR,
                y: 310 - 54 + Math.floor(Math.random() * LR) - LR,
                width: 256 + LR,
                height: 54 + LR
              }
            ]
          });
        }
        return d;
      })()
    };
  }),
  Fuse: createTemplate((destination, source) => {
    return {
      steps: [
        {
          image: [
            {
              source: new TemplateImage(destination),
              x: 0,
              y: 0
            }
          ]
        },
        {
          preprocess(canvas, ctx) {
            ctx.globalCompositeOperation = "multiply";
          }
        },
        {
          image: [
            {
              source: new TemplateImage(source),
              x: 0,
              y: 0
            }
          ]
        }
      ]
    };
  }),
  Kiss: createTemplate((image1, image2) => {
    return {
      steps: [
        {
          image: [
            {
              source: new TemplateImage(ImageFactory.KISS),
              x: 0,
              y: 0
            }
          ]
        },
        {
          image: [
            {
              source: new TemplateImage(image1),
              x: 370,
              y: 25,
              width: 200,
              height: 200
            }
          ]
        },
        {
          image: [
            {
              source: new TemplateImage(image2),
              x: 150,
              y: 25,
              width: 200,
              height: 200
            }
          ]
        }
      ]
    };
  }),
  Spank: createTemplate((image1, image2) => {
    return {
      width: 500,
      height: 500,
      steps: [
        {
          image: [
            {
              source: new TemplateImage(ImageFactory.SPANK),
              x: 0,
              y: 0,
              width: 500,
              height: 500
            }
          ]
        },
        {
          image: [
            {
              source: new TemplateImage(image1),
              x: 350,
              y: 220,
              width: 120,
              height: 120
            }
          ]
        },
        {
          image: [
            {
              source: new TemplateImage(image2),
              x: 225,
              y: 5,
              width: 140,
              height: 140
            }
          ]
        }
      ]
    };
  }),
  Slap: createTemplate((image1, image2) => {
    return {
      width: 1e3,
      height: 500,
      steps: [
        {
          image: [
            {
              source: new TemplateImage(ImageFactory.BATSLAP),
              x: 0,
              y: 0,
              width: 1e3,
              height: 500
            }
          ]
        },
        {
          image: [
            {
              source: new TemplateImage(image1),
              x: 350,
              y: 70,
              width: 220,
              height: 220
            }
          ]
        },
        {
          image: [
            {
              source: new TemplateImage(image2),
              x: 580,
              y: 260,
              width: 200,
              height: 200
            }
          ]
        }
      ]
    };
  }),
  Beautiful: createTemplate((image) => {
    return {
      width: 376,
      height: 400,
      steps: [
        {
          image: [
            {
              source: new TemplateImage(ImageFactory.BEAUTIFUL),
              x: 0,
              y: 0,
              width: 376,
              height: 400
            }
          ]
        },
        {
          image: [
            {
              source: new TemplateImage(image),
              x: 258,
              y: 28,
              width: 84,
              height: 95
            }
          ]
        },
        {
          image: [
            {
              source: new TemplateImage(image),
              x: 258,
              y: 229,
              width: 84,
              height: 95
            }
          ]
        }
      ]
    };
  }),
  Facepalm: createTemplate((image) => {
    return {
      width: 632,
      height: 357,
      steps: [
        {
          preprocess(canvas, ctx) {
            ctx.fillStyle = "#000000";
            ctx.fillRect(0, 0, canvas.width, canvas.height);
          }
        },
        {
          image: [
            {
              source: new TemplateImage(image),
              x: 199,
              y: 112,
              width: 235,
              height: 235
            }
          ]
        },
        {
          image: [
            {
              source: new TemplateImage(ImageFactory.FACEPALM),
              x: 0,
              y: 0,
              width: 632,
              height: 357
            }
          ]
        }
      ]
    };
  }),
  Rainbow: createTemplate((image) => {
    return {
      steps: [
        {
          image: [
            {
              source: new TemplateImage(image),
              x: 0,
              y: 0
            }
          ]
        },
        {
          image: [
            {
              source: new TemplateImage(ImageFactory.RAINBOW),
              x: 0,
              y: 0
            }
          ]
        }
      ]
    };
  }),
  Rip: createTemplate((image) => {
    return {
      width: 244,
      height: 253,
      steps: [
        {
          image: [
            {
              source: new TemplateImage(ImageFactory.RIP),
              x: 0,
              y: 0
            }
          ]
        },
        {
          image: [
            {
              source: new TemplateImage(image),
              x: 63,
              y: 110,
              width: 90,
              height: 90
            }
          ]
        }
      ]
    };
  }),
  Trash: createTemplate((image) => {
    return {
      steps: [
        {
          image: [
            {
              source: new TemplateImage(ImageFactory.TRASH),
              x: 0,
              y: 0
            }
          ]
        },
        {
          image: [
            {
              source: new TemplateImage(image),
              x: 309,
              y: 0,
              width: 309,
              height: 304
            }
          ]
        }
      ]
    };
  }),
  Hitler: createTemplate((image) => {
    return {
      steps: [
        {
          image: [
            {
              source: new TemplateImage(ImageFactory.HITLER),
              x: 0,
              y: 0
            }
          ]
        },
        {
          image: [
            {
              source: new TemplateImage(image),
              x: 46,
              y: 43,
              width: 140,
              height: 140
            }
          ]
        }
      ]
    };
  }),
  Distracted: createTemplate((image1, image2, image3) => {
    return {
      steps: (() => {
        const clipCircle = /* @__PURE__ */ __name((ctx, width, height) => {
          ctx.save();
          ctx.globalCompositeOperation = "destination-in";
          ctx.beginPath();
          ctx.arc(width / 2, height / 2, width / 2, 0, Math.PI * 2);
          ctx.closePath();
          ctx.fill();
          ctx.restore();
        }, "clipCircle");
        const ret = [
          {
            image: [
              {
                source: new TemplateImage(ImageFactory.DISTRACTED),
                x: 0,
                y: 0
              }
            ]
          },
          {
            image: [
              {
                source: new TemplateImage(image1),
                x: 180,
                y: 90,
                width: 150,
                height: 150,
                postprocess(canvas, ctx) {
                  clipCircle(ctx, 150, 150);
                }
              }
            ]
          },
          {
            image: [
              {
                source: new TemplateImage(image2),
                x: 480,
                y: 35,
                width: 130,
                height: 130,
                postprocess(canvas, ctx) {
                  clipCircle(ctx, 130, 130);
                }
              }
            ]
          }
        ];
        if (image3) {
          ret.push({
            image: [
              {
                source: new TemplateImage(image3),
                x: 730,
                y: 110,
                width: 130,
                height: 130,
                postprocess(canvas, ctx) {
                  clipCircle(ctx, 130, 130);
                }
              }
            ]
          });
        }
        return ret;
      })()
    };
  }),
  Colorfy: createTemplate((image, color) => {
    return {
      steps: [
        {
          image: [
            {
              source: new TemplateImage(image),
              x: 0,
              y: 0
            }
          ]
        },
        {
          preprocess(canvas, ctx) {
            ctx.globalCompositeOperation = "color";
            ctx.fillStyle = color;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
          }
        }
      ]
    };
  }),
  Jail: createTemplate((image, greyscale) => {
    return {
      steps: [
        {
          image: [
            {
              source: new TemplateImage(ImageFactory.JAIL),
              x: 0,
              y: 0
            }
          ]
        },
        {
          image: [
            {
              source: new TemplateImage(image),
              x: 0,
              y: 0,
              width: 256,
              height: 256,
              postprocess(canvas, ctx) {
                if (greyscale) {
                  ctx.filter = "grayscale(100%)";
                }
              }
            }
          ]
        }
      ]
    };
  }),
  Bed: createTemplate((image1, image2) => {
    return {
      steps: [
        {
          image: [
            {
              source: new TemplateImage(ImageFactory.BED),
              x: 0,
              y: 0
            }
          ]
        },
        {
          image: [
            {
              source: new TemplateImage(image1),
              x: 0,
              y: 0,
              width: 256,
              height: 256
            }
          ]
        },
        {
          image: [
            {
              source: new TemplateImage(image2),
              x: 256,
              y: 0,
              width: 256,
              height: 256
            }
          ]
        }
      ]
    };
  }),
  JokeOverHead: createTemplate((image) => {
    return {
      steps: [
        {
          preprocess(_canvas, ctx) {
            ctx.globalCompositeOperation = "color";
            ctx.fillStyle = "black";
            ctx.fillRect(0, 0, 425, 404);
          }
        },
        {
          image: [
            {
              source: new TemplateImage(image),
              x: 125,
              y: 130,
              width: 140,
              height: 135
            }
          ]
        },
        {
          image: [
            {
              source: new TemplateImage(ImageFactory.JOKEOVERHEAD),
              x: 0,
              y: 0,
              width: 425,
              height: 404
            }
          ]
        }
      ]
    };
  }),
  Delete: createTemplate((image) => {
    return {
      steps: [
        {
          image: [
            {
              source: new TemplateImage(ImageFactory.DELETE),
              x: 0,
              y: 0
            }
          ]
        },
        {
          image: [
            {
              source: new TemplateImage(image),
              x: 120,
              y: 135,
              width: 195,
              height: 195
            }
          ]
        }
      ]
    };
  }),
  Wanted: createTemplate((image) => {
    return {
      steps: [
        {
          image: [
            {
              source: new TemplateImage(ImageFactory.WANTED),
              x: 0,
              y: 0
            }
          ]
        },
        {
          image: [
            {
              source: new TemplateImage(image),
              x: 145,
              y: 282,
              width: 447,
              height: 447
            }
          ]
        }
      ]
    };
  }),
  Wasted: createTemplate((image) => {
    return {
      steps: [
        {
          image: [
            {
              source: new TemplateImage(image),
              x: 0,
              y: 0,
              preprocess(_canvas, ctx) {
                ctx.filter = "greyscale(100%)";
              }
            }
          ]
        },
        {
          image: [
            {
              source: new TemplateImage(ImageFactory.WASTED),
              x: 145,
              y: 282
            }
          ]
        }
      ]
    };
  }),
  Shit: createTemplate((image) => {
    const clipCircle = /* @__PURE__ */ __name((ctx, width, height) => {
      ctx.save();
      ctx.globalCompositeOperation = "destination-in";
      ctx.beginPath();
      ctx.arc(width / 2, height / 2, width / 2, 0, Math.PI * 2);
      ctx.closePath();
      ctx.fill();
      ctx.restore();
    }, "clipCircle");
    return {
      steps: [
        {
          image: [
            {
              source: new TemplateImage(ImageFactory.SHIT),
              x: 0,
              y: 0
            }
          ]
        },
        {
          image: [
            {
              source: new TemplateImage(image),
              x: 210,
              y: 700,
              width: 170,
              height: 170,
              preprocess(_canvas, ctx) {
                clipCircle(ctx, 170, 170);
              }
            }
          ]
        }
      ]
    };
  })
};

// src/helpers/utils.ts
var fixed = /* @__PURE__ */ __name((v, r) => {
  if (!r)
    return v;
  const formatter = new Intl.NumberFormat("en-US", { notation: "compact" });
  return formatter.format(v);
}, "fixed");
var getDefaultFont = /* @__PURE__ */ __name(() => {
  return FontFactory.values().next().value ?? null;
}, "getDefaultFont");

// src/templates/Builder.tsx
import satori from "satori";

// src/templates/BuilderOptionsManager.ts
var _BuilderOptionsManager = class _BuilderOptionsManager {
  /**
   * Creates a new builder options manager.
   * @param options The options to use
   */
  constructor(options = {}) {
    this.options = options;
  }
  /**
   * Returns the options.
   */
  getOptions() {
    return this.options;
  }
  /**
   * Sets the options. This will override the previous options.
   * @param options The options to use
   */
  setOptions(options) {
    this.options = options;
  }
  /**
   * Get an option by name.
   * @param key The option name
   * @returns The option value
   */
  get(key) {
    return this.options[key];
  }
  /**
   * Set an option by name.
   * @param key The option name
   * @param value The option value
   */
  set(key, value) {
    this.options[key] = value;
  }
  /**
   * Merge new data to old data on an option by name.
   */
  merge(key, value) {
    this.options[key] = { ...this.options[key], ...value };
  }
};
__name(_BuilderOptionsManager, "BuilderOptionsManager");
var BuilderOptionsManager = _BuilderOptionsManager;

// src/templates/Builder.tsx
var isEmoji = /* @__PURE__ */ __name((str) => {
  const emojiRegex = /^[\p{Emoji}]$/u;
  return emojiRegex.test(str);
}, "isEmoji");
function emojiToUnicode(emoji) {
  if (emoji.length === 1)
    return emoji.charCodeAt(0).toString(16);
  let comp = (emoji.charCodeAt(0) - 55296) * 1024 + (emoji.charCodeAt(1) - 56320) + 65536;
  if (comp < 0)
    return emoji.charCodeAt(0).toString(16);
  return comp.toString(16).toLowerCase();
}
__name(emojiToUnicode, "emojiToUnicode");
var createEmojiProvider = /* @__PURE__ */ __name((builder) => {
  const graphemeProvider = {};
  const handler = {
    has(target, p) {
      return isEmoji(p) || p in target;
    },
    get(target, prop) {
      if (isEmoji(prop)) {
        const code = emojiToUnicode(prop);
        const url = builder(code);
        return url;
      }
      return prop;
    }
  };
  return new Proxy(graphemeProvider, handler);
}, "createEmojiProvider");
var FluentEmojiBase = /* @__PURE__ */ __name((s) => `https://cdn.jsdelivr.net/gh/shuding/fluentui-emoji-unicode/assets/${s}.svg`, "FluentEmojiBase");
var BuiltInGraphemeProvider = {
  Twemoji: createEmojiProvider(
    (code) => `https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/${code}.svg`
  ),
  FluentEmojiHighContrast: createEmojiProvider(
    (code) => FluentEmojiBase(`${code}_high-contrast`)
  ),
  FluentEmojiFlat: createEmojiProvider(
    (code) => FluentEmojiBase(`${code}_flat`)
  ),
  FluentEmojiColor: createEmojiProvider(
    (code) => FluentEmojiBase(`${code}_color`)
  ),
  Openmoji: createEmojiProvider(
    (code) => `https://cdn.jsdelivr.net/npm/@svgmoji/openmoji@2.0.0/svg/${code.toUpperCase()}.svg`
  ),
  Noto: createEmojiProvider(
    (code) => `https://cdn.jsdelivr.net/gh/svgmoji/svgmoji/packages/svgmoji__noto/svg/${code.toUpperCase()}.svg`
  ),
  Blobmoji: createEmojiProvider(
    (code) => `https://cdn.jsdelivr.net/npm/@svgmoji/blob@2.0.0/svg/${code.toUpperCase()}.svg`
  ),
  None: {}
};
var EmojiCache = /* @__PURE__ */ new Map();
var _style;
var _Builder = class _Builder {
  /**
   * Create a new builder.
   * @param width the width of this builder.
   * @param height the height of this builder.
   */
  constructor(width, height) {
    this.width = width;
    this.height = height;
    __privateAdd(this, _style, {});
    /**
     * The tailwind subset to apply to this builder.
     */
    this.tw = "";
    /**
     * The components of this builder.
     */
    this.components = new Array();
    /**
     * The options manager of this builder.
     */
    this.options = new BuilderOptionsManager();
    /**
     * The grapheme provider of this builder.
     */
    this.graphemeProvider = BuiltInGraphemeProvider.Twemoji;
    this.adjustCanvas();
  }
  /**
   * Bootstrap this builder with data.
   */
  bootstrap(data) {
    this.options.setOptions(data);
  }
  /**
   * Adjust the canvas size.
   */
  adjustCanvas() {
    __privateSet(this, _style, StyleSheet.create({
      root: {
        width: `${this.width}px`,
        height: `${this.height}px`
      }
    }));
    return this;
  }
  /**
   * Get the style of this builder.
   */
  get style() {
    return __privateGet(this, _style).root;
  }
  /**
   * Set the style of this builder.
   */
  set style(newStyle) {
    StyleSheet.compose(__privateGet(this, _style).root, newStyle);
  }
  /**
   * Add component to this builder.
   * @param component the component to add.
   */
  addComponent(component) {
    if (component instanceof Element && component.type === JSX.Fragment)
      component = component.children;
    if (!Array.isArray(component))
      component = [component];
    this.components.push(...component);
    return this;
  }
  /**
   * Set grapheme image provider for this builder.
   */
  setGraphemeProvider(provider) {
    this.graphemeProvider = provider;
    return this;
  }
  /**
   * Set the style of this builder.
   * @param newStyle the new style.
   */
  setStyle(newStyle) {
    StyleSheet.compose(__privateGet(this, _style).root || {}, newStyle || {});
    return this;
  }
  _render() {
    return this.components.map((component) => {
      if (component == null)
        return [];
      if (component instanceof Element)
        return component;
      if (component.toElement)
        return component.toElement();
      return /* @__PURE__ */ JSX.createElement("span", null, String(component));
    }).flat(1);
  }
  /**
   * Render this builder.
   */
  async render() {
    return /* @__PURE__ */ JSX.createElement("div", { style: this.style }, this._render());
  }
  /**
   * Convert this builder into an image.
   * @param options the build options.
   * @returns the image buffer or svg string.
   */
  async build(options = {}) {
    options.format ??= "png";
    const fonts = Array.from(FontFactory.values()).map(
      (font) => font.getData()
    );
    const element = await this.render();
    const svg = await satori(element, {
      ...options,
      height: this.height,
      width: this.width,
      fonts,
      embedFont: true,
      loadAdditionalAsset: async (languageCode, segment) => {
        const fallback = /* @__PURE__ */ __name(() => options?.loadAdditionalAsset?.(languageCode, segment) ?? segment, "fallback");
        if (languageCode === "emoji" && this.graphemeProvider) {
          const cached = EmojiCache.get(segment);
          if (cached)
            return cached;
          const isSupported = segment in this.graphemeProvider;
          if (!isSupported)
            return fallback();
          try {
            const url = this.graphemeProvider[segment];
            const response = await fetch(url);
            if (!response.ok)
              return fallback();
            const svg2 = await response.arrayBuffer();
            const base64 = `data:image/svg+xml;base64,${Buffer.from(
              svg2
            ).toString("base64")}`;
            EmojiCache.set(segment, base64);
            return base64;
          } catch {
            return fallback();
          }
        }
        return fallback();
      }
    });
    return options?.format === "svg" ? svg : renderSvg({
      svg,
      format: options.format,
      options: options.options,
      signal: options.signal
    });
  }
  /**
   * Create a builder from builder template.
   */
  static from(template) {
    const builder = new this(template.width, template.height);
    if (template.style)
      builder.style = template.style;
    builder.components = template.components;
    return builder;
  }
};
_style = new WeakMap();
__name(_Builder, "Builder");
var Builder = _Builder;

// src/components/LeaderboardBuilder.tsx
var DefaultColors = {
  Yellow: "#FFAA00",
  Blue: "#009BD6",
  Green: "#00D95F"
};
var Crown = /* @__PURE__ */ __name(() => {
  return /* @__PURE__ */ JSX.createElement(
    "svg",
    {
      width: "20",
      height: "20",
      viewBox: "0 0 20 20",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    },
    /* @__PURE__ */ JSX.createElement(
      "path",
      {
        d: "M16.5 17.5H3.5C3.225 17.5 3 17.7813 3 18.125V19.375C3 19.7188 3.225 20 3.5 20H16.5C16.775 20 17 19.7188 17 19.375V18.125C17 17.7813 16.775 17.5 16.5 17.5ZM18.5 5C17.6719 5 17 5.83984 17 6.875C17 7.15234 17.05 7.41016 17.1375 7.64844L14.875 9.34375C14.3937 9.70313 13.7719 9.5 13.4937 8.89063L10.9469 3.32031C11.2812 2.97656 11.5 2.46094 11.5 1.875C11.5 0.839844 10.8281 0 10 0C9.17188 0 8.5 0.839844 8.5 1.875C8.5 2.46094 8.71875 2.97656 9.05313 3.32031L6.50625 8.89063C6.22812 9.5 5.60312 9.70313 5.125 9.34375L2.86562 7.64844C2.95 7.41406 3.00312 7.15234 3.00312 6.875C3.00312 5.83984 2.33125 5 1.50312 5C0.675 5 0 5.83984 0 6.875C0 7.91016 0.671875 8.75 1.5 8.75C1.58125 8.75 1.6625 8.73438 1.74063 8.71875L4 16.25H16L18.2594 8.71875C18.3375 8.73438 18.4188 8.75 18.5 8.75C19.3281 8.75 20 7.91016 20 6.875C20 5.83984 19.3281 5 18.5 5Z",
        fill: "#FFAA00"
      }
    )
  );
}, "Crown");
var MIN_RENDER_HEIGHT = 420;
var _LeaderboardBuilder = class _LeaderboardBuilder extends Builder {
  /**
   * Create a new leaderboard ui builder
   */
  constructor() {
    super(500, MIN_RENDER_HEIGHT);
    this.bootstrap({
      background: null,
      backgroundColor: "#7c563c",
      players: [],
      abbreviate: true,
      text: {
        level: "Level",
        rank: "Rank",
        xp: "XP"
      }
    });
    this.setStyle({
      borderRadius: "1.5rem"
    });
  }
  /**
   * Set background for this leaderboard ui
   * @param background background image
   */
  setBackground(background) {
    this.options.set("background", background);
    return this;
  }
  /**
   * Set background color for this leaderboard ui
   * @param color background color
   */
  setBackgroundColor(color) {
    this.options.set("backgroundColor", color);
    return this;
  }
  /**
   * Set header for this leaderboard ui
   * @param data header data
   */
  setHeader(data) {
    this.options.set("header", data);
    return this;
  }
  /**
   * Set players for this leaderboard ui. The canvas size will be adjusted automatically based on the number of players.
   * @param players players data
   */
  setPlayers(players) {
    const items = players.slice(0, 10);
    this.options.set("players", items);
    return this;
  }
  /**
   * Configures the text renderer for this leaderboard.
   * @param config The configuration for this leaderboard.
   */
  setTextStyles(config) {
    this.options.merge("text", config);
    return this;
  }
  /**
   * Render this leaderboard ui on the canvas
   */
  async render() {
    const options = this.options.getOptions();
    const total = options.players.length;
    if (!total) {
      throw new RangeError("Number of players must be greater than 0");
    }
    const minh = options.header ? MIN_RENDER_HEIGHT - 130 : MIN_RENDER_HEIGHT;
    const calculatedHeight = minh + (total - 3) * 90;
    const diff = total >= 7 ? total - 7 : 0;
    const incremented = 10 * diff;
    this.height = Math.max(calculatedHeight + incremented, minh);
    this.adjustCanvas();
    let background, headerImg;
    if (options.background) {
      background = await loadImage(options.background);
    }
    if (options.header) {
      headerImg = await loadImage(options.header.image);
    }
    const winners = [
      options.players[1],
      options.players[0],
      options.players[2]
    ].filter(Boolean);
    return /* @__PURE__ */ JSX.createElement("div", { className: "h-full w-full flex relative" }, background && /* @__PURE__ */ JSX.createElement(
      "img",
      {
        src: background.toDataURL(),
        className: "absolute top-0 left-0 h-full w-full"
      }
    ), /* @__PURE__ */ JSX.createElement("div", { className: "py-[30px] flex flex-col items-center w-full" }, options.header && headerImg ? /* @__PURE__ */ JSX.createElement("div", { className: "flex items-center justify-center flex-col w-full" }, /* @__PURE__ */ JSX.createElement(
      "img",
      {
        src: headerImg.toDataURL(),
        className: "rounded-full w-16 h-w-16"
      }
    ), /* @__PURE__ */ JSX.createElement("h1", { className: "text-white text-xl font-extrabold m-0 mt-2" }, options.header.title), /* @__PURE__ */ JSX.createElement("h2", { className: "text-white text-sm font-thin m-0" }, options.header.subtitle)) : null, /* @__PURE__ */ JSX.createElement(
      "div",
      {
        className: StyleSheet.cn(
          "flex flex-row w-[90%] justify-center items-center mt-16",
          winners.length ? "mt-24" : ""
        )
      },
      await Promise.all(winners.map((winner) => this.renderTop(winner)))
    ), this.renderPlayers(
      await Promise.all(
        options.players.filter((f) => !winners.includes(f)).map((m) => this.renderPlayer(m))
      )
    )));
  }
  /**
   * Render players ui on the canvas
   */
  renderPlayers(players) {
    return /* @__PURE__ */ JSX.createElement("div", { className: "mt-4 flex flex-col items-center justify-center w-[95%]" }, players);
  }
  /**
   * Render top players ui on the canvas
   */
  async renderTop({
    avatar,
    displayName,
    level,
    rank,
    username,
    xp
  }) {
    const image = await loadImage(avatar);
    const currentColor = DefaultColors[rank === 1 ? "Yellow" : rank === 2 ? "Blue" : "Green"];
    const crown = rank === 1;
    return /* @__PURE__ */ JSX.createElement(
      "div",
      {
        className: StyleSheet.cn(
          "relative flex flex-col items-center justify-center p-4 bg-[#1E2237CC] w-[35%] rounded-md",
          crown ? "-mt-4 bg-[#252A40CC] rounded-b-none h-[113%]" : "",
          rank === 2 ? "rounded-br-none" : rank === 3 ? "rounded-bl-none" : ""
        )
      },
      crown && /* @__PURE__ */ JSX.createElement("div", { className: "absolute flex -top-16" }, /* @__PURE__ */ JSX.createElement(Crown, null)),
      /* @__PURE__ */ JSX.createElement("div", { className: "flex items-center justify-center flex-col absolute -top-10" }, /* @__PURE__ */ JSX.createElement(
        "img",
        {
          src: image.toDataURL(),
          className: StyleSheet.cn(
            `border-[3px] border-[${currentColor}] rounded-full h-18 w-18`
          )
        }
      ), /* @__PURE__ */ JSX.createElement(
        "div",
        {
          className: `flex items-center justify-center text-xs p-2 text-center font-bold h-3 w-3 rounded-full text-white absolute bg-[${currentColor}] -bottom-[0.4rem]`
        },
        rank
      )),
      /* @__PURE__ */ JSX.createElement("div", { className: "flex flex-col items-center justify-center mt-5" }, /* @__PURE__ */ JSX.createElement("h1", { className: "text-white text-base font-extrabold m-0" }, displayName), /* @__PURE__ */ JSX.createElement("h2", { className: "text-white text-xs font-thin m-0 mb-2" }, "@", username), /* @__PURE__ */ JSX.createElement("h4", { className: `text-sm text-[${currentColor}] m-0` }, this.options.get("text").level, " ", level), /* @__PURE__ */ JSX.createElement("h4", { className: `text-sm text-[${currentColor}] m-0` }, fixed(xp, this.options.get("abbreviate")), " ", this.options.get("text").xp))
    );
  }
  /**
   * Render player ui on the canvas
   */
  async renderPlayer({
    avatar,
    displayName,
    level,
    rank,
    username,
    xp
  }) {
    const image = await loadImage(avatar);
    return /* @__PURE__ */ JSX.createElement("div", { className: "bg-[#252A40BB] p-4 rounded-md flex flex-row justify-between items-center w-full mb-2" }, /* @__PURE__ */ JSX.createElement("div", { className: "flex flex-row" }, /* @__PURE__ */ JSX.createElement("div", { className: "flex flex-col items-center justify-center mr-2" }, /* @__PURE__ */ JSX.createElement("h1", { className: "text-white font-extrabold text-xl m-0" }, rank), /* @__PURE__ */ JSX.createElement("h4", { className: "text-white font-medium text-sm m-0" }, this.options.get("text").rank)), /* @__PURE__ */ JSX.createElement(
      "img",
      {
        src: image.toDataURL(),
        className: "rounded-full h-14 w-14 mr-2"
      }
    ), /* @__PURE__ */ JSX.createElement("div", { className: "flex flex-col items-start justify-center" }, /* @__PURE__ */ JSX.createElement("h1", { className: "text-white font-extrabold text-xl m-0" }, displayName), /* @__PURE__ */ JSX.createElement("h4", { className: "text-white font-medium text-sm m-0" }, "@", username))), /* @__PURE__ */ JSX.createElement("div", { className: "flex flex-col items-start justify-center" }, /* @__PURE__ */ JSX.createElement("h4", { className: "text-white font-medium text-sm m-0" }, this.options.get("text").level, " ", level), /* @__PURE__ */ JSX.createElement("h4", { className: "text-white font-medium text-sm m-0" }, fixed(xp, this.options.get("abbreviate")), " ", this.options.get("text").xp)));
  }
};
__name(_LeaderboardBuilder, "LeaderboardBuilder");
var LeaderboardBuilder = _LeaderboardBuilder;

// src/components/RankCardBuilder.tsx
import { Transformer as Transformer3 } from "@napi-rs/image";

// src/components/rank-card/NeoClassicalCard.tsx
var Colors = {
  online: "#43b581",
  idle: "#faa61a",
  dnd: "#f04747",
  offline: "#747f8d",
  streaming: "#593695"
};
var clamp = /* @__PURE__ */ __name((value) => Math.max(0, Math.min(100, value)), "clamp");
function NeoClassicalCard(props) {
  const {
    rank,
    level,
    currentXP,
    requiredXP,
    abbreviate,
    username,
    handle,
    avatar,
    status,
    styles,
    texts,
    backgroundColor,
    overlay,
    calculateProgress
  } = props;
  const shouldSkipStats = currentXP == null && requiredXP == null;
  const progress = calculateProgress(currentXP ?? 0, requiredXP ?? 0);
  const progressWidth = typeof progress !== "number" || isNaN(progress) ? 0 : clamp(progress);
  return /* @__PURE__ */ JSX.createElement(
    "div",
    {
      className: StyleSheet.cn(
        backgroundColor && !backgroundColor.startsWith("url(") ? `bg-[${backgroundColor}]` : "bg-[#23272a]",
        "flex flex-col h-full rounded-md w-full p-6",
        StyleSheet.tw(styles.background)
      ),
      style: StyleSheet.compose(
        {
          backgroundImage: backgroundColor && backgroundColor.startsWith("url(") ? backgroundColor : void 0,
          backgroundSize: backgroundColor && backgroundColor.startsWith("url(") ? "100% 100%" : void 0
        },
        StyleSheet.css(styles.background)
      )
    },
    /* @__PURE__ */ JSX.createElement(
      "div",
      {
        className: StyleSheet.cn(
          overlay ? `bg-[${typeof overlay === "string" ? overlay : "#2b2f35"}]/${typeof overlay === "number" ? overlay : "90"}` : null,
          "flex items-center rounded-lg h-full w-full px-4",
          StyleSheet.tw(styles.overlay)
        ),
        style: StyleSheet.css(styles.overlay)
      },
      /* @__PURE__ */ JSX.createElement(
        "div",
        {
          className: StyleSheet.cn(
            "flex relative",
            StyleSheet.tw(styles.avatar?.container)
          ),
          style: StyleSheet.css(styles.avatar?.container)
        },
        /* @__PURE__ */ JSX.createElement(
          "img",
          {
            src: avatar,
            className: StyleSheet.cn(
              "h-38 w-38 rounded-full ml-4",
              StyleSheet.tw(styles.avatar?.image)
            ),
            style: StyleSheet.css(styles.avatar?.image)
          }
        ),
        status && status !== "none" /* None */ ? /* @__PURE__ */ JSX.createElement(
          "div",
          {
            className: StyleSheet.cn(
              "absolute h-8 w-8 rounded-full bottom-5 right-0 flex",
              `bg-[${Colors[status]}]`,
              StyleSheet.tw(styles.avatar?.status)
            ),
            style: StyleSheet.css(styles.avatar?.status)
          }
        ) : null
      ),
      /* @__PURE__ */ JSX.createElement(
        "div",
        {
          className: StyleSheet.cn(
            "flex flex-col ml-8",
            StyleSheet.tw(styles.container)
          ),
          style: StyleSheet.css(styles.container)
        },
        /* @__PURE__ */ JSX.createElement(
          "div",
          {
            className: StyleSheet.cn(
              "flex flex-col",
              StyleSheet.tw(styles.username?.container)
            ),
            style: StyleSheet.css(styles.username?.container)
          },
          username && /* @__PURE__ */ JSX.createElement(
            "h1",
            {
              className: StyleSheet.cn(
                "text-white font-semibold text-3xl mb-0",
                StyleSheet.tw(styles.username?.name),
                !handle ? "mb-2" : ""
              ),
              style: StyleSheet.css(styles.username?.name)
            },
            username
          ),
          handle && /* @__PURE__ */ JSX.createElement(
            "p",
            {
              className: StyleSheet.cn(
                "text-[#808386] font-semibold text-lg mt-0",
                StyleSheet.tw(styles.username?.handle)
              ),
              style: StyleSheet.css(styles.username?.handle)
            },
            handle
          )
        ),
        /* @__PURE__ */ JSX.createElement(
          "div",
          {
            className: StyleSheet.cn(
              "flex relative",
              StyleSheet.tw(styles.progressbar?.container)
            ),
            style: StyleSheet.css(styles.progressbar?.container)
          },
          /* @__PURE__ */ JSX.createElement(
            "div",
            {
              className: StyleSheet.cn(
                "bg-[#484b4e] w-160 h-6 rounded-xl flex",
                StyleSheet.tw(styles.progressbar?.track)
              ),
              style: StyleSheet.css(styles.progressbar?.track)
            }
          ),
          /* @__PURE__ */ JSX.createElement(
            "div",
            {
              className: StyleSheet.cn(
                "bg-[#fff] max-w-160 h-6 rounded-xl absolute flex",
                `w-[${progressWidth}%]`,
                StyleSheet.tw(styles.progressbar?.thumb)
              ),
              style: StyleSheet.css(styles.progressbar?.thumb)
            }
          )
        ),
        /* @__PURE__ */ JSX.createElement(
          "div",
          {
            className: StyleSheet.cn(
              "flex",
              StyleSheet.tw(styles.statistics?.container)
            ),
            style: StyleSheet.css(styles.statistics?.container)
          },
          level != null && /* @__PURE__ */ JSX.createElement(
            "div",
            {
              className: StyleSheet.cn(
                "flex items-center text-[#808386] font-medium",
                StyleSheet.tw(styles.statistics?.level?.container)
              ),
              style: StyleSheet.css(styles.statistics?.level?.container)
            },
            /* @__PURE__ */ JSX.createElement(
              "h3",
              {
                className: StyleSheet.tw(styles.statistics?.level?.text),
                style: StyleSheet.css(styles.statistics?.level?.text)
              },
              texts.level || "LEVEL:",
              /* @__PURE__ */ JSX.createElement(
                "span",
                {
                  className: StyleSheet.cn(
                    "text-white ml-1",
                    StyleSheet.tw(styles.statistics?.level?.value)
                  ),
                  style: StyleSheet.css(styles.statistics?.level?.value)
                },
                fixed(level, abbreviate)
              )
            )
          ),
          !shouldSkipStats && /* @__PURE__ */ JSX.createElement(
            "div",
            {
              className: StyleSheet.cn(
                "flex items-center text-[#808386] font-medium ml-8",
                StyleSheet.tw(styles.statistics?.xp?.container)
              ),
              style: StyleSheet.css(styles.statistics?.xp?.container)
            },
            /* @__PURE__ */ JSX.createElement(
              "h3",
              {
                className: StyleSheet.tw(styles.statistics?.xp?.text),
                style: StyleSheet.css(styles.statistics?.xp?.text)
              },
              texts.xp || "XP:",
              /* @__PURE__ */ JSX.createElement(
                "span",
                {
                  className: StyleSheet.cn(
                    "text-white ml-1",
                    StyleSheet.tw(styles.statistics?.xp?.value)
                  ),
                  style: StyleSheet.css(styles.statistics?.xp?.value)
                },
                fixed(currentXP ?? 0, abbreviate),
                "/",
                fixed(requiredXP ?? 0, abbreviate)
              )
            )
          ),
          rank != null && /* @__PURE__ */ JSX.createElement(
            "div",
            {
              className: StyleSheet.cn(
                "flex items-center text-[#808386] font-medium ml-8",
                StyleSheet.tw(styles.statistics?.rank?.container)
              ),
              style: StyleSheet.css(styles.statistics?.rank?.container)
            },
            /* @__PURE__ */ JSX.createElement(
              "h3",
              {
                className: StyleSheet.tw(styles.statistics?.rank?.text),
                style: StyleSheet.css(styles.statistics?.rank?.text)
              },
              texts.rank || "RANK:",
              /* @__PURE__ */ JSX.createElement(
                "span",
                {
                  className: StyleSheet.cn(
                    "text-white ml-1",
                    StyleSheet.tw(styles.statistics?.rank?.value)
                  ),
                  style: StyleSheet.css(styles.statistics?.rank?.value)
                },
                "#",
                fixed(rank, abbreviate)
              )
            )
          )
        )
      )
    )
  );
}
__name(NeoClassicalCard, "NeoClassicalCard");

// src/components/RankCardBuilder.tsx
var _RankCardBuilder = class _RankCardBuilder extends Builder {
  /**
   * Creates a new rank card builder.
   * @example
   * const card = new RankCardBuilder()
   *     .setUsername('kiki')
   *     .setDisplayName('Kiki')
   *     .setDiscriminator('1234')
   *     .setAvatar('...')
   *     .setCurrentXP(300)
   *     .setRequiredXP(600)
   *     .setLevel(2)
   *     .setRank(5)
   *     .setStatus('online');
   *
   * const pngBuffer = await card.build({
   *   format: 'png'
   * });
   */
  constructor() {
    super(930, 280);
    this.bootstrap({
      avatar: "",
      abbreviate: true,
      background: "#2C2F33",
      currentXP: 0,
      handle: null,
      level: null,
      overlay: 90,
      rank: null,
      requiredXP: 0,
      status: "none" /* None */,
      styles: {},
      texts: {},
      username: null,
      fonts: {},
      calculateProgress: (currentXP, requiredXP) => (currentXP ?? 0) / (requiredXP ?? 0) * 100
    });
  }
  /**
   * Sets the fonts to be used for this rank card.
   * @param fontConfig The fonts to be used for this rank card.
   */
  setFonts(fontConfig) {
    this.options.set("fonts", fontConfig);
    return this;
  }
  /**
   * Sets the avatar for this rank card.
   * @param image The avatar for this rank card.
   */
  setAvatar(image) {
    this.options.set("avatar", image);
    return this;
  }
  /**
   * Sets the background for this rank card.
   * @param image The background for this rank card.
   */
  setBackground(image) {
    this.options.set("background", image);
    return this;
  }
  /**
   * Sets the status for this rank card.
   * @param status The status for this rank card.
   */
  setStatus(status) {
    this.options.set("status", status);
    return this;
  }
  /**
   * Sets the username for this rank card.
   * @param name The username for this rank card.
   */
  setDisplayName(name) {
    this.options.set("username", name);
    return this;
  }
  /**
   * Sets the handle name for this rank card.
   * @param name The handle name for this rank card.
   */
  setUsername(name) {
    this.options.set("handle", name);
    return this;
  }
  /**
   * Set overlay for this rank card.
   */
  setOverlay(overlay) {
    this.options.set("overlay", overlay);
    return this;
  }
  /**
   * Sets the current xp for this rank card.
   * @param xp The current xp for this rank card.
   */
  setCurrentXP(xp) {
    this.options.set("currentXP", xp);
    return this;
  }
  /**
   * Sets the required xp for this rank card.
   * @param xp The required xp for this rank card.
   */
  setRequiredXP(xp) {
    this.options.set("requiredXP", xp);
    return this;
  }
  /**
   * Sets the level of this rank card.
   * @param level The level of this rank card.
   */
  setLevel(level) {
    this.options.set("level", level);
    return this;
  }
  /**
   * Sets the rank of this rank card.
   * @param rank The rank of this rank card.
   */
  setRank(rank) {
    this.options.set("rank", rank);
    return this;
  }
  /**
   * Configures the renderer for this rank card.
   * @param config The configuration for this rank card.
   */
  setStyles(config) {
    this.options.merge("styles", config);
    return this;
  }
  /**
   * Set background crop for this rank card.
   */
  setBackgroundCrop(pos) {
    this.options.set("backgroundCrop", pos);
    return this;
  }
  /**
   * Configures the texts for this rank card.
   * @param config The configuration for this rank card.
   */
  setTextStyles(config) {
    this.options.merge("texts", config);
    return this;
  }
  /**
   * Sets the progress calculator for this rank card. The value returned by this calculator defines the width of the progress bar.
   * Valid range is 0-100. Returning a number less than 0 or greater than 100 will be clamped within this range, or invalid values will result in 0% width.
   * @param calc The progress calculator for this rank card.
   */
  setProgressCalculator(calc) {
    this.options.set("calculateProgress", calc);
    return this;
  }
  /**
   * Renders this rank card into the canvas.
   */
  async render() {
    const options = this.options.getOptions();
    if (!options.avatar)
      throw new Error("Avatar is required.");
    if (!FontFactory.size)
      throw new Error("No fonts are loaded.");
    const avatar = await loadImage(options.avatar);
    let background;
    if (options.background) {
      background = await loadImage(options.background).then(
        async (e) => {
          if (options.backgroundCrop) {
            const x = options.backgroundCrop.x ?? 0;
            const y = options.backgroundCrop.y ?? 0;
            const width = options.backgroundCrop.width ?? this.width;
            const height = options.backgroundCrop.height ?? this.height;
            const buffer3 = await new Transformer3(e.data).crop(x, y, width, height).png();
            e.data = buffer3;
          }
          return `url(${e.toDataURL()})`;
        },
        () => options.background
      );
    }
    const firstFont = getDefaultFont();
    if (firstFont) {
      options.fonts.username ??= {
        name: firstFont.name,
        handle: firstFont.name
      };
      options.fonts.progress ??= {
        level: {
          text: firstFont.name,
          value: firstFont.name
        },
        xp: {
          text: firstFont.name,
          value: firstFont.name
        },
        rank: {
          text: firstFont.name,
          value: firstFont.name
        }
      };
    }
    return /* @__PURE__ */ JSX.createElement(
      NeoClassicalCard,
      {
        ...{
          ...options,
          avatar: avatar.toDataURL(),
          backgroundColor: background
        }
      }
    );
  }
};
__name(_RankCardBuilder, "RankCardBuilder");
var RankCardBuilder = _RankCardBuilder;

// src/canvas/CanvasHelper.ts
import { createCanvas as createCanvas2 } from "@napi-rs/canvas";
var _CanvasHelper = class _CanvasHelper extends Encodable {
  /**
   * Creates a new CanvasHelper instance.
   * @param width The width of the canvas
   * @param height The height of the canvas
   */
  constructor(width, height) {
    super();
    this.width = width;
    this.height = height;
    /**
     * The steps to apply to the canvas.
     */
    this.steps = [];
  }
  /**
   * Returns the canvas instance by applying the steps.
   */
  async getFinalCanvas() {
    this._canvas ??= createCanvas2(this.width, this.height);
    const ctx = this._canvas.getContext("2d");
    await this.process(this._canvas, ctx);
    return this._canvas;
  }
};
__name(_CanvasHelper, "CanvasHelper");
var CanvasHelper = _CanvasHelper;

// src/canvas/CanvasImage.ts
import { Image as Image2 } from "@napi-rs/canvas";

// src/canvas/ImageFilterer.ts
var _filters;
var _ImageFilterer = class _ImageFilterer extends CanvasHelper {
  constructor() {
    super(...arguments);
    __privateAdd(this, _filters, []);
  }
  /**
   * Draws the image to the canvas.
   * @param image The image to draw
   * @param x The x position to draw the image
   * @param y The y position to draw the image
   * @param [width] The width of the image
   * @param [height] The height of the image
   */
  drawImage(image, x = 0, y = 0, width = this.width, height = this.height) {
    this.steps.push(async (ctx) => {
      const img = await createCanvasImage(image);
      ctx.drawImage(img, x, y, width, height);
    });
    return this;
  }
  /**
   * Applies invert filter to the image.
   * @param value The filter intensity
   */
  invert(value) {
    if (typeof value !== "number")
      throw new TypeError(`Expected "value" to be a number, received ${typeof value}`);
    __privateGet(this, _filters).push(`invert(${value}%)`);
    return this;
  }
  /**
   * Applies grayscale filter to the image.
   * @param value The filter intensity
   */
  grayscale(value = 100) {
    __privateGet(this, _filters).push(`grayscale(${value}%)`);
    return this;
  }
  /**
   * Applies sepia filter to the image.
   * @param value The filter intensity
   */
  sepia(value) {
    if (typeof value !== "number")
      throw new TypeError(`Expected "value" to be a number, received ${typeof value}`);
    __privateGet(this, _filters).push(`sepia(${value}%)`);
    return this;
  }
  /**
   * Applies opacity filter to the image.
   * @param value The filter intensity
   */
  opacity(value) {
    if (typeof value !== "number")
      throw new TypeError(`Expected "value" to be a number, received ${typeof value}`);
    __privateGet(this, _filters).push(`opacity(${value}%)`);
    return this;
  }
  /**
   * Applies saturate filter to the image.
   * @param value The filter intensity
   */
  saturate(value) {
    if (typeof value !== "number")
      throw new TypeError(`Expected "value" to be a number, received ${typeof value}`);
    __privateGet(this, _filters).push(`saturate(${value}%)`);
    return this;
  }
  /**
   * Applies hue-rotate filter to the image.
   * @param value The degrees to rotate
   */
  hueRotate(value) {
    if (typeof value !== "number")
      throw new TypeError(`Expected "value" to be a number, received ${typeof value}`);
    __privateGet(this, _filters).push(`hue-rotate(${value}deg)`);
    return this;
  }
  /**
   * Applies contrast filter to the image.
   * @param value The filter intensity
   */
  contrast(value) {
    if (typeof value !== "number")
      throw new TypeError(`Expected "value" to be a number, received ${typeof value}`);
    __privateGet(this, _filters).push(`contrast(${value}%)`);
    return this;
  }
  /**
   * Applies brightness filter to the image.
   * @param value The filter intensity
   */
  brightness(value) {
    if (typeof value !== "number")
      throw new TypeError(`Expected "value" to be a number, received ${typeof value}`);
    __privateGet(this, _filters).push(`brightness(${value}%)`);
    return this;
  }
  /**
   * Applies blur filter to the image.
   * @param value The filter intensity
   */
  blur(value) {
    if (typeof value !== "number")
      throw new TypeError(`Expected "value" to be a number, received ${typeof value}`);
    __privateGet(this, _filters).push(`blur(${value}px)`);
    return this;
  }
  /**
   * Applies drop-shadow filter to the image.
   * @param config The drop-shadow config
   * @param config.x The x offset of the shadow
   * @param config.y The y offset of the shadow
   * @param config.radius The blur radius of the shadow
   * @param config.color The color of the shadow
   */
  dropShadow(config) {
    const { x, y, radius, color } = config;
    __privateGet(this, _filters).push(`drop-shadow(${[x, y, `${radius}px`, color].join(" ")})`);
    return this;
  }
  /**
   * Renders the applied filters to the canvas.
   * @param canvas The canvas to render the filters to
   * @param ctx The canvas context
   */
  async process(canvas, ctx) {
    if (__privateGet(this, _filters).length)
      ctx.filter = __privateGet(this, _filters).join(" ");
    while (this.steps.length > 0) {
      await this.steps.shift()(ctx);
    }
  }
};
_filters = new WeakMap();
__name(_ImageFilterer, "ImageFilterer");
var ImageFilterer = _ImageFilterer;

// src/canvas/CanvasImage.ts
var _img, _setImg, setImg_fn;
var _CanvasImage = class _CanvasImage extends ImageFilterer {
  /**
   * Creates a new CanvasImage instance.
   * @param source The image source
   * @param [width] The width of the image
   * @param [height] The height of the image
   */
  constructor(source, width = -1, height = -1) {
    super(width, height);
    this.source = source;
    __privateAdd(this, _setImg);
    __privateAdd(this, _img, null);
    if (source instanceof Image2)
      __privateMethod(this, _setImg, setImg_fn).call(this, source);
  }
  /**
   * Draws the image to the canvas.
   * @param x The x position to draw the image
   * @param y The y position to draw the image
   * @param [width] The width of the image
   * @param [height] The height of the image
   */
  draw(x = 0, y = 0, width, height) {
    this.steps.push(async (ctx) => {
      const img = __privateGet(this, _img) || __privateMethod(this, _setImg, setImg_fn).call(this, await createCanvasImage(this.source));
      width ??= this.width;
      height ??= this.height;
      ctx.drawImage(img, x, y, width, height);
    });
    return this;
  }
  /**
   * Draws the image to the canvas with a circle clip.
   * @param [width] The width of the image
   * @param [height] The height of the image
   */
  circle(width, height) {
    this.steps.push((ctx) => {
      width ??= ctx.canvas.width;
      height ??= ctx.canvas.height;
      ctx.globalCompositeOperation = "destination-in";
      ctx.beginPath();
      ctx.arc(width / 2, height / 2, width / 2, 0, Math.PI * 2);
      ctx.closePath();
      ctx.fill();
    });
    return this;
  }
  /**
   * Draws pixelated image to the canvas.
   * @param [pixels=5] The amount of pixels to use
   */
  pixelate(pixels = 5) {
    this.steps.push((ctx) => {
      const pixel = pixels / 100;
      const { canvas } = ctx;
      ctx.imageSmoothingEnabled = false;
      ctx.drawImage(
        canvas,
        0,
        0,
        canvas.width * pixel,
        canvas.height * pixel,
        0,
        0,
        canvas.width + 5,
        canvas.height + 5
      );
    });
    return this;
  }
  /**
   * Saves the canvas context state.
   */
  save() {
    this.steps.push((ctx) => {
      ctx.save();
    });
    return this;
  }
  /**
   * Restores the last saved canvas context state.
   */
  restore() {
    this.steps.push((ctx) => {
      ctx.restore();
    });
    return this;
  }
  /**
   * Returns the canvas instance by applying the steps.
   */
  async getFinalCanvas() {
    if (this.width === -1 || this.height === -1) {
      if (!__privateGet(this, _img))
        __privateMethod(this, _setImg, setImg_fn).call(this, await createCanvasImage(this.source));
    }
    return super.getFinalCanvas();
  }
};
_img = new WeakMap();
_setImg = new WeakSet();
setImg_fn = /* @__PURE__ */ __name(function(src) {
  __privateSet(this, _img, src);
  if (this.width === -1)
    this.width = src.width;
  if (this.height === -1)
    this.height = src.height;
  return __privateGet(this, _img);
}, "#setImg");
__name(_CanvasImage, "CanvasImage");
var CanvasImage = _CanvasImage;

// src/canvas/ImageManipulator.ts
var _steps;
var _ImageManipulator = class _ImageManipulator extends CanvasImage {
  constructor() {
    super(...arguments);
    __privateAdd(this, _steps, []);
  }
  /**
   * Rotates the canvas.
   */
  rotate(degrees) {
    __privateGet(this, _steps).push((ctx) => {
      ctx.rotate(degrees);
    });
    return this;
  }
  /**
   * Flips the canvas.
   * @param axis The axis to flip, `x` or `y`.
   */
  flip(axis) {
    __privateGet(this, _steps).push((ctx) => {
      switch (axis) {
        case "x":
          ctx.scale(-1, 1);
          break;
        case "y":
          ctx.scale(1, -1);
          break;
      }
    });
  }
  /**
   * Scales the canvas.
   * @param x The x scale
   * @param y The y scale
   */
  scale(x, y) {
    __privateGet(this, _steps).push((ctx) => {
      ctx.scale(x, y);
    });
  }
  /**
   * Translates the canvas.
   * @param x The x position to translate
   * @param y The y position to translate
   */
  translate(x, y) {
    __privateGet(this, _steps).push((ctx) => {
      ctx.translate(x, y);
    });
  }
  /**
   * Erases a part of the canvas.
   * @param x The x position to erase
   * @param y The y position to erase
   * @param width The width of the area to erase
   * @param height The height of the area to erase
   */
  erase(x, y, width, height) {
    __privateGet(this, _steps).push((ctx) => {
      ctx.clearRect(x, y, width, height);
    });
  }
  /**
   * Applies a transform to the canvas.
   */
  transform(a, b, c, d, e, f) {
    __privateGet(this, _steps).push((ctx) => {
      ctx.transform(a, b, c, d, e, f);
    });
  }
  /**
   * Resets the transform of the canvas.
   */
  resetTransform() {
    __privateGet(this, _steps).push((ctx) => {
      ctx.resetTransform();
    });
  }
  /**
   * Applies a circular clip to the image.
   * @param width The width of the image
   * @param height The height of the image
   */
  circularize(width, height) {
  }
  /**
   * Processes the steps and applies them to the canvas.
   * @param canvas The canvas to apply the steps to
   * @param ctx The canvas context to apply the steps to
   */
  async process(canvas, ctx) {
    for (const step of __privateGet(this, _steps)) {
      await step(ctx);
    }
  }
};
_steps = new WeakMap();
__name(_ImageManipulator, "ImageManipulator");
var ImageManipulator = _ImageManipulator;

// src/canvas/Canvacord.ts
import { buffer as buffer2 } from "stream/consumers";
var factory = {
  filters(width, height) {
    return new ImageFilterer(width, height);
  },
  async triggered(image, asBuffer) {
    const generator = new ImageGen(TemplateFactory.Triggered(image));
    const img = await generator.generateGif();
    if (!asBuffer)
      return img;
    return buffer2(img);
  }
};
var capitalize = /* @__PURE__ */ __name((str) => str[0].toUpperCase() + str.slice(1), "capitalize");
for (const key in TemplateFactory) {
  const method = key.toLowerCase();
  if (method === "triggered")
    continue;
  factory[method] = async function(...args) {
    const template = TemplateFactory[capitalize(method)](...args);
    const generator = new ImageGen(template);
    await generator.render();
    return generator.encode();
  };
}
function CanvacordConstructor(source, options) {
  options ??= {};
  const img = new CanvasImage(source, options?.width ?? -1, options?.height ?? -1);
  img.draw();
  return img;
}
__name(CanvacordConstructor, "CanvacordConstructor");
Object.assign(CanvacordConstructor, factory);
var canvacord = CanvacordConstructor;
export {
  Builder,
  BuilderOptionsManager,
  BuiltInGraphemeProvider,
  CanvasHelper,
  CanvasImage,
  Element,
  EmojiCache,
  Encodable,
  Font,
  FontFactory,
  Fonts,
  ImageFactory,
  ImageFilterer,
  ImageGen,
  ImageGenerationTemplate,
  ImageManipulator,
  JSX,
  LeaderboardBuilder,
  RankCardBuilder,
  StyleSheet,
  TemplateFactory,
  TemplateImage,
  canvacord,
  createCanvasImage,
  createEmojiProvider,
  createImageGenerator,
  createTemplate,
  loadImage,
  performObjectCleanup,
  render
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL2Fzc2V0cy9Gb250LnRzIiwgIi4uL3NyYy9hc3NldHMvQXNzZXRzRmFjdG9yeS50cyIsICIuLi9zcmMvYXNzZXRzL2ZvbnRzL2ZvbnRzLnRzIiwgIi4uL3NyYy9oZWxwZXJzL1N0eWxlU2hlZXQudHMiLCAiLi4vc3JjL2hlbHBlcnMvanN4LnRzIiwgIi4uL3NyYy9oZWxwZXJzL2xvYWRJbWFnZS50cyIsICIuLi9zcmMvaGVscGVycy9pbWFnZS50cyIsICIuLi9zcmMvY2FudmFzL3V0aWxzLnRzIiwgIi4uL3NyYy9jYW52YXMvSW1hZ2VHZW4udHMiLCAiLi4vc3JjL2NhbnZhcy9FbmNvZGFibGUudHMiLCAiLi4vc3JjL2Fzc2V0cy9UZW1wbGF0ZUZhY3RvcnkudHMiLCAiLi4vc3JjL2hlbHBlcnMvdXRpbHMudHMiLCAiLi4vc3JjL3RlbXBsYXRlcy9CdWlsZGVyLnRzeCIsICIuLi9zcmMvdGVtcGxhdGVzL0J1aWxkZXJPcHRpb25zTWFuYWdlci50cyIsICIuLi9zcmMvY29tcG9uZW50cy9MZWFkZXJib2FyZEJ1aWxkZXIudHN4IiwgIi4uL3NyYy9jb21wb25lbnRzL1JhbmtDYXJkQnVpbGRlci50c3giLCAiLi4vc3JjL2NvbXBvbmVudHMvcmFuay1jYXJkL05lb0NsYXNzaWNhbENhcmQudHN4IiwgIi4uL3NyYy9jYW52YXMvQ2FudmFzSGVscGVyLnRzIiwgIi4uL3NyYy9jYW52YXMvQ2FudmFzSW1hZ2UudHMiLCAiLi4vc3JjL2NhbnZhcy9JbWFnZUZpbHRlcmVyLnRzIiwgIi4uL3NyYy9jYW52YXMvSW1hZ2VNYW5pcHVsYXRvci50cyIsICIuLi9zcmMvY2FudmFzL0NhbnZhY29yZC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgcmFuZG9tVVVJRCB9IGZyb20gXCJjcnlwdG9cIjtcbmltcG9ydCB7IHJlYWRGaWxlU3luYyB9IGZyb20gXCJmc1wiO1xuaW1wb3J0IHsgcmVhZEZpbGUgfSBmcm9tIFwiZnMvcHJvbWlzZXNcIjtcbmltcG9ydCB7IEZvbnQgYXMgRm9udERhdGEgfSBmcm9tIFwic2F0b3JpXCI7XG5pbXBvcnQgeyBGb250RmFjdG9yeSB9IGZyb20gXCIuL0Fzc2V0c0ZhY3RvcnlcIjtcbmltcG9ydCB7IEdsb2JhbEZvbnRzIH0gZnJvbSBcIkBuYXBpLXJzL2NhbnZhc1wiO1xuaW1wb3J0IHsgRm9udHMgfSBmcm9tIFwiLi9mb250cy9mb250c1wiO1xuXG5jb25zdCByYW5kb21BbGlhcyA9ICgpID0+IHJhbmRvbVVVSUQoKSBhcyBzdHJpbmc7XG5cbmV4cG9ydCBjbGFzcyBGb250IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYW5kIHJlZ2lzdGVycyBhIG5ldyBGb250IGluc3RhbmNlIGZvciBib3RoIGNhbnZhcyBhbmQgYnVpbGRlciBhcGlzLlxuICAgKiBAcGFyYW0gZGF0YSBUaGUgZm9udCBkYXRhXG4gICAqIEBwYXJhbSBbYWxpYXNdIFRoZSBmb250IGFsaWFzLiBJZiBub3QgcHJvdmlkZWQsIGEgcmFuZG9tIFVVSUQgd2lsbCBiZSB1c2VkLlxuICAgKlxuICAgKiBjb25zdCBkYXRhID0gYXdhaXQgcmVhZEZpbGUoJ3BhdGgvdG8vZm9udC50dGYnKTtcbiAgICogY29uc3QgZm9udCA9IG5ldyBGb250KGRhdGEsICdteS1mb250Jyk7XG4gICBcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgZGF0YTogQnVmZmVyLCBwdWJsaWMgYWxpYXMgPSByYW5kb21BbGlhcygpKSB7XG4gICAgR2xvYmFsRm9udHMucmVnaXN0ZXIoZGF0YSwgYWxpYXMpO1xuICAgIEZvbnRGYWN0b3J5LnNldCh0aGlzLmFsaWFzLCB0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYWxpYXMgZm9yIHRoaXMgZm9udC5cbiAgICovXG4gIHB1YmxpYyBnZXQgbmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5hbGlhcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBmb250IGRhdGEgdGhhdCBpbmNsdWRlcyBpbmZvcm1hdGlvbiBzdWNoIGFzIHRoZSBmb250IG5hbWUsIHdlaWdodCwgZGF0YSwgYW5kIHN0eWxlLlxuICAgKi9cbiAgcHVibGljIGdldERhdGEoKTogRm9udERhdGEge1xuICAgIHJldHVybiB7XG4gICAgICBkYXRhOiB0aGlzLmRhdGEsXG4gICAgICBuYW1lOiB0aGlzLmFsaWFzLFxuICAgICAgd2VpZ2h0OiA0MDAsXG4gICAgICBzdHlsZTogXCJub3JtYWxcIixcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGZvbnQuXG4gICAqL1xuICBwdWJsaWMgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWxpYXM7XG4gIH1cblxuICAvKipcbiAgICogSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGZvbnQuXG4gICAqL1xuICBwdWJsaWMgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLmdldERhdGEoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IEZvbnQgaW5zdGFuY2UgZnJvbSBhIGZpbGUuXG4gICAqIEBwYXJhbSBwYXRoIFRoZSBwYXRoIHRvIHRoZSBmb250IGZpbGVcbiAgICogQHBhcmFtIFthbGlhc10gVGhlIGZvbnQgYWxpYXMuIElmIG5vdCBwcm92aWRlZCwgYSByYW5kb20gVVVJRCB3aWxsIGJlIHVzZWQuXG4gICAqXG4gICAqIGNvbnN0IGZvbnQgPSBhd2FpdCBGb250LmZyb21GaWxlKCdwYXRoL3RvL2ZvbnQudHRmJywgJ215LWZvbnQnKTtcbiAgIFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBhc3luYyBmcm9tRmlsZShwYXRoOiBzdHJpbmcsIGFsaWFzPzogc3RyaW5nKSB7XG4gICAgY29uc3QgYnVmZmVyID0gYXdhaXQgcmVhZEZpbGUocGF0aCk7XG4gICAgcmV0dXJuIG5ldyBGb250KGJ1ZmZlciwgYWxpYXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgRm9udCBpbnN0YW5jZSBmcm9tIGEgZmlsZSBzeW5jaHJvbm91c2x5LlxuICAgKiBAcGFyYW0gcGF0aCBUaGUgcGF0aCB0byB0aGUgZm9udCBmaWxlXG4gICAqIEBwYXJhbSBbYWxpYXNdIFRoZSBmb250IGFsaWFzLiBJZiBub3QgcHJvdmlkZWQsIGEgcmFuZG9tIFVVSUQgd2lsbCBiZSB1c2VkLlxuICAgKlxuICAgKiBjb25zdCBmb250ID0gRm9udC5mcm9tRmlsZVN5bmMoJ3BhdGgvdG8vZm9udC50dGYnLCAnbXktZm9udCcpO1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tRmlsZVN5bmMocGF0aDogc3RyaW5nLCBhbGlhcz86IHN0cmluZykge1xuICAgIGNvbnN0IGJ1ZmZlciA9IHJlYWRGaWxlU3luYyhwYXRoKTtcbiAgICByZXR1cm4gbmV3IEZvbnQoYnVmZmVyLCBhbGlhcyk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBGb250IGluc3RhbmNlIGZyb20gYSBidWZmZXIuXG4gICAqIEBwYXJhbSBidWZmZXIgVGhlIGJ1ZmZlciBjb250YWluaW5nIHRoZSBmb250IGRhdGFcbiAgICogQHBhcmFtIFthbGlhc10gVGhlIGZvbnQgYWxpYXMuIElmIG5vdCBwcm92aWRlZCwgYSByYW5kb20gVVVJRCB3aWxsIGJlIHVzZWQuXG4gICAqXG4gICAqIGNvbnN0IGJ1ZmZlciA9IGF3YWl0IHJlYWRGaWxlKCdwYXRoL3RvL2ZvbnQudHRmJyk7XG4gICAqIGNvbnN0IGZvbnQgPSBGb250LmZyb21CdWZmZXIoYnVmZmVyLCAnbXktZm9udCcpO1xuICAgXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZyb21CdWZmZXIoYnVmZmVyOiBCdWZmZXIsIGFsaWFzPzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBGb250KGJ1ZmZlciwgYWxpYXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIExvYWRzIHRoZSBkZWZhdWx0IGZvbnQgYnVuZGxlZCB3aXRoIHRoaXMgcGFja2FnZS5cbiAgICpcbiAgICogY29uc3QgZm9udCA9IEZvbnQubG9hZERlZmF1bHQoKTtcbiAgIFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBsb2FkRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gdGhpcy5mcm9tQnVmZmVyKEZvbnRzLkdlaXN0LCBcImdlaXN0XCIpO1xuICB9XG59XG4iLCAiaW1wb3J0IHR5cGUgeyBGb250IH0gZnJvbSBcIi4vRm9udFwiO1xuXG5leHBvcnQgY29uc3QgRm9udEZhY3RvcnkgPSBuZXcgTWFwPHN0cmluZywgRm9udD4oKTtcblxuY29uc3QgQkFTRV9VUkwgPVxuICBwcm9jZXNzLmVudi5DQU5WQUNPUkRfQVNTRVRTX0JBU0VfVVJMIHx8XG4gIFwiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL25lcGxleHRlY2gvY2FudmFjb3JkLWFzc2V0cy9tYWluL3B1YmxpYy9jYW52YWNvcmRcIjtcbmNvbnN0IHByZXBhcmVVUkwgPSAocGF0aDogc3RyaW5nKSA9PiBgJHtCQVNFX1VSTH0vJHtwYXRofWA7XG5cbi8qKlxuICogVGhlIGltYWdlIGFzc2V0cyBmYWN0b3J5LlxuICovXG5leHBvcnQgY29uc3QgSW1hZ2VGYWN0b3J5ID0ge1xuICBBRkZFQ1Q6IHByZXBhcmVVUkwoXCJBRkZFQ1QucG5nXCIpLFxuICBCQVRTTEFQOiBwcmVwYXJlVVJMKFwiQkFUU0xBUC5wbmdcIiksXG4gIEJFQVVUSUZVTDogcHJlcGFyZVVSTChcIkJFQVVUSUZVTC5wbmdcIiksXG4gIEJFRDogcHJlcGFyZVVSTChcIkJFRC5wbmdcIiksXG4gIEJPVEJBREdFOiBwcmVwYXJlVVJMKFwiQk9UQkFER0UucG5nXCIpLFxuICBDQVBUQ0hBOiBwcmVwYXJlVVJMKFwiQ0FQVENIQS5wbmdcIiksXG4gIENIQU5HRU1ZTUlORDogcHJlcGFyZVVSTChcIkNIQU5HRU1ZTUlORC5wbmdcIiksXG4gIENMWURFOiBwcmVwYXJlVVJMKFwiQ0xZREUucG5nXCIpLFxuICBERUxFVEU6IHByZXBhcmVVUkwoXCJERUxFVEUucG5nXCIpLFxuICBESVNDT1JEOiBwcmVwYXJlVVJMKFwiRElTQ09SRC5wbmdcIiksXG4gIERJU1RSQUNURUQ6IHByZXBhcmVVUkwoXCJESVNUUkFDVEVELnBuZ1wiKSxcbiAgRE5EOiBwcmVwYXJlVVJMKFwiRE5ELnBuZ1wiKSxcbiAgRkFDRVBBTE06IHByZXBhcmVVUkwoXCJGQUNFUEFMTS5wbmdcIiksXG4gIFJBSU5CT1c6IHByZXBhcmVVUkwoXCJSQUlOQk9XLnBuZ1wiKSxcbiAgSElUTEVSOiBwcmVwYXJlVVJMKFwiSElUTEVSLnBuZ1wiKSxcbiAgSURMRTogcHJlcGFyZVVSTChcIklETEUucG5nXCIpLFxuICBJTVBPU1RFUjogcHJlcGFyZVVSTChcIklNUE9TVEVSLnBuZ1wiKSxcbiAgSU1QT1NURVJXSVRIOiBwcmVwYXJlVVJMKFwiSU1QT1NURVJXSVRILnBuZ1wiKSxcbiAgSkFJTDogcHJlcGFyZVVSTChcIkpBSUwucG5nXCIpLFxuICBKT0tFT1ZFUkhFQUQ6IHByZXBhcmVVUkwoXCJKT0tFT1ZFUkhFQUQucG5nXCIpLFxuICBLSUNLOiBwcmVwYXJlVVJMKFwiS0lDSy5wbmdcIiksXG4gIEtJU1M6IHByZXBhcmVVUkwoXCJLSVNTLnBuZ1wiKSxcbiAgS086IHByZXBhcmVVUkwoXCJLTy5wbmdcIiksXG4gIE9GRkxJTkU6IHByZXBhcmVVUkwoXCJPRkZMSU5FLnBuZ1wiKSxcbiAgT0hOTzogcHJlcGFyZVVSTChcIk9ITk8ucG5nXCIpLFxuICBPTkxJTkU6IHByZXBhcmVVUkwoXCJPTkxJTkUucG5nXCIpLFxuICBPUElOSU9OOiBwcmVwYXJlVVJMKFwiT1BJTklPTi5wbmdcIiksXG4gIFBIVUI6IHByZXBhcmVVUkwoXCJQSFVCLnBuZ1wiKSxcbiAgUFVOQ0g6IHByZXBhcmVVUkwoXCJQVU5DSC5wbmdcIiksXG4gIFJJUDogcHJlcGFyZVVSTChcIlJJUC5wbmdcIiksXG4gIFNISVQ6IHByZXBhcmVVUkwoXCJTSElULnBuZ1wiKSxcbiAgU05PV0ZMQUtFOiBwcmVwYXJlVVJMKFwiU05PV0ZMQUtFLnBuZ1wiKSxcbiAgU1BBTks6IHByZXBhcmVVUkwoXCJTUEFOSy5wbmdcIiksXG4gIFRPQkVDT05USU5VRUQ6IHByZXBhcmVVUkwoXCJUT0JFQ09OVElOVUVELnBuZ1wiKSxcbiAgVFJBU0g6IHByZXBhcmVVUkwoXCJUUkFTSC5wbmdcIiksXG4gIFRSSUdHRVJFRDogcHJlcGFyZVVSTChcIlRSSUdHRVJFRC5wbmdcIiksXG4gIFdBTlRFRDogcHJlcGFyZVVSTChcIldBTlRFRC5wbmdcIiksXG4gIFdBU1RFRDogcHJlcGFyZVVSTChcIldBU1RFRC5wbmdcIiksXG4gIFdFTENPTUVCRzogcHJlcGFyZVVSTChcIldFTENPTUVCRy5wbmdcIiksXG4gIFlPVVRVQkU6IHByZXBhcmVVUkwoXCJZT1VUVUJFLnBuZ1wiKSxcbn07XG4iLCAiLyoqXG4gKiBUaGUgYnVuZGxlZCBmb250cyBpbiB0aGlzIHBhY2thZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBGb250cyA9IHtcbiAgLyoqXG4gICAqIEdlaXN0IHNhbnMgZm9udFxuICAgKiBAc2VlIGh0dHBzOi8vdmVyY2VsLmNvbS9mb250L3NhbnNcbiAgICovXG4gIGdldCBHZWlzdCgpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oXG4gICAgICBcIlQxUlVUd0FNQUlBQUF3QkFRMFpHSUM5Qms5NEFBQlQ4QUFDWkUwZEVSVVk0RWpmWUFBQ3VFQUFBQVJKSFVFOVR4Wk1wQ0FBQXJ5UUFBQmkyUjFOVlFvd0xqTjRBQU1mY0FBQVNnRTlUTHpKT3lpTFNBQUFMZ0FBQUFHQmpiV0Z3RHU1aDFBQUFEbmdBQUFaa2FHVmhaQ3JKQVI0QUFBRFVBQUFBTm1ob1pXRU0rQW1iQUFBTFhBQUFBQ1JvYlhSNHZxV05RUUFBQVF3QUFBcE9iV0Y0Y0FLVVVBQUFBQURNQUFBQUJtNWhiV1U4aGhjakFBQUw0QUFBQXBkd2IzTjAvNThBTWdBQUZOd0FBQUFnQUFCUUFBS1VBQUFBQVFBQUFBRUFnM2xYbmhwZkR6ejFBQU1ENkFBQUFBRGhYRjV1QUFBQUFPRmNYbTcvMS84bENTSUR0Z0FBQUFjQUFnQUFBQUFBQUFHdUFGQUErZ0FBQXB3QUZRS2NBQlVDbkFBVkFwd0FGUUtjQUJVQ25BQVZBcHdBRlFLY0FCVUN2QUFWQXB3QUZRS2NBQlVEeXdBVkFxWUFYQUs4QURFQ3ZBQXhBcndBTVFLOEFERUN2QUF4QXJ3QU1RSzlBRndERlFBeEFyMEFYQU1WQURFQ1dnQmNBbG9BWEFKYUFGd0NXZ0JjQWxvQVhBSmFBRndDV2dCY0Fsb0FYQUphQUZ3Q1dnQmNBdEVBTVFKTkFGd0N3d0F4QXNNQU1RTERBREVDd3dBeEFzTUFNUUxEQURFQ3ZnQmNBMlVBWEFLK0FGd0JEUUJjQXhNQVhBRU5BRndCRGYvK0FRMEFFUUVOQUZzQkRRQU9BUTBBQndFTkFEQUJEZi9mQWxRQVF3SlVBRU1DVkFCREFvc0FYQUtMQUZ3Q1F3QmNBa01BWEFJZkFGd0NRd0JjQW1VQUZnTnNBRndDNFFCY0F1RUFYQUxoQUZ3QzRRQmNBdUVBWEFMa0FERUM1QUF4QXVRQU1RTGtBREVDNUFBeEF1UUFNUUxrQURFQzZRQXlBdVFBTVFROUFERUNpUUJjQW1zQVhBTGtBREVDbmdCY0FwNEFYQUtlQUZ3Q25nQmNBb2NBT3dLSEFEc0F1UUF4QW9jQU93S0hBRHNDaHdBN0FvY0FPd0tWQUZ3Q1FnQVpBa0lBR1FKQ0FCa0NRZ0FaQXJBQVRRS3dBRTBDc0FCTkFyQUFUUUt3QUUwQ3NBQk5BckFBVFFLd0FFMENzQUJOQXJBQVRRS3dBRTBDbkFBVkE0NEFGUU9PQUJVRGpnQVZBNDRBRlFPT0FCVUNkQUFiQW5RQUZRSjBBQlVDZEFBVkFuUUFGUUowQUJVQ2RBQVZBaDRBR3dJZUFCc0NIZ0FiQWg0QUd3SkRBRndDNFFCY0FxTUFYQUtqQUZ3Q293QmNBcU1BWEFHdUFERUJyZ0F4QWE0QU1RR3VBREVCcmdBeEFhNEFNUUd1QURFQnJnQXhBYTRBTUFLOEFERUN2QUF4QXJ3QU1RSzhBREVDdkFBeEFyd0FNUUtjQUJVQ3ZBQXhBbG9BWEFKYUFGd0N3d0F4QVEwQUFRRU5BRk1DNUFBeEFyQUFUUU9PQUJVQ2RBQVZBaDRBR3dHdUFERUJyZ0F4QXJ3QU1RUktBQlVFWGdCTkFqNEFMd0krQUM4Q1BnQXZBajRBTHdJK0FDOENQZ0F2QWo0QUx3SStBQzhDUGdBdkFqNEFMd0krQUM4RHBBQXZBbG9BVlFJbkFDOENKd0F2QWljQUx3SW5BQzhDSndBdkFpY0FMd0phQUM4Q1ZBQXZBdklBTHdLUEFDOENOd0F2QWpjQUx3STNBQzhDTndBdkFqY0FMd0kzQUM4Q053QXZBamNBTHdJM0FDOENOd0F2QWpjQUx3R1JBRUVDV1FBdkFsa0FMd0paQUM4Q1dRQXZBbGtBTHdKWkFDOENTQUJWQWprQUdRSkkvL1lBL0FCVEFQd0FWUUQ4QUZVQS9QLzJBUHdBQ1FEOEFGTUEvQUFHQWZRQVV3RDgvLzhBL0FBbUFQei8xd0VDLy9zQkF2LzdBUUwvK3dFQy8vc0NVZ0JWQWxJQVZRRWdBRmNCSUFCWEFaSUFWd0VnQUUwQmZ3QlhBMjhBVlFKSUFGVUNTQUJWQWtnQVZRSklBRlVDU0FCVkFrSUFMd0pDQUM4Q1FnQXZBa0lBTHdKQ0FDOENRZ0F2QWtJQUx3SXlBQXdDUWdBdkE4VUFMd0phQUZVQ1dnQlZBbG9BTHdHQkFGVUJnUUJWQVlFQVBnR0JBQjhDRVFBdkFoRUFMd0M1QURFQ0VRQXZBaEVBTHdJUkFDOENFUUF2QWxJQVZRR1BBRHdCdndBOEFZOEFQQUdQQUR3Q1NnQlhBa29BVndKS0FGY0NTZ0JYQWtvQVZ3SktBRmNDU2dCWEFrb0FWd0pLQUZjQ1NnQlhBa29BVndJV0FCWURNUUFXQXpFQUZnTXhBQllETVFBV0F6RUFGZ0pJQUM4Q0Z3QVdBaGNBRmdJWEFCWUNGd0FXQWhjQUZnSVhBQllDSlFBNUFpVUFPUUlsQURrQ0pRQTVBU0FBVFFKSUFGVUNMd0FxQWk4QUtnSXZBQ29DTHdBcUFpOEFLZ0l2QUNvQ0x3QXFBaThBS2dJdkFDb0NMd0FxQWk4QUtnSlVBQzhDVkFBdkFsUUFMd0pVQUM4Q1ZBQXZBbFFBTHdKVUFDOENWQUF2QWxRQUx3SlVBQzhDVkFBdkFRc0FYQUVMQUZ3Qm5BQlhBUXNBSndHQUFGY0NQZ0F2QWljQUx3STNBQzhDTndBdkFsa0FMd0Q4QUVzQS9QLzVBUHdBU3dIMEFFc0EvQUFtQVFMLyt3SkNBQzhDU2dCWEF6RUFGZ0lYQUJZQ0pRQTVBaThBS2dKVUFDOENyZ0JCQXJzQVBBS09BRUVDbmdCQkFqNEFMd0pDQUM4QzRnQXhBcFlBUEFLVUFERUJYQUFaQWxRQU1RSnVBREVDU0FBWkFsb0FNUUpaQURFQ0tRQVpBbTBBTVFKWkFERURRQUF2QTBBQUx3TkFBQzhEUUFBdkEwQUFMd05BQUM4RFFBQXZBMEFBTHdOQUFDOERRQUF2QTBBQUx3TkFBQzhEUUFBdkEwQUFMd05BQUM4RFFBQXZBMEFBTHdOQUFDOERRQUF2QTBBQUx3S1VBREVCc0FBWkFsZ0FFQUpZQUg4Q1dBQXhBbGdBS2dKWUFCa0NXQUF2QWxnQUxnSllBQzBDV0FBa0FsZ0FMZ0pZQUE0RHpRQXlBOEVBTWdPNkFERUR2QUF5QTgwQU1RTzFBRElEdndBeUE5QUFNUVBMQURJRXNBQ21BbGdBbFFKWUFMUUNXQUNnQWxnQW9BSllBSVFDV0FDbUFsZ0FwUUpZQUtZQ1dBQ2ZBbGdBcUFKWUFKVUNXQUMwQWxnQW9BSllBS0FDV0FDRUFsZ0FwZ0pZQUtVQ1dBQ21BbGdBbndKWUFLZ0ErZ0FBQVY4QUx3bGdBRDRIQ0FBK0JMQUFQZ0RJQUM4QXlBQXZBU0lBWEFFaUFGMENPZ0F2QU5ZQU5nRFdBRFlDTXdBdkFqTUFMd0RJQUM4Qkl3QXZBYlFBTHdGeEFDOEIzdi8yQWQ4QUtBSGNBRFFDZmdBeEFiUUFMd09QQUM4QjF3QXZBTWdBTHdESUFDOEJFZ0EzQWQ3LzlnTCtBQzhBeUFBdkFqTUFMd0ZjQUM4QXRRQXZBTWdBTHdIZUFDY0F6d0F2QVNrQVhBRXFBRndDUWdBdkFNOEFMd0RQQUM4Q013QXZBak1BTHdEUEFDOENNZ0F2QU04QUx3RVNBREFBendBdkFqTUFMd0RRQUM4QnFBQXZBYTBBTHdKVUFDOERrQUF2QWpJQUx3TldBQzhDMEFBdkFUUUFMd0UwQUM4QnBRQXZBYVVBTHdGTEFDOEJTd0F2QVdRQUx3RmtBQzhCYndBdkFXOEFMd0dsQUM4QnBRQXZBWXdBTHdHTUFDOENDd0F2QWdzQUx3R01BREFCakFBdkFZMEFMd0dOQUM4Qlp3QXZBV2NBTHdGTEFDOEJTd0F2QVRRQUx3RTBBQzhBekFBeEFXVUFNUUZsQURFQlpRQXhBTXdBTVFETUFERUNGd0F2QWhjQUx3Rk5BQzhCVFFBdkFXQUFNUUM1QURFQjFBQkJBbjhBWEFTd0FENEhDQUErQ1dBQVBnY0hBRDREUUFBdkEwQUFMd09UQURFQ2ZBQXhBa2dBSXdJdEFEc0RSQUF4QWxzQU1RSmJBREVEZWdCY0FZZ0FMd0Q1QUM4QmNRQXZBUVVBWEFFRkFGd0NPUUJjQWprQVhBUkNBRndEVndBeEFpY0FMd0pKQURFQ2h3QTdBdDhBT3dLaEFEc0N6UUF0QXFVQVhBTUVBRndDWndBN0FuUUFGUUk2QUM4Q09nQXZBZVVBTHdJNkFDOENsUUJjQWpvQUx3SXBBREVDSlFBdkFqb0FMd0k2QUM4Q09nQXZBaGNBTHdJWEFDOEI1UUF2QVk0QUx3TktBQzhCZVFBQUFvc0FGUUpvQUJrQ0VRQWJBbUlBRmdKVkFDOENVQUJhQXY0QUx3US9BQzhDMFFBeEFuVUFNUU1vQURFQ2RRQXhBdEVBTVFKMUFERURLQUF4QW5VQU1RUVRBREVDMFFBeEFwQUFNUUtsQURFQ3BRQXhBcGNBTVFLWEFERUNuUUF4QXAwQU1RS2RBREVDb2dBeEFwMEFNUU1aQUJVQm9RQXhBbDBBTVFNR0FERUNYUUF4QWFFQU1RSmRBRElEQmdBeEFsMEFNUU5MQURFQm9RQXlBMVFBTVFOVUFERURWQUF4QWhrQU1RTmRBQlVET0FCY0ExMEFGUU00QUJZRFhRQVZBemdBWEFOZEFCVURPQUFXQUFBQUx3QUFBQzhBQUFBdkFBQUFMd0FBQUM4QUFBQXZBQUFBTHdBQUFDOEFBQUF2QUFBQUx3QUFBQzhBQUFBdkFBQUFMd0FBQUM4QUFBQXZBQUFBTHdBQUFDOEFBQUF2QUFBQUx3RkRBQzhBdEFBdkFQa0FMd0Q1QUM4QmNBQXZBVzhBTHdGdkFDOEJlQUF2QVJZQUx3R3NBQzhCWFFBdkFUUUFMd0VDQUM4QlpBQXZBTVVBTHdKWUFBQURRQUF2QUM4QUFBQUJBQUFEbVA4a0FHUUpZUC9YL29NSklnQUJBQUFBQUFBQUFBQUFBQUFBQUFBQ2t3QUVBa3dCa0FBRkFBZ0NpZ0pZQUFBQVN3S0tBbGdBQUFGZUFESUJDUUFBQUFBQUFBQUFBQUFBQUtFQUFQOEFBZVQ3QUFBQUVBQUFBQUJWUzFkT0FNQUFJUDlkQTVqL0pBQmtBNWdBM0NBQUFKTUFBQUFBQWhJQ3hnQUFBQ0FBQkFBQUFCWUJEZ0FCQUFBQUFBQUJBQVVBQUFBQkFBQUFBQUFDQUFjQUJRQUJBQUFBQUFBRUFBMEFEQUFCQUFBQUFBQUZBQ0VBR1FBQkFBQUFBQUFHQUEwQU9nQURBQUVFQ1FBQkFBb0FSd0FEQUFFRUNRQUNBQTRBVVFBREFBRUVDUUFEQURBQVh3QURBQUVFQ1FBRUFCb0Fqd0FEQUFFRUNRQUZBRUlBcVFBREFBRUVDUUFHQUJvQTZ3QURBQUVFQ1FBUUFBb0FSd0FEQUFFRUNRQVJBQTRBVVFBREFBRUVDUUVBQUJJQkJRQURBQUVFQ1FFQkFBb0JGd0FEQUFFRUNRRUNBQW9CSVFBREFBRUVDUUVEQUFvQkt3QURBQUVFQ1FFRUFBb0JOUUFEQUFFRUNRRUZBQW9CUHdBREFBRUVDUUVHQUJRQlNRQURBQUVFQ1FFSEFCWUJYUUFEQUFFRUNRRUlBQllCYzBkbGFYTjBVbVZuZFd4aGNrZGxhWE4wSUZKbFozVnNZWEpXWlhKemFXOXVJREV1TURBeU8wZHNlWEJvY3lBekxqRXVNaUFvTXpFMU1TbEhaV2x6ZEMxU1pXZDFiR0Z5QUVjQVpRQnBBSE1BZEFCU0FHVUFad0IxQUd3QVlRQnlBREVBTGdBd0FEQUFNZ0E3QUZVQVN3QlhBRTRBT3dCSEFHVUFhUUJ6QUhRQUxRQlNBR1VBWndCMUFHd0FZUUJ5QUVjQVpRQnBBSE1BZEFBZ0FGSUFaUUJuQUhVQWJBQmhBSElBVmdCbEFISUFjd0JwQUc4QWJnQWdBREVBTGdBd0FEQUFNZ0E3QUVjQWJBQjVBSEFBYUFCekFDQUFNd0F1QURFQUxnQXlBQ0FBS0FBekFERUFOUUF4QUNrQVJ3QmxBR2tBY3dCMEFDMEFVZ0JsQUdjQWRRQnNBR0VBY2dCT0FHOEFJQUIwQUdFQWFRQnNBQ0FBWVFCQkFHd0FkQUFnQUdFQVFRQnNBSFFBSUFCc0FFRUFiQUIwQUNBQVVnQkJBR3dBZEFBZ0FFa0FRUUJzQUhRQUlBQkhBRUVBYkFCMEFDQUFZUUJ5QUhJQWJ3QjNBSE1BVWdCdkFIVUFiZ0JrQUdVQVpBQWdBR1FBYndCMEFFRUFiQUIwQUNBQWJnQjFBRzBBWWdCbEFISUFjd0FBQUFBQ0FBQUFBd0FBQUJRQUF3QUJBQUFBRkFBRUJsQUFBQURFQUlBQUJnQkVBQzhBT1FCK0FSTUJLd0UzQVQ0QlNBRk5BV1VCZmdHUEFaSUJ6Z0liQWpjQ1dRTEhBdDBEQkFNSUF3d0RFZ01vQTZrRHdBNC9IaUVlaFI2ZUhyMGU4eDc1SUJRZ0dpQWVJQ0lnSmlBd0lETWdPaUJFSUhBZ2VTQ0pJS29nckNDMElMa2d2U0VYSVNJaFZTRmVJWmtoblNHcUliRWh0U0hsSWVjaUFpSUdJZzhpRWlJYUloNGlLeUpJSW1BaVpTUE9KR2drNmlUL0piTWx0eVc5SmNFbHpDWFBKam9uZmpBRE1CRXdGekFjcDR6L0EvOEsvdy8vRy84Zy96My9QLzliLzEzLy93QUFBQ0FBTUFBNkFLQUJGZ0V1QVRrQlFRRk1BVkFCYUFHUEFaSUJ6UUlZQWpjQ1dRTEdBdGdEQUFNR0F3b0RFZ01tQTZrRHdBNC9IaUFlZ0I2ZUhyd2U4aDc0SUJNZ0dDQWNJQ0FnSmlBd0lESWdPU0JFSUhBZ2RDQ0FJS29nckNDMElMa2d2U0VXSVNJaFV5RmJJWkFoblNHcEliQWhzeUhrSWVjaUFpSUdJZzhpRVNJYUloNGlLeUpJSW1BaVpDUE9KR0FrNmlUL0piSWx0aVc4SmNBbHlpWFBKamtuZGpBQ01BZ3dGREFjcDR2L0FmOEYvd3ovR3Y4Zi96di9QLzliLzEzLy93QUFBUzhBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUQrbEFCMkFBQUFBUDZvL20vL3dRQUFBQUFBQUFBQS8ybi9WdjIwL1o3enlnQUFBQURod2dBQUFBQUFBT0hLQUFBQUFBQUE0WXZpRStIbjRjdmhSZUV1NFM3aEZPRis0WGpoY2VGdTRXa0FBT0QxQUFEZ05RQUE0TEhncU9DajRLTGdhK0J4NEQ3Z051QXVBQURnSmVBYzRCRGY3dC9RQUFEZVV0MFUzSW5jYWdBQUFBQUFBQUFBQUFEY2xOdlYyZlFBQUFBQUFBRFJ4QUFBQUFBQUFBQUFBQUFBQUFBQUFwWUNrUUtRQUFFQXhBQUFBT0FCYUFKT0FuZ0NpZ0tVQXFJQ3BBTE9BQUFBQUFMMkF2Z0FBQUFBQUFBQytBTUNBd29ERGdBQUFBQUFBQUFBQUFBRENBTUtBQUFERWdNVUF4WUFBQU1XQXhvREhnQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUF3Z0FBQU1JQUFBRENnQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBTUtBQUFBQUFBQUFBQUFBQU1DQUFBQUFBQUFBQUFDL0FMK0F3QURBZ01FQUFBQUFBQUFBd0lEQkFNV0FBQURHZ01jQXlBREtnTXdBeklETkFBQUFBQUFBQUFBQUFFQnNnSUdBYm9DSXdKQ0FoRUNCd0hpQWVNQnVBSXJBYTRCMndHdEFic0Jyd0d3QWpJQ0x3SXhBYlFDRUFBQ0FBNEFEd0FWQUJrQUpBQWxBQ3NBTGdBNEFEc0FQUUJDQUVNQVNBQlNBRlFBVlFCWkFHRUFaUUJ3QUhFQWRnQjNBSDBCNWdHOEFlY0NPUUhmQW9RQXB3Q3pBTFFBdWdDK0FNa0F5Z0RRQU5NQTNnRGlBT1FBNlFEcUFPOEErUUQ3QVB3QkFBRUlBUXdCRndFWUFSMEJIZ0VrQWVRQ0d3SGxBamNCcUFHekFpRUNLUUlpQWlvQ0hBSVRBb0lDRkFGYkFnSUNPQUhjQWhVQ2pBSVlBalVCb0FHaEFvVUNRUUlTQWJZQ2pRR2ZBVndDQXdHTkFZb0JqZ0cxQUFnQUF3QUdBQXdBQndBTEFBMEFFZ0FmQUJvQUhBQWRBRFFBTUFBeEFESUFGZ0JIQUV3QVNRQktBRkFBU3dJdEFFOEFhZ0JtQUdnQWFRQjRBRk1CQndDdEFLZ0Fxd0N4QUt3QXNBQ3lBTGNBeEFDL0FNRUF3Z0RaQU5VQTFnRFhBTHNBN2dEekFQQUE4UUQzQVBJQ0xnRDJBUkVCRFFFUEFSQUJId0Q2QVNFQUNRQ3VBQVFBcVFBS0FLOEFFQUMxQUJNQXVBQVVBTGtBRVFDMkFCY0F2QUFZQUwwQUlBREZBQjRBd3dBaEFNWUFHd0RBQUNjQXpBQW1BTXNBS1FET0FDZ0F6UUF0QU5JQUxBRFJBRGNBM1FBMUFOc0FOZ0RjQURNQTFBQXZBTm9BT2dEaEFEd0E0d0ErQU9VQVFBRG5BRDhBNWdCQkFPZ0FSQURyQUVZQTdRQkZBT3dBVGdEMUFFMEE5QUJSQVBnQVZnRDlBRmdBL3dCWEFQNEFXZ0VCQUY0QkJRQmRBUVFBWEFFREFHTUJDZ0JpQVFrQWJ3RVdBR3dCRXdCbkFRNEFiZ0VWQUdzQkVnQnRBUlFBY3dFYUFIa0JJQUI2QUg0QkpRQ0FBU2NBZndFbUFBVUFxZ0JmQVFZQVpBRUxBb2tDZ3dLS0FvNENpd0tHQW5FQ2NnSjFBbmtDZWdKM0FuQUNid0o0QW5NQ2RnQXFBTThBZFFFY0FISUJHUUIwQVJzQUlnREhBSHNCSWdCOEFTTUNBQUlCQWZ3Qi9nSC9BZjBDSFFJZUFiY0NId0lXQVlzQmpBR1BBa29DUkFKR0FrZ0NUQUpOQWtzQ1JRSkhBa2tDUGdJc0FqUUNNd0puQW1zQ2FBSnNBbWtDYlFKcUFtNENaZ0prQW1VQnFRRzVBZWdCNlFId0FmRUI3Z0h2QWZRQjlRSHFBZXNCOGdIekFmWUI5d0JiQVFJQnd3SElBY1FCeFFHOUFja0IrZ0g3QWI0QndnSGhBY1lCeXdIQkFjb0J4d0cvQWZnQndBSDVBQU1BQUFBQUFBRC9uQUF5QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQkFBUUNBQUVCQVE1SFpXbHpkQzFTWldkMWJHRnlBQUVCQVNuNEVRRDV6QUg1elFMNEdBVDdFUXdEWXZ0dkhBa2kra29GSENuSER4d3N1UkdwSFFBQWlRd1NBYk1DQUFFQUJ3QU9BQlVBSEFBaUFDZ0FNd0E5QUVNQVNRQlBBRmtBWUFCbkFHNEFkUUI3QUlZQWpRQ1hBSjRBb2dDdEFLOEF1UURBQU1jQXpRRFlBT01BNmdEd0FQWUEvUUVEQVFrQkVBRWRBU1FCS2dFd0FUY0JQUUZFQVV3QlZ3RmVBV1VCYXdGeUFYa0Jmd0dNQVpNQm1nR2ZBYVVCcXdHMkFiOEJ4UUhRQWRZQjNRSGpBZTBCL0FJTEFoRUNIQUluQWpNQ09RSkVBbFFDWWdKeEFud0NpQUtVQXA4Q3BRS3dBc0FDekFMYkF1Y0M5UU1FQXhJRElRTXdBejREVFFOYkEya0Rkd09GQTVRRHB3TzdBODhEMXdQZkErVUQ3QVB6QS9vRUFBUUdCQkVFR3dRaEJDY0VMUVEzQkQ0RVJRUk1CRk1FV1FSa0JHc0VkUVI4QklBRWl3U1VCSllFblFTa0JLb0VzUVM4Qk1jRXpnVFVCTm9FNFFUbkJPMEU5QVVCQlFnRkRnVVVCUnNGSVFVb0JUQUZPd1ZDQlVnRlR3VldCVndGYVFWd0JYY0ZmQVdDQllnRmt3V2NCYUlGclFXekJib0Z3QVhLQmRrRjZBWHVCZmtHQkFZUUJpQUdMZ1k1QmtVR1VRWmJCbVlHYkFaM0JvSUdqZ2FlQnF3R3R3YkRCczhHMlFia0J1b0c5UWNBQnd3SEZ3Y2xCelFIUWdkUkIyQUhaZ2QwQjRJSGlRZVZCNXNIcVFlM0I4VUgwd2ZpQi9VSUNBZ1FDQmdJSHdnbUNDMElMd2cyQ0QwSVJBaExDRklJV1FoZ0NHY0liZ2gxQ0h3SWd3aUtDSkVJbUFpZkNLWUlyUWkwQ0xzSXhBak1DTk1JMlFqZkNPY0k3Z2oxQ1BzSkF3a0xDUklKR1FrZ0NTY0pMZ2sxQ1R3SlF3bEtDVkVKV0FsZkNXWUpiUWwwQ1hzSmdnbUpDWkFKbHdtZUNhVUpyQW16Q2JvSndRbmlDZndLRHdvV0NoMEtKQW9yQ2pJS09RcEFDa2NLVGdwVkNsd0tZd3BxQ25FS2VBcC9Db29LbEFxaUNxOEt1Z3JKQ3RZSzV3cjZDd0VMRFFzWkN5VUxNUXM5QzBRTFN3dFNDMWtMWUF0bkMyNExkUXQ4QzRNTGlndVJDNWdMbnd1bUM2MEx0QXU3QzhJTHlRdlFDOWNMM2d2bEMvVU1EQXdxREVJTVNReFNERmtNWHd4bERHd01jd3gzREg0TWhReU1ESk1NbXd5bkRMQU11d3pERE1zTTBnelpET0lNNlF6MERQc05BZzBKRFJNTkdnMGpEU29OTXcwNkRVTU5UQTFURFZvTllRMW9EVzhOZGcxOURZUU5pdzJaRGFBTnJBMjREY2NOMHczaERlME4rdzRIRGhVT0l3NHFEakFPTnc0K0RrVU9UQTVURGxvT1lRNW9EbThPZGc1OURvUU9qUTZXRHAwT3FBNnZEcllPdlE3RURzME8xQTdiRHVJTzZRN3dEdjhQQ3c4WER5UVBNZzg4RDBnUFdnOXJEM2hCWW5KbGRtVjFibWt3TVVORVFXMWhZM0p2YmtGdloyOXVaV3REWVdOMWRHVkRZMkZ5YjI1RFkybHlZM1Z0Wm14bGVFTmtiM1JoWTJObGJuUkVZMkZ5YjI1RVkzSnZZWFJGWTJGeWIyNUZaRzkwWVdOalpXNTBSVzFoWTNKdmJrVnZaMjl1Wld0MWJta3hSVUpEZFc1cE1ERTRSa2RpY21WMlpVZGphWEpqZFcxbWJHVjRkVzVwTURFeU1rZGtiM1JoWTJObGJuUjFibWt4UlRJd1NHSmhja2hqYVhKamRXMW1iR1Y0U1VwSlpHOTBZV05qWlc1MFNXMWhZM0p2YmtsdloyOXVaV3RKZEdsc1pHVjFibWt3TURSQk1ETXdNVXBqYVhKamRXMW1iR1Y0ZFc1cE1ERXpOa3hoWTNWMFpVeGpZWEp2Ym5WdWFUQXhNMEpPWVdOMWRHVk9ZMkZ5YjI1MWJta3dNVFExVDJoMWJtZGhjblZ0YkdGMWRFOXRZV055YjI1U1lXTjFkR1ZTWTJGeWIyNTFibWt3TVRVMlUyRmpkWFJsZFc1cFFUYzRRbE5qWldScGJHeGhVMk5wY21OMWJXWnNaWGgxYm1rd01qRTRkVzVwTVVVNVJWUmpZWEp2Ym5WdWFUQXhOakoxYm1rd01qRkJWV0p5WlhabFZXaDFibWRoY25WdGJHRjFkRlZ0WVdOeWIyNVZiMmR2Ym1WclZYSnBibWRWZEdsc1pHVlhZV04xZEdWWFkybHlZM1Z0Wm14bGVGZGthV1Z5WlhOcGMxZG5jbUYyWlZsamFYSmpkVzFtYkdWNFdXZHlZWFpsZFc1cE1VVkdPRnBoWTNWMFpWcGtiM1JoWTJObGJuUjFibWt3TVROQ0xteHZZMnhOUVVoMWJta3dNVFExTG14dlkyeE5RVWhTTG5Oek1EUlNZV04xZEdVdWMzTXdORkpqWVhKdmJpNXpjekEwZFc1cE1ERTFOaTV6Y3pBMFNTNXpjekExU1dGamRYUmxMbk56TURWSlkybHlZM1Z0Wm14bGVDNXpjekExU1dScFpYSmxjMmx6TG5Oek1EVkpaRzkwWVdOalpXNTBMbk56TURWSlozSmhkbVV1YzNNd05VbHRZV055YjI0dWMzTXdOVWx2WjI5dVpXc3VjM013TlVsMGFXeGtaUzV6Y3pBMVJ5NXpjekEyUjJKeVpYWmxMbk56TURaSFkybHlZM1Z0Wm14bGVDNXpjekEyZFc1cE1ERXlNaTV6Y3pBMlIyUnZkR0ZqWTJWdWRDNXpjekEyZFc1cE1VVXlNQzV6Y3pBMlFXUnBaWEpsYzJsekxuTnpNRGhEWkc5MFlXTmpaVzUwTG5Oek1EaEZaR2xsY21WemFYTXVjM013T0VWa2IzUmhZMk5sYm5RdWMzTXdPRWRrYjNSaFkyTmxiblF1YzNNd09FbGthV1Z5WlhOcGN5NXpjekE0U1dSdmRHRmpZMlZ1ZEM1emN6QTRUMlJwWlhKbGMybHpMbk56TURoVlpHbGxjbVZ6YVhNdWMzTXdPRmRrYVdWeVpYTnBjeTV6Y3pBNFdXUnBaWEpsYzJsekxuTnpNRGhhWkc5MFlXTmpaVzUwTG5Oek1EaEpaR2xsY21WemFYTXVjM013TlM1emN6QTRTV1J2ZEdGalkyVnVkQzV6Y3pBMUxuTnpNRGhIWkc5MFlXTmpaVzUwTG5Oek1EWXVjM013T0VGZlNTNWtiR2xuVlY5SkxtUnNhV2RoWW5KbGRtVjFibWt3TVVORllXMWhZM0p2Ym1GdloyOXVaV3RqWVdOMWRHVmpZMkZ5YjI1alkybHlZM1Z0Wm14bGVHTmtiM1JoWTJObGJuUmtZMkZ5YjI1a1kzSnZZWFJsWTJGeWIyNWxaRzkwWVdOalpXNTBaVzFoWTNKdmJtVnZaMjl1Wld0MWJta3hSVUpFZFc1cE1ESTFPV2RpY21WMlpXZGphWEpqZFcxbWJHVjRkVzVwTURFeU0yZGtiM1JoWTJObGJuUjFibWt4UlRJeGFHSmhjbWhqYVhKamRXMW1iR1Y0YVM1c2IyTnNWRkpMYVdwcGJXRmpjbTl1YVc5bmIyNWxhMmwwYVd4a1pYVnVhVEF5TXpkMWJta3dNRFpCTURNd01XcGphWEpqZFcxbWJHVjRkVzVwTURFek4yeGhZM1YwWld4allYSnZiblZ1YVRBeE0wTnVZV04xZEdWdVkyRnliMjUxYm1rd01UUTJiMmgxYm1kaGNuVnRiR0YxZEc5dFlXTnliMjV5WVdOMWRHVnlZMkZ5YjI1MWJta3dNVFUzYzJGamRYUmxkVzVwUVRjNFEzTmpaV1JwYkd4aGMyTnBjbU4xYldac1pYaDFibWt3TWpFNWRHTmhjbTl1ZFc1cE1ERTJNM1Z1YVRBeU1VSjFZbkpsZG1WMWFIVnVaMkZ5ZFcxc1lYVjBkVzFoWTNKdmJuVnZaMjl1Wld0MWNtbHVaM1YwYVd4a1pYZGhZM1YwWlhkamFYSmpkVzFtYkdWNGQyUnBaWEpsYzJsemQyZHlZWFpsZVdOcGNtTjFiV1pzWlhoNVozSmhkbVYxYm1reFJVWTVlbUZqZFhSbGVtUnZkR0ZqWTJWdWRIVnVhVEF4TTBNdWJHOWpiRTFCU0hWdWFUQXhORFl1Ykc5amJFMUJTR0V1YzNNd01XRmhZM1YwWlM1emN6QXhZV0p5WlhabExuTnpNREYxYm1rd01VTkZMbk56TURGaFkybHlZM1Z0Wm14bGVDNXpjekF4WVdScFpYSmxjMmx6TG5Oek1ERmhaM0poZG1VdWMzTXdNV0Z0WVdOeWIyNHVjM013TVdGdloyOXVaV3N1YzNNd01XRnlhVzVuTG5Oek1ERmhkR2xzWkdVdWMzTXdNV0V1YzNNd01tRmhZM1YwWlM1emN6QXlZV0p5WlhabExuTnpNREoxYm1rd01VTkZMbk56TURKaFkybHlZM1Z0Wm14bGVDNXpjekF5WVdScFpYSmxjMmx6TG5Oek1ESmhaM0poZG1VdWMzTXdNbUZ0WVdOeWIyNHVjM013TW1GdloyOXVaV3N1YzNNd01tRnlhVzVuTG5Oek1ESmhkR2xzWkdVdWMzTXdNbXd1YzNNd00yeGhZM1YwWlM1emN6QXpiR05oY205dUxuTnpNRE4xYm1rd01UTkRMbk56TUROc2MyeGhjMmd1YzNNd00yRmthV1Z5WlhOcGN5NXpjekE0WTJSdmRHRmpZMlZ1ZEM1emN6QTRaV1JwWlhKbGMybHpMbk56TURobFpHOTBZV05qWlc1MExuTnpNRGhuWkc5MFlXTmpaVzUwTG5Oek1EaHBMbk56TURocFpHbGxjbVZ6YVhNdWMzTXdPR2t1Ykc5amJGUlNTeTV6Y3pBNGFXb3VjM013T0dsdloyOXVaV3N1YzNNd09Hb3VjM013T0c5a2FXVnlaWE5wY3k1emN6QTRkV1JwWlhKbGMybHpMbk56TURoM1pHbGxjbVZ6YVhNdWMzTXdPSGxrYVdWeVpYTnBjeTV6Y3pBNGVtUnZkR0ZqWTJWdWRDNXpjekE0WVdScFpYSmxjMmx6TG5Oek1ERXVjM013T0dGa2FXVnlaWE5wY3k1emN6QXlMbk56TURobVgyWXViR2xuWVhSZmRDNXNhV2RoWm1rdWJHbG5ZV1pzTG14cFoyRjFibWt3TTBFNWNHbDFibWt5TkVaR2RXNXBNamMzTm5WdWFUSTNOemQxYm1reU56YzRkVzVwTWpjM09YVnVhVEkzTjBGMWJta3lOemRDZFc1cE1qYzNRM1Z1YVRJM04wUjFibWt5TnpkRmRXNXBNalJGUVhWdWFUSTBOakIxYm1reU5EWXhkVzVwTWpRMk1uVnVhVEkwTmpOMWJta3lORFkwZFc1cE1qUTJOWFZ1YVRJME5qWjFibWt5TkRZM2RXNXBNalEyT0hwbGNtOHVjM013T1c5dVpTNXpjekE1ZW1WeWJ5NTBabTl1WlM1MFpuUjNieTUwWm5Sb2NtVmxMblJtWm05MWNpNTBabVpwZG1VdWRHWnphWGd1ZEdaelpYWmxiaTUwWm1WcFoyaDBMblJtYm1sdVpTNTBablZ1YVRJeE5UTjFibWt5TVRVMGRXNXBNakUxTlhWdWFUSXdPREIxYm1reU1EZ3hkVzVwTWpBNE1uVnVhVEl3T0ROMWJta3lNRGcwZFc1cE1qQTROWFZ1YVRJd09EWjFibWt5TURnM2RXNXBNakE0T0hWdWFUSXdPRGwxYm1reU1EY3dkVzVwTURCQ09YVnVhVEF3UWpKMWJta3dNRUl6ZFc1cE1qQTNOSFZ1YVRJd056VjFibWt5TURjMmRXNXBNakEzTjNWdWFUSXdOemgxYm1reU1EYzVkVzVwTURCQk1IVnVhVE13TURKb2VYQm9aVzVmYUhsd2FHVnVYMmg1Y0dobGJsOW5jbVZoZEdWeUxteHBaMkZvZVhCb1pXNWZhSGx3YUdWdVgyZHlaV0YwWlhJdWJHbG5ZV2g1Y0dobGJsOW5jbVZoZEdWeUxteHBaMkYxYm1rek1EQXpkVzVwUmtZd05uVnVhVVpHTUVGMWJtbEdSakl3ZFc1cFJrWXpRM1Z1YVVaR01VRjFibWxHUmpCRGRXNXBSa1l3TVhWdWFVWkdNRE4xYm1sR1JqQTFkVzVwUmtZd1JYVnVhVVpHTVVaMWJtbEdSakF5ZFc1cFJrWXdOM1Z1YVVaR01VSjFibWxHUmpCR2NHVnlhVzlrTG5Oek1EaGpiMnh2Ymk1emN6QTRjMlZ0YVdOdmJHOXVMbk56TURobGJHeHBjSE5wY3k1emN6QTRaWGhqYkdGdExuTnpNRGhsZUdOc1lXMWtiM2R1TG5Oek1EaHhkV1Z6ZEdsdmJpNXpjekE0Y1hWbGMzUnBiMjVrYjNkdUxuTnpNRGh3WlhKcGIyUmpaVzUwWlhKbFpDNXpjekE0ZFc1cFJrWXpSblZ1YVVaR01VRXVjM013T0hWdWFVWkdNREV1YzNNd09IVnVhVVpHTUVVdWMzTXdPSFZ1YVVaR01VWXVjM013T0hWdWFVWkdNVUl1YzNNd09IVnVhVEF3UVVSMWJta3pNREZEZFc1cFJrWXdSSFZ1YVRNd01EaDFibWt6TURBNWRXNXBNekF4TUhWdWFUTXdNVEYxYm1sR1JqVkNkVzVwUmtZMVJIVnVhVE13TUVOMWJta3pNREJFZFc1cE16QXdRWFZ1YVRNd01FSjFibWt6TURFMGRXNXBNekF4TlhWdWFUTXdNRVYxYm1rek1EQkdkVzVwTXpBeE5uVnVhVE13TVRkMWJtbEdSak5DZFc1cFJrWXpSSFZ1YVVaR01EaDFibWxHUmpBNWRXNXBNRVV6Um14bGMzTmZhSGx3YUdWdUxteHBaMkZzWlhOelgyaDVjR2hsYmw5b2VYQm9aVzR1YkdsbllXeGxjM05mYUhsd2FHVnVYMmg1Y0dobGJsOW9lWEJvWlc0dWJHbG5ZV3hsYzNOZmFIbHdhR1Z1WDJkeVpXRjBaWEl1YkdsbllYVnVhVEkyTXpsemJXbHNaV1poWTJWMWJta3lNVEUzYldsdWRYUmxjMlZqYjI1a2RXNXBNakV4Tm5WdWFUSXpRMFZGZFhKdmRXNXBNakJDTkhWdWFUSXdRa1IxYm1reU1FSTVkVzVwTWpCQlFXNXZkR1Z4ZFdGc1ozSmxZWFJsY21WeGRXRnNiR1Z6YzJWeGRXRnNZWEJ3Y205NFpYRjFZV3hwYm1acGJtbDBlV2x1ZEdWbmNtRnNkVzVwTWpJd05uQnliMlIxWTNSemRXMXRZWFJwYjI1eVlXUnBZMkZzY0dGeWRHbGhiR1JwWm1aMWJta3dNRUkxWVhKeWIzZDFjSFZ1YVRJeE9UZGhjbkp2ZDNKcFoyaDBkVzVwTWpFNU9HRnljbTkzWkc5M2JuVnVhVEl4T1RsaGNuSnZkMnhsWm5SMWJta3lNVGsyWVhKeWIzZGliM1JvWVhKeWIzZDFjR1J1ZFc1cE1qRTVSSFZ1YVRJeFJUUjFibWt5TVVVMWRXNXBNakZCT1hWdWFUSXhRVUYxYm1reU1VSXdkVzVwTWpGQ01YVnVhVEl4UWpOMWJta3lNVUkwWTJGeWNtbGhaMlZ5WlhSMWNtNTFibWt5TVVVM1lYSnliM2QxY0M1emN6QTNkVzVwTWpFNU55NXpjekEzWVhKeWIzZHlhV2RvZEM1emN6QTNkVzVwTWpFNU9DNXpjekEzWVhKeWIzZGtiM2R1TG5Oek1EZDFibWt5TVRrNUxuTnpNRGRoY25KdmQyeGxablF1YzNNd04zVnVhVEl4T1RZdWMzTXdOMkZ5Y205M1ltOTBhQzV6Y3pBM1lYSnliM2QxY0dSdUxuTnpNRGQxYm1reU5VTkdZMmx5WTJ4bGRXNXBNalZEUTJ4dmVtVnVaMlYwY21saFozVndkVzVwTWpWQ05uUnlhV0ZuWkc1MWJta3lOVU13ZFc1cE1qVkNNM1Z1YVRJMVFqZDFibWt5TlVKRWRXNXBNalZETVhWdWFUQXpNRGgxYm1rd016QTNaM0poZG1WamIyMWlZV04xZEdWamIyMWlkVzVwTURNd1FuVnVhVEF6TUVNdVlXeDBkVzVwTURNd01uVnVhVEF6TUVOMWJta3dNekEyZFc1cE1ETXdRWFJwYkdSbFkyOXRZblZ1YVRBek1EUjFibWt3TXpFeWRXNXBNRE15Tm5WdWFUQXpNamQxYm1rd016STRkVzVwTURNeU5pNXNiMk5zVFVGSWRXNXBNRE13T0M1emN6QTRkVzVwTURNd055NXpjekE0WkdsbGNtVnphWE11YzNNd09HUnZkR0ZqWTJWdWRDNXpjekE0VG5WbGRtOUhiR2xtYjJKc1lXTnJRMmx5WTJ4bFpHSnNZV05yUTJseVkyeGxaRk4wY205clpXTnZjSGx5YVdkb2RDQnRhWE56YVc1blIyVnBjM1FnVW1WbmRXeGhjZ0R1QWdBQkFBVUFDQUFnQUNZQUt3QXdBRDBBUWdCSkFFNEFWd0JkQUdZQWR3Qi9BSXdBbWdDaUFLZ0F0QUMrQU1nQTBRRFhBTjBBNFFFdkFVUUJXd0Z4QVhnQmZ3R0tBWmdCcFFHN0FjNEIzd0hwQWZBQitBSCtBZ1FDQ2dJUEFsY0NnZ0tQQXFjQ3ZBTEFBc1VDemdMWEF0d0M0Z01KQXpFRE93TkdBMVFEWVFOb0EzQURkQU80QTg4RDdnUUNCQTBFRVFRWUJDUUVNQVE3QkVZRVRnUmNCR2tFY0FSM0JINEVoUVNnQkxVRTF3VG9CTzhFOUFUN0JSa0ZMZ1U0QlVFRlZBVmxCWGNGaUFXUUJaOEZ1UVhUQmVBRjl3WUFCZ29HRlFZbkJqa0dQd1pIQmxBR1dRWmtCbThIR3dlcUNBa0lFUWhRQ0tnSS9RbENDYThKOFFvNENqOEtvZ3IvQ3cwTFJBdE1DNDRMM2d2c0RCQU1SZ3hvREtRTXR3ek5EUXNOU0ExL0RiVU4yQTNpRGhJT1FnNXJEcElPdXc3akR2MFBLQTlTRDEwUGhBK05ENXdQd1EvbUQvb1FCaEFwRUQ0UVhoQjlFSVFRcEJDdUVNc1E2UkVFRVFzUkhoRTRFVk1SWUJGcUVZUVJqaEduRWJFUnlSSGhFZmNTRFJJa0VpZ1NOQkpKRWw4U2RCS0lFcHdTcmhLM0VzZ1MyaExxRXZzVERCTWRFeXdUT3hOTEUxc1RheE41RTRnVGpoT2RFNndUdVJQSEU5VVQ0eFB3RS8wVUNoUVhGQ1FVTHhRN0ZFQVVUQlJZRkdRVWNCUjZGSUlValJTWUZLTVVyaFM1Rk1MNVdoVUxmQjBPZXB5ZmViWWJ4cksvMlI5T0JseCtkbTl2ZjZHZGRoNExlOTM0MXQwTCsxTDNGZ3QyK1ZwM0M1dDZlSmhtRzFCbFdUeUtId3ZJOTJqSUM5M0VyY09wSHd2Smtza1NDeFZ0b1hlcGJoMGVEdDFxSFVEV0MzL1o5MEhVOXl6WkM0SjFkWUI2RzNWK21wK2ZtNk9ab0I4TGY5Qm5kdmhrMlF2dUhlY0crNVg1V2dYN0JBWUx3L2dLRmVLRUJjbWJ1SzdQR3d0TEhmY2pMRXNkRHQwNzIyb2RDL2NVOXlBVjJNMk0ycG9lQzl1K1hURWYrekZ2QlF2NGlSYjRwam43MEFjTCt3ZDJOMi83QXhvTGY5UmpUQjBMaTlUNEZOUUxvRXdkQzlNRCtEUi9GZmRnOXpuM09mZGg5MS83T2ZjNSsyRDdZUHM1K3puN1gvdGg5em43T2ZkZ0gvdTkrQVlWOXpyM0YvY1c5enIzTy9jVyt4YjdPdnM3K3hiN0YvczcrenI3Ri9jWDl6c2VDMGtkK0ZuZC9BWDNmdmZ4Mi92eDkzejMvZDBIQy93VTk1MWVIZmNBdVNvaUpsMHArd0Q3QTEvcjhoNExudmRORmFtam42NnVwSGR0YUhKMGFHaHpvcTRlRGtxS3VubkJHd3RiZUc1a1dob0w0UGltRmZ5bTNmaW1Cd3YzWFFiN0M0UkZNUHNRdFIwZkMrMGQ5K0RkK3hENHR2Y0tCZ3M5aDJhM3RobzFGaTNnVS9TSkh0K055N2VpdndnTEZhdWpvcXVyYzZKcmEzTjBhMnVqZEtzZkMxK3lxWFc3RzhLMXM3L0FZN0JTaWg4TCtTRVc5L3I3cnprSEMwa2QzL2xhQnd2N2I3K3VkdE8yQytjZ0hmMWFDMUpyYkZJZUN4WGg2alVHQzNiNHBuY0x1dmVkRmZzODZ2c0I5eWZ4NU1udnFoNHprUVZUYzFkcFVSc3ZWTXYzQVlNZitCWUdpckFGOTArQ0pOcjdDaHY3Snl6N0FmczhIK1M2RmV1WXdzUGdHODNIWS9zRW1oOEwyUjM3UE9yN0FmY245d1hxMWZjTW5CODBrQVUvZjFGZVJ4c29VdGIzRVBjUXhOYnV6TVJpUlpjZkMvc0ZPVW9rZGgvWSs0Q0VIUXYzRFBncTl3djhLZ1h5QnZjNCtLWUZNd2I3RlB4TEJRdktqeFcycTZpNXVheHVZR1JxY2wxZGE2U3lIZ3NGZmgwTFNSM2ZCd3VMNXZmUDl4Q0xkd3ZLV3NyM0Q4bGN5UXVnSlIwQkMvc0MrZkFCQ3hWWHRHUyt2Yld5djc1aHRGbFlZbUpZSHNHTUZaNmNuYUNmblhsNGQzbDVkM1o2blo4ZUR2ZXhweFhFeDZyS3F4OHpCejlTWVMxSFhhcStkaDQxaFFVdm91Qk45d1ViOXg3cTF2Y2ZId3ZsSGZjeEZtNmhkYWtMNFBpbUZmeW0zZmZSQndzUzRQOEFUSUFBLy8remdBRGRDNm1ob2FpcGRhRnRiWFYxYlFzVjliZnI5d01ML0g3OVdnWGRCZ3NEY3gwTEFlZmY5K0hqQS9mdUlCMzdrdjFhMy9lejl6NEdsd2IzTi91ekJlZ0crejczdndYdHBzTFM3aHIzR2k3Yit6SWUrejc3NlJYM2wvYytCL1RGWERnNFVWMGlId3Z0dzhIaDNLeFZLUjc3MGQzMzZRZjNCRkhrK3cwZUM3YVlvN0d3R3NWV3VVWk1WR0ZWZ3g3S2h3V2lqcU9lcnh1c3BuTnNId3ZJZk5lRVN4cFVTWGxWT2xlMXk0RWVOWVVGQy9jVUZXMmhkNmx1SFI0TEZZRWRDeUFkT1FaZkhRdjJJU0N6QjJYN0xRVzdCZ3YzdFg4Vjl5ZnE5d0gzUEF2Ly83U0FBUDhBUzRBQUN4SzY0ZmVpM1RyY085c0xmOWxlZHZobjFndjQ3UWYzNy96dEJmY08rVm8zQzZpaG42bW9kYUJ1YlhWMmJndWZkdmxkZHdFTFFreHJSSEFmQy9zRytqc0J1Z3NCdXVJRFRSMEwrU1QzZEJVeGtRVzJIZnRqOXduN04vZGc5emJ0OFBjZnBSOEwzUjNOV2JsRlFWVmFQb0llaHgwb1NudEtUUm9PRllVZHhmdGhCbXo3ZGdYR0JyQ2hwSTZpRzdPcVoxNWNiR3BqWjJ5aHJZUWZEdFVkcUttaW9haXBkS0Z0Ym5SMWJSNE9BZWZmQXpzZEMrRWR5d1lPZkIzQyt4WWhIZklkSC9zdzk2a1Y5eERFMXU3dHhVRDdFUHNRVVVBcEtGTFc5eEFlQy9kYkZlSDdEQVh1QnVMM0RBVkFCazQyVHVBRkRoWExCdWIzRmdVd0Jnc0R5ZmYzRmZjQkhRdHljSDlzYkJwYnMyaTlvNldTbjZNZXlRY0xGYk1HWmZzdEJic0d3L2N0QmZZaEJ3NXVvWFdwcUtLaHFLbDBvVzV0ZFhWdEhndE1qOGRhMkJ2WHg3L051Mmk0WEprZkMvZEdpQlgzQ3gwTFFzaGUyOXZJdU5TOGJyRmJueDRMRmRiTmtkcVpIdmNUb1FXQ0Ivc1BSazB6SGoyS1pxNjJHZ3RLa2NOZDB4dmF3OFBkMkZqSFFtOTFnblo0SDVqeEJmY3VDeVVWekFZVHNPWDNGZ1V3Qmc3S2lBVzZsS0tqdFJ1c28zWnFiWHgxWm5NZmEzWUZDNHZkK0xiZDJ2Y01Dd2IzcGZlbEJmc0FCZzV3ZUhwdmFYT3RuWDBlQzI2aWRhaXBvYUdvcVhXaGJXNTBkVzBlQzNZR2RJR1ZveC8zYVFmM0lqL2IreDBlQ3lVZDd2Y1dDd0huM3dQM0RoMEx5ZmNpelZQREUvZ0wrMkQ3T2ZjNTkyRUwrTk1WNi91UXpQZ1lCZ3YzQVl0M0V1ZmYrQlhmQy9oK0ZZWlRCYk4yV3FSTkcvc1RReWo3QW44ZkU5N0Erd0oreFNqM0V4dlIwYk8rb2g4VHYwQ1kreDMzb29lVTk3OEk5Mm1SK3piM08vdHRHL3VFKzFqN1NQdDZneDkvKzlEM3BQczU5OXYzRVhyUEdQdTBJUHR4OXhPVjk2QUk5MUtTOXpmM0tmZGRHL2RFOXhuN0lmdEJoaCtHK3k0aVVtWElmNTJPdUkyaENCUGV3SjMzZWdYNzYvdGNGZHVUdDlQbkd4UGZRT2FyUVR5RUgwQ0RYa0V3R3hQZXdDNXQxTmlTSHc1LytYY0I5MkQzTWdQM3V2bHFGZXVEMmpGckpYcFdYbFZGWC9jNSsyWVlvNnVWeW9qQzRZTVlpajF4TzJWYzRDVVlLQVpsdVFWbVpFeDJSUnY3SnlYUjl4WGZzTDdreVIrWWxBVmV5SFhFdnhyejM4N2tneDc3TlB5dkZVRE1YTzY5dDV1bG9SNzdRdmR5QlZ0c1VWOUlHdEg0Q1JWcW0yT3ZXaDdOcXJPNXR4cTdiNjFmamg1YWptVmtqRnNJRG92V1NYYjNyTmFrMXZkVjFwcDNFcnJWOXgvVTc5WDNIOVFUVjhENDZ2bHFGZnlhL1hZRjZBYjRtdmwyQlJPYndQMFkrMDRWSzhvLzI5dksxK3ZxVE5jN08wdy9MQjdWRnNhbXNMVzFwMlpRVDI5bVlXRndzTWNlRTd2QXV4ME9MaDNPOXhhYUhRdmRPdHc3MnhPNGdEQWRFN29BNHJaZkw0d2YrekZ0QmZzSWREaHYrd0VhTGVCVDlCNFR1UURmeDdpOW9oOFRlUUErSFJONGdLN1VqQjBUdUlCUEhRdmRPdHc4MmhQMmdGa2RFKzZBK0hJSEUrNGdQQVlUOWlBMkI4UjBVYk5FRy9zakxQc0EreWtmRS9hQSt5bm8rd0QzSlI3N0xQZVZGZlBFMXVvZUUvWkE2Y1UvSklrZkpJcFJQekFiRS9hQUxGTFc4eDhUOTRBTDNUcmNQTm9UOTRCWkhSUHZnUGh5QnhQdklEd0dFL2NnTmdmRWRGR3pSQnY3SXl6N0FQc3BIeFAzZ1BzcDZQc0E5eVVlK3l6M2xSWHp4TmJxSGhQM1FPbkZQeVNKSHlTS1VUOHdHeFAzZ0N4UzF2TWZDeEsxNGZlaU1oMFR1VE1kRTdyM0U2SUZaZ2NvUmxBemh4NFR1VU1kRTNtT05RWFY5OVFHOXlnMjFmc1Urd0kyU0NaMkh1U0VCY1NZdTdQTkd4TzhOQjBUdVRZZEM2QjI5MW5ROTBQUTkxeDNBWUg0Z1FPd0Z0SUdyL2RaQmZjY0JtZjdXUVhSQnEvM1dRWGRCcGJRQlRzR3EvZERCZGdHbHRBRlFBYXc5MXhFaW1mN1d3WDdIQWF3OTF4RGltZjdXd1V4Qm9CR0JlTUdhL3REQlRZR2dFWUYzZ2JmMEJXcjkwTUY5eHdHYS90REJRNHJIUk9zUVBpWitLWVZFNjBBT1FZVG5RQkRCOEZ0VTZrOUcvc3RSUHNXK3lmN0o5TDdGdmN0SHhPY2dDZ2RFMXlBamowRkUxeEExUVlUbkVBOEhST2VRQXVGOXdMNHNOMFN1dVBzOXdRaTIvY0I0eFBzOTRQM1lSWGJCc0tmdTcydUh1VEl4QjFjZFZOZUhrMVdjMHhCR2hQMGhQc3dGV3VqZEt1cm82S3JxM09pYTJ0emRHc2VEdDM0MHQyZkhRc0IxZVAzNXVNRDl5ZjNmQlV6aFFYN0lwYjNCaXYzTUJ2M0ZQY00wUGNXOXdBbXkvc1hyeDh1cFNhajRoclF4N2JlN3RCUE1wY2U0NUVGOXhaOUp1cjdMQnY3SEN0QSt3djdCdkpUOXdwdEgvY2pac2xmUXhwRVRXVXYrd1ZIemV0NUhndjRiaFg3SnVvbTl5SFl5Ni9Nc2g3N08zOUpMQ0FiVGxxbnZYUWZNNFFGS0szZlZmSWI5MkRPOTEzM2FQY0VjK1JZd0IvQVdFeWhUQnY3SmlNcSt5OGY0eGJ1emRMcEhoUDQ3TTlFS0lrZktvcEVSeWtiRS9ReFRNL3NIdzdaK0NMWkFjamc5NDdoQTZRZEM0djIrSzNkRXJyajVQVXUzL2JqRSt6M2dmZGhGZDhHejUydXdiRWU0TVhFSFYxM1YxOGVSVkowV2pRYUU5UisrMkVWOWZZaEJnNHNIY3ozRm5JZEMvZ1crQU1WNFpFRjhYbzF6aUViK3cwNVN5YU1IeWJ2YisxMEhtUWQrd0dUNjBiM0VSdnc5TGp4OGpTdCt3MmlIMCtZU0tHS3Z3aSt1NnJIeDhkblRwY2VDNHZkK01iZEFieno5OERqQThuNGhoWGpoUVh0bnNmQjRodmN3MWxGVTFWVVBsb2YreEErK3lrOCsyUWErSWJkL0I0R2p0UDNIT3ZIcmdqM0FNM2MwdkVhOXdnczRmc1creUl1Sy9zWWVCNE9GZThkK3hQRk8rZ2ZNUGRqdEIzNDlDa2R1aWNkRTNEM0t2azVGYU9YZW5xY0h4T3dJaDBUY0NZZHlBYTZtWituSGc3N2FkQkc5MmtTdXM5SDl6Z1RZUGNsWHhXcXR3VVRVRk1HWjJJRkU1QitIUk9nZ25WMWdIb2JkWDZhbng4VFlKK2JvNW1nSGc0a0hjZnVQWGI0N1pJZEU2NVRIUk8yYlIwR0U4Nzg5d2Y3OVBqM0JjditHQ0VkK0FaN0ZmZFo5eEQzSS9kMzkzbjdFUGNqKzFuN1dmc1EreVA3ZWZ0Mzl4RDdJL2RaSC9jTkhmY3AzeUw3VGZ0TU55UDdLZnNwTi9QM1RCNExBYnJoOTh6aEEya2Q5endzOXdIN0ozb2RDeFdISFNoS2UwcE5HdUFkelZtNVJVRlZXajZDSGc3N0d4WDdJUGNFK3diM0lQY2c5d1QzQnZjZzl4LzdCUGNGK3lEN0lQc0Urd1g3SHg3Q0Z2Y0E1T1AzQVBibE0vc0Erd0V4TWlEN0FETGs5d0VlQy9zcTFQanpkKzczRmdHaCtIOERvZmltRmZkVy9Kd0Zwd1o0V2dWdmdYdUJjQnRVUXNvR3g3R2x4SjhmOTJ2NDZRVTBCdnN2L0U3N05maE9CUXY0bXNYM0duY0J1dmZxQS9nWitOUVYrdzBHeVBSWnFFNGlUdlJaYnNnaUJmc05VZmNOQms0aXZXL0k4OGdqdmFkTzlBWDNEUVlPK04vQjFzRUJ1c0hYd1FQM0gvamZGYjIxc3IrK1liUlpXR0ppV0ZlMFpMNGZaZWNWbnB5ZG9KK2RlWGgzZVhsM2RucWRueDRPeVJPMmtQbUtJQjA1QmhOMmtGOGQrMjZSSFJPMWtGc0dFN21RU2gwVHVwQnpCZ3NrSGNmSUhTLytHQ0Vkb0hiM0p0MzRkbmNCK0IzZkEvaHhJQjB5QnZ2Ly9IWUZPZmdFK3liZjl5YmQzVGtIKy9BVzk1ejM5UVg3OVFjT0ZleXR3Y1NmbklWL21CNzdGL3RsQllTZmlLYW9HclQ3RnhYM0YvZG1CWkoyam05dEdpeHBWVkozZTVHWGZSNE9HL3MxUS9jWjl5LzNNTkwzR3ZjMjhjMVBNNk1mNDVFRjl4ZHJLT2ozQ1IzN1kvY0oremYzWUFzcmQwZEgrd0FiK3pWRDl4bjNML2N3MHZjYTl6Ynl6VTh6b2gvamtRWDNGbXduNmZjSkhRc2xIUUhuM3dOSkhkLzNnUWZwOHZlUSsrZ0Y4UWI3dnZnbTk2djN5QVVoQnZ2WCsvZ0Y5L2dIQzFjZDkwSGpBL2NRK1lJVlBnYjNQUHV6aS91eSt6ejdzd2pZQnZkTDk2bUw5OGI3Uy9lcENBNFM1OS80RmQ4VFhsTWRFMjV0SFFZVG52ejNCL3YwK1BjRkMzL1g5K0RaRXJ2aDk5VG9QTm9UNlBmSitHNFYreWFZSlRWKyt5eCsreUxvSVBjbWY4V0Z3WjYvdGd2M3pQd0ZGU3pLUDl2Ynl0ZnE2MHpYT3p0TVB5c2UxUmJIcHJDMXRhZG1UMUJ2Wm1GaGNMREdIZ3ZnSUIzOVdza2Q5NUlIQ3hWd29uU21wYUtpcHFWMG9YRndkSFZ4SHZkZ0ZuQ2lkS2Fsb3FLbXBYU2hjWEIwZFhFZURwMEdaMkpTSFMwZEN5UWR4OTM1Q0hlT0hmY1MvaGdoSGZqMTl3eG9yaEs2OTZRVG9QZUkrUFVWMWdZMDl3d0ZLQVkxK3d3RjFnWVRZTWpnQlE3NDkvZU1GZmhqTi94akIvc0lTVW43Q2ZzSlNjMzNDQjc0WXpmOFl3ZjdOdkVsOXprTE9SM3k2aExlNFRmZEUraEFIUlB3Tjk1TEhRNzNIZmpLRldkRFF0UFNIUXV4d2RFYTl3Z3EzZnNlK3hBcEsvc1dmeDdqaFFYa2xzUEkzaHZpeEZ0SGloOUpDOTBUNUlJZEUvQmlRcjBHRStUa3Q4VGxIeFBvQy9qMTl3d0J1dmVrQS9lSStXMFZUalpPNEFWQUJ1SDdEQVh1QnVMM0RBVU9JQjJQKzVBRnh3YWk5MEVGMmdmN2tqd1ZvdnRCQmNjR2ovZVFCVFFHRHRUNUVYZk9IUXZkOThzSDdzUEI0ZHlzVlNnZSs4dmQ5K2tIOXdSUjVQc05TVTF3VUd3ZUMvaVpJQjA1KzVEY0hRc1Y5MDQveWRlNHhWNzNrbG9HKzF2N213WGNsQlgwOXg4Rit4OEhEZ1AzVGZod0Zmc2UremdGUXdmM0h2czRCZkFHK3o3M1hQYys5MXdGQy9sYWR3Rzg0Z084SUIzN0hBZVorMWdGeGdhWjkxZ0Y5eHdIRGdIaTNRUFhIUXYzQngycW4zMXZsUi9Ja1FYSGVWcXRWQnNMRlZIM1h3ZEFLMTM3QmZzTkdza0c5eFBBOXduWjd4NjNCdzRWUTR6SVU5b2Iyc2pEMDR3ZlN3Wm1pbXB1WUJ0Z2FhaXdId3Y4WGQzNFhmY2ExUHNhNlIwTGRIVnRIdmN4Rm9zZERnUDRlUGhNRmVYOE5VTDMzUWY3NS93RUJUTDRSOVQ3N2djTEZZQWQ5ekFXYnFKMUMwNmR2V3JDRytYRTVQY2k3Vi9oTHo5UlZUUTN3VlRRSHd2aUlCMzg5QWZxSFFjTDB2Y0wxL2VZelAvL3lJQUEvd0JBZ0FEM0p0SVR2c0FMK0R2MzlSWGhrUVgzQlgwcTBmc0JHL3NuTFBzQit6d0xGYnlNcXF1eUc3aWthMXBaY0dwZllXNnN2WXdmRHZ0Uzl4WUJ1dmN2QS9kZVR4VXdCa3Y3RmdYTEJnNEd3VzFUcVQwYit5MUUreGI3Si9zbjB2c1c5eTBmQ3hYZ0hRczVIZTczRmdIZzNRTkFIUXZVOTBoM0FmZUwyQVAzaXlBZCswajdMMEwzTHd2M25NWDdWQWFNbzZpbnNxV25uaGpGc3E2MXdCb0wrUFgzRmdHNjl5OEQ5MTc1ZHhVd0JrdjdGZ1VMKzlFSE1iOVo2UjdYMUQ4R1lYV2h1Qi8zMFF2ZytLWVYvS2JkOTlBSDU3SzkzQjYrMDFnR0Mva0Z5UUc2OTVNRHV2bERGVTMzazhrSERoVnVvWFdwWFIwZUMvc00xd0c2K0dnRHVsOFZQL2hvMXdjTzkydjNEUGNUOTNmM2VQc1A5eFQ3Ymg4TCtQbnFBYnJoQTdyNVdCVXM0ZW9IRHE4SHQ2T25yaDdjMHpzR0tsNVNOQjhMVHJSaXloN0UxRjRHZElDVm9oLzQ4QXYzR3dmM1BkOHcrMHY3U1Rjdyt6MGZDNVVWM2J3SHJxQjljWEIyZkdnZkR2Z0xJQjM3MURuM0N2eTIreEE1QzZBVzV3YlM5MThGOThBRzB2dGZCUXZveGR2M0UvY1VVZHd1TGxFNit4UUxlOTMvQVE2QUFOMy9BT0dBQU4wU0N3SG4zUVBuSUIzOVd0MzVXZ2NMK3ljcyt3SDdQUHM4NnZzQjl5Y0xGZmNFSFI0THhmZkF4UUgzS2NmM1NzY0Q5OEFMM2ZleTNjcjNER2l1RXJ6aitFWUxGU0QxOW1NSHNmY3RCVnNHRG4vWitDTFp6dmNNYUs0U3V1RUw5OHY3eXdYM0FBYjdwUGVsQlF2M2NNUDNPYmJkdHNqREFiekNDd1VvQnZ0Vis5LzdWdmZmQlFzcHR6WG4xOFhCNHQ5VndrWUxzNnFjcDU4ZlBvSnBYbHNiQzdXcGFsbUtIMXFLYTJ0a0d3dGpiWHB3ZHgvTms2ZkN3UnNMaDJaMWRtYU1HVnlOQlE3N0tSdjdZZnNJK3pqN1pBdjNFaDN1Qy9pcE9meXBCMTExYjJVZUM4ZzJCZFlHTlBjTUJTZ0dDL3Q5K0FZVjkwM2Y5UGNwQytjVytFemQrL2o1Q0RjR0N3YjdvZnVqQmZjQUJnNFY5NVBKKzVNR0MvanJGVk5FQmhQdzl5Y0xpKzQ5ZHZqdDl3R0xkd3VMK1ZvQm9QbkhBL2hDQzUzNU9BSDNQTndEOTJVTDB2Y1c5eWYzSjBUM0ZndjNMZFQ3TGZkSUJ3NEJBQUVBQUNJQUFLc0FBWWNCQUt3Q0FZa0JBSzhCQUlvQUFDTUJBWXNCQUxFQUFZMEJBQ1VBQUpvQUFZOEJBQ1lBQUxJQUFaRUFBTE1CQVpJQUFMVUFBWk1EQUNjQkFaY0VBQ2tBQVp3QkFDb0FBWjRBQUxZQ0FaOEFBTGtBQWFBQ0FDc0FBYU1CQUN3QUFhVUFBQzBBQWFZQ0FJd0FBQzRCQWFrQ0FMb0FBREFBQUxzREFhd0JBSTBBQUw4QUFJNEFBREVBQUowQUFESUJBYTRDQURRQUFiRUJBTUFBQWJNREFEVUFBYmNDQURZQUFNRUFBYm9BQU1JQ0Fic0VBRGNCQWNBREFEa0JBTVVBQWNRQUFNWUFBY1VCQURzQUFjY0FBTWNBQWNnbUFFSUFBTWdBQWU4QkFNa0NBZkVCQU13QkFKQUFBRU1CQWZNQkFNNEFBZlVCQUVVQUFLY0FBZmNCQUVZQUFNOEFBZmtBQU5BQkFmb0FBTklBQWZzREFFY0JBZjhFQUVrQUFnUUJBRW9BQUpFQUFOTUNBZ1lBQU5ZQUFnY0RBRXNBQWdzQ0FFd0FBZzRBQUUwQUFnOENBSklBQUU0QkFoSUNBTmNBQUZBQUFOZ0RBaFVCQUpNQUFOd0FBSlFBQUZFQUFLSUFBRklCQWhjQ0FGUUFBaG9CQU4wQUFod0NBSlVBQUZVQUFoOENBRllBQU40QUFpSUFBTjhDQWlNRUFGY0JBaWdEQUZrQkFPSUFBaXdBQU9NQUFpMEJBRnNBQWk4QUFPUUFBakF6QUlzQUFJOEFBbVFCQUJFSkFtWWZBR01BQUpzQUFvWUJBSjRBQUtNQUFvZ0FBVUFEQW9rWUFBOEFBQTBBQUJzQkFIa0FBQUlBQUdBQUFDQUFBSHNBQUhJQUFIUUFBQXNBQXFJQUFBUUFBQkFBQUQwQUFxTWRBQTRBQXNFQUFHOEFBSWtBQUVBQUFzSUJBQWtCQUZ3QUFGNEFBRHdBQUQ0QUFzUVRBSFVCQUdrQUFIY0FBRUVBQUFnQUFHb0FBSGdBQUdzQkFBTUFBR2dBQUdVQUF0Z0dBQ0VBQUFjQUFITUFBR1lBQUtvQUFLVUFBdDhBQUprQUFLRUFBdUFCQUYwQUFLQUFBSEFCQXVJQkFHRUFBR2NBQUFVQUF1UUVBR0lBQUdRQUFBd0FBS1lBQUtnQUFKOEFBQjRBQXVrQUFCOEFBQjBBQXVvQkFKd0FBdXdBQUY4QUFKY0FBRDhBQXUwSEFBWUFBSG9BQXZVOUFJTUFBSUlBQUh3QkFJWUFBSDRBQUlnQUFJRUFBSVFBQUg4QkFJVUFBSWNBQXpNRUFwUUNBQUVCVGdGUkFXVUJiZ0dKQWFjQnlnSG5BZkFDRUFKQ0FtRUNod0xSQXlrRE1nTkRBMVFEbVFPd0E4TUQ4Z1AyQkJ3RUlBUW1CQzRFUlFSZ0JIOEVrUVNhQkxZRTlBVVdCWHNGbFFXc0JkQUdCQVlqQmtnR2JBYVNCdU1IR2djbUIwMEhWUWR5QjRzSG9RZXJCNzRIOUFnV0NCOElNQWhRQ0ZVSVlBaHBDSGdJalFpUUNMNEkrZ2tjQ1NrSk5BazNDVzBKZUFtQkNkTUo2Z256Q2Z3S0R3cUFDcU1MSnd0RUM0a0wrQXYvREFzTUdBd2xEQ29NT3d3L0RJRU00ZzB1RFRrTmhnMkxEWndOekEzWURlTU43QTRBRGlJT053NUFEa2tPWGc2UURzd084QThjRHo4UFZ3OTRENUVQcWcvZ0Qrb1A4aEFPRUNZUUxoQlBFRmtRYXhCNUVJb1FqUkNRRUpjUW94Q3dFTDRRMlJEakVRRVJHaEUyRVVBUlloR1NFYmdSeVJIakVmOFNGeEl5RWt3U2RoS2JFcjBTMEJMMUV4TVRLUk05RTEwVGdST2FFOEVUMmhQeUZBMFVRUlJmRkdJVWF4Ui9GSXdVekJVTEZSMFZNUldCRmJVV0FSWjhGdU1XN1JiL0Z4RVhaUmQ5RjVFWHZCZnhHRHdZb3hpcEdMSVl3Qmp6R1FnWkhCa2xHVUlaZnhtM0doSWFJaHBYR21nYXJ4ckNHdFlhNkJyN0d6Y2JXUnRkRzNBYmVCdVZHNjBic1J1N0crZ2NBaHcySEZjY2F4eUhITGNjNWh6ckhQWWMvQjBNSFNBZEpCMWRIYkVkMEIzaEhmRWQ5QjR1SGpFZU9oNVVIbW9lY2g1NkhwQWUvQjlESDNrZjBpQWtJSDRnbHlDbklMWWd4eURNSVJjaEd5Rm1JZFVoOUNJQUltY2liU0t2SXdnakZDTXdJemtqWGlPT0k2NGp0eVBGSS9Na1B5UnJKSzRrMkNUcEpRTWxKU1UvSlZnbGtDV2JKYU1sN0NYK0pnWW1JaVpESmxBbVppWjJKbm9tZlNhZ0pxa212eWJNSnlRbmFpZHlKNGduNFNnV0tGOG9oeWlRS0tFb3R5ajRLVEFwT0NsSktZc3B4U29oS2ljcU1pcE5LbG9xZ1NxMktza3JCaXNaSzFnclhDdC9LNE1ycnl2aksvY3NFQ3dxTEVnc1pTeU1MTjB0S2kxVExZZ3RzaTNLTGMwdDBDNDZMbTh1ZlM2akxxWXV0aTY1THNzdTRpN3dMd0V2Rnk5SEwyc3ZnUytpTDdJdnh6QUJNQkV3TnpCd01OQXcvVEVaTVVVeFhURjNNYVF4dXpIc01pVXlZREoxTW9NeW1ES2JNcXN5cmpMQU10Y3k1VEwyTXd3ekdETkZNM0V6ekRRVk5IUTBzVFRoTlRZMWdUWEZOY3cxOURZSU5qVTJZVFpwTm9JMmt6YkFOdEkyMnpjRU54azNXamQ3TjRRM25qZXROK2MzK3pmK09EazRVRGhuT0hvNGlqaU9PS0U0dVRqWE9RUTVHemtlT1hJNWhEbW1PYW81elRuUk9kdzU5am41T2YwNkNEb2lPalU2T1RwUE9sTTZWenBuT21vNmVqcWNPclE2dnpyRE90czY4enNoTzFBN2FUdHNPOFU3MWp2Wk8vQThDRHdNUEE4OEpqd3FQQzQ4UVR4VlBGZzhvVHkwUExnOHZEekFQTVE4eUR6TVBOVTg0VDBFUFNjOUt6MHZQVVk5WGoxOVBhQTl5ejN6UGlNK1VqNk9Qc2srelQ3UlB0VSsyVDdyUHY0L0lEOHlQME0vVkQ5NlA2SS9yais5UDgwLzcwQlZRTVpBMVVEb1FQdEJJVUZjUVpaQm9VR2tRZEJDYTBNTFF6NURaME9zUStkRDYwUDdSQVpFR2tRcFJFcEVyRVR4Ulc5RjVVYVJSeGhIa1VmT1NDVklja2psU1NGSlJVbFlTWXhKc1VuU1NpSktSRXBwU281S3RrcnVTNUJMNDB2N1RDZE1wa3pjVFFaTk9rMWxUWkZOckUzeVRmWk9qVTYxVHVGTzkwOGNUMEpQWlUrUFQ3bFA2RkFyVUh4UW8xREtVUkpSWEZGL1VhSlJ4bEhvVWd4U1JGSmNVbjFTbkZLOFV0TlM4bE1RVXpCVFcxT0lVN3BVRkZWNVZiQlZ3VlhYVmVaVisxWVlWamxXVmxaNFZueFdnRmFFVm9oV2pGYVRWcGRXbTFhZlZxTldwMWFyVnJsV3ZWYkJWc1ZXeVZiTlZ0RlcxVmJaVnQxVzRWYmxWdWxXN1ZieFZ2VlcrVmI5VndGWEJWY0pWdzFYRDFjYVZ5ZjdZdnNxeHFpenFKNm9zNmUvcDZDN25xaWZxS3Awb3FpaXFLcW9vcWVycDhVUzI4dEw5d3o3RFBkR05hZHY5MG43RDZkdjl3OUl6aE9xS3dMMzlTQWQrNlg5OFBlbEJ2dGx4aFVUUUFFQXFBZkhzd1ZQQmhNZ0FRS285eUlIRTBBQUFtNXdCMDlqQmVJR0U2b0JBbTRIK3lMM0NSWHM5eUlxQi9zaTl5a1Y3QWNUQmdBZ3AwWUdFd1FBQ09HMEJoTUVBQVJ2ZHdZVEJnQ0NiYnZoQmhNS0FRSXFCL3NpOXdnVkV3RkJDS2ozQnNRSEV3SkFBcWMxQmhNQkFRRDdJcndWRXdDQkFLakRxbE1IRXdBaEFxajNJZ2NUQUlBQ2JnY1RBSUFJVXdZVEFTa0lUd2MxOXdRVjVBY1RBQWdDNFFZVEFCQUNUOE1IRXdBcEFtNEgreUwzQkJVVEFBVUFwOE9yVXdjVEFBTUNwL2NpQnhNQUJBSnZVMnZEQnhNQUNBSnZCeE1RQUJEN0J2eVJGUk1RQUVEaHN3WVRFQUFRTlFZVEFCQWcrQllFRXdBUWdLZXFCaE1BRUNCdkJnNzhGZzZyS2dvU29Qa0dFOWd2SFVyOFBSVVQ2Q2tLRHF1VEN2c3crSXdoSGFzcUN1L0pFdmRWeXhQY0x4MDI5MlRSSFYvOURSVVQ3Q2tLRHFzcUN1NzNETElLT1BkYkZWTUtRQVpPTms3Z0JWTDlCQlVUN0NrS0Rxc3FDdTRtQ3FENUJoUGFMeDA3MmhYV0JoUFd5T0FGRStyM0RCMUUvUVFWS1FvT3F5b0s4K29TOTJ6aHhPRVQzaThkU3Z3OUZSUHVLUXI3Zy9pUk1SMnJrd3I3aGZrT0lRcXJLZ3IzQjhrU29Qa0cvRTMza3hQY0x4MFQ2a1BxOXhBZGt2emFGU2tLRHN2N2FkRDNPWGIzWDkzMzg5V0xkeEw0bWprS0UrcnVIYTlSQ2hQc0xSMnF0L3VWK1ZvRit3UUdTdnc5RlJQeUtRb09xeW9LMk1IV3dSTDNoc0hYd1JQZkx4MUsvRDBWRSs4cEN2dHArTkZZSGFzcUN1MHBIZmM3SngwVDJ5OGRFOWY3QTlza0NoUGJJaDBUMXlZZEUrdTUvSTBWS1FvTzkrT0wzZmNOM2FyYjkzemRQTm9TK0lEZkUvVDRKU0FkL0JEOVdnWHFCdlAzWHdYM3BQdGYrRHJkKytiM2Z2ZlMyL3ZTOTN6MzN0MEcvUmo4UFJVVDdQZEk5KzRGdmZ2dUJnNjE0Z3IzMStKUzRoUDA1eGIzcndiM0wrSFM5eFhuVWNncm1COFQrTmladXNIYkd2Y1hPTXo3UEI3N2h3YmYvUWdWOTRMM1d3Y1Q5TzNEWHo4L1ZHRW9IL3RiOTlRVjkzYjNNd2NUK1BjQ3dXVS9RMUJqSWg4T3l5TWRBYnpqWUIwT3l5TWR5dmNXQWJ6allCMzcxZmpKSVIzTEl4M0s5d3dCdk9OZ0hmdzkrVUVuQ3N0SUhhUGJVSGI1SnQwU3ZPUDNvY0VUVC9razkzUVZNWkVGRTFlMkhmdFc4dnN3OTBsNUh4UHZiR2xTQ2hOUFltVUZFKzlGSForaEJSTlA5eTZSNmU2azl4c0lEc3ZmQ2hQb2N4MzhPdmpKRmRZR0U5akk0QVVUNkNBS3l5TWR6dW9Cdk9QM1V1RmdIZnZkK00waUNzd2xDZ0huMy9nWTR3UDN5eUFkKzIvOVd2ZDFCdmRyOXd6M0UvZDM5M2o3RC9jVSsyNGYreHY5Q0JYNHRzOEs5eTJKQ3N5SUhRSG4zL2dZNHdQM3l5QWQrMi85V3ZkMUJ1Y2QreHY5Q0JYNHR1c2QreEw1enljSzl5MkpDbWtzQ25jZERtbWtDdnVUMnlFZGFTd0syL2NNZHgzNy9QZGNGVk1LUUFaT05rN2dCUTVwTEFyYkpncm4zeFAwT3gzNytkc1YxZ1lUN01qZ0JSUDBJQXBwTEFyZzZoTG4zNkxoeE9FVCtqc2RFLzc3NXVBVjRlbzFCdmNqTENJS2FTd0szK29CNTkvczRRTTdIZnVjM3lJS2FhUUsrK24zWmlFS2FTd0s2OGtTNTkrWTk1TVQrRHNkRS96NzhPc1Y5NVBKKzVNR0RtbjdhZEQzSk4zM2Z0djNmTjBTNTkvM2hUa0tNTUlUZVVrZCtDSUhFL3BuWWxJZEUvd3RIUk41cXJjRml0MzhCZmQrOS9IYisvSDNmUGY5M1FZT2FTd0syc21TeVJMbjMzQW5IUlAwT3gwVDZ2d1kzQlZnQ2hQMUloMFQ2aVlkRHVCNzNmZUYzZmVUM1FINDIrUUQrTnY0R1JYOHFnYU1XZ1g3a0piM0hTUDNMeHYzVC9jWTl5MzNidmQxK3hMM0p2dFYreG43QXpmN0dHSWY2SUlGNnJEUnUrQWI5dzd0K3dIN0pwVWYvRTg1RmZoT0J2c3RkVGd6K3hBYit3bys0L2N0ZVI4T1hLQjI5OGZjOTRUZGVBcmY5OGYzNjl6NzYvZUU5LzNkQnc3U2U5RUtFM3BHSFJPOFFSMFR1bWdLRTNxVCt3b0ZEdEppQ3N2SkVyemo1OHYzcXQxSnpSTjhnRVlkRTcwQVFSMFR2SUJqQ3Z2Kytpb3dDdEo3M1Y1Mjk2ajFIZDFKelJONmdFWWRFN3NBUVIwVHVvQm9DaE42Z0pQN0NnWDcrZm1wRmRZR0U3YUF5T0FGRTdxQUlBclNKQjIzMFFvVFBVWWRFMTVCSFJOZGFBb1R2WlA3Q2dYNzBQdFNGV1VLMG1JS3p1b1N2T1AzVXVIM010MUp6Uk4rZ0VZZEU3OEFRUjBUdm9CakN2dWMrYTBpQ3RKaUN0ckpFcnpqOVBlVDFkMUp6Uk44Z0VZZEU3MEFRUjBUdklCakN2dngrYmtvQ3MyZ2R2ZlIzZmZMZHdIbjMvZnkzd1BuRnQvMzBmZnkrOUhmK1ZvMys4djc4dmZMTndZTzkzMmdkdmZWM2ZjVDNUbjNTQkwzTWQvNEZ0OFQzUGN4K1ZvVkUrd3BTZ2NUM0RuTS9LYmY5OVg0RnZ2VjMvaW16QWNUN04xS0J4UGM3VGNIRSt3cC9CWUhFOXp0Qi92SEJQY1QrQmI3RXdjT3phQjI5OUhkOTh0MzdpWUs1OS8zOHQ4VDl1Y1czL2ZSOS9MNzBkLzVXamY3eS92eTk4czNCdmNQMmhYV0JoUHV5T0FGRS9ZZ0N2d0RvQ1VkZUFyZitWb0hEdmNyZTkxZWR2bGFkeExuMzkzaDk2N2ZFN3puSUIwVGZQMWEzL2xhQjkzOGRCVVR2SzRLRHZ3RHhnby8yaUVkL0FPZ2R2bGFQd3JuM3hQb1J4MzdSdG9WMWdZVDJNamdCUlBvSUFyOEE2QWxIZlBxRXB6aGdOOTc0UlBvUngwVDlQc3ozekVkL0FPZ0pSM3k2aExtNFRiZkUraEhIUlB3TnQ0aUN2d0R4Z3I3TnZkbElRcjhBNkFsSGZjSHlRSG4zd05ISGZzOTZpZ0svQVA3YWREM09TVWRFcnM1Q3ZzTTN4UGtTUjBIRStpb1VRb1Q4SUoxZFlCNkczVittcCtmbTZPWm9COFQ1S3EzQllyNVdnWU8vQU9nSlIzdEtSMXF5TXZmeThnVDVFY2RFOXo3WmRza0NoUG1JaDBUM0NZZERtTjczZmtZZDVrS0RtTjczZmtZZCs3M0Zwa0s5N2I0dXlFZFkzdmQrUmcvQ3M3aDk2N2ZFK3loQ3ZkUStMc1YxZ1lUM01qZ0JSUHNJQXFhb0xjZERwb2tIZHkzSGRmK0dDRWRVb3ZkK1FoM2poME9Vb3ZkK1FoMzd2Y1dqaDJUMmlFZExvdmQrS0x4SmZjV0V1ZmZFOUQzRGgzM1BvWWRVcjhkZEl2ZCtRaDNBZmNTM3dPaCtBWVZyMEhQcXdYNzNQaE0zZnY0OTdFSDl5M1NaOWI3Q1ZRRjk1QTMrN2NIRHZlRWkrZEVkdml6OXp1TGR4TG4zL2lnM3hOY1V4MFRiUGl6Qi9kaS9MTUY5d1FHOTJMNHN3WDhzOS81V3ZzSkJ4T2MrM244L3Z0NStQNEZEdkNMN2oxMitPMlNIUk5jVXgwVGJQanRCL2Z2L08wRjl3NzVXamNHRTV6TENnN3c5d29kOXhhNUhmY1IyaUVkOFBjS0hmY011UjJnZXgzd3FSM3c5eElkN1NrZDU5K2xKeDJrM3hOYVFGTWRFMnBBYlIwR0U1ZEF5d3FFMnlRS0UxckFJaDBUVjBCNkNoT1hRRkJsV1R5S0h3N3pJeDBCdk9QNFprMEtEdk5yQ3ZkYStFY2hIZlBmQ3ZobTR4UHMrQWJRQ3ZkNSt4RDNJL3RaKzFuN0VQc2orM243ZC9jUSt5UDNXUi83ZmZnR0ZmZE4zL1QzS2ZjcDN5TDdUZnRNTnlQN0tmc3BOL1AzVEI3cytFY1YxZ1lUM01qZ0JSUHNJQXJ6SXgzUDZnRzg0L2NJNGNQaDl3NU5DdmNJK0V4SkN2TnJDdmNGK01raEN2TnJDdmNtK0VkNUhmTWpIZHJKQWJ6ajlQZVQ5VTBLOVBoWEtBcjNBU01kQWNIaitHYmpBL2dMMEFyM0IyenBVc3NmMU80Rk9nWmlWQVd2V1UyZVF4djdXZnNRK3lQN2VTQ25NcjFMSHpuN0FnWGRCcnJLQldLL3pYWFpHL2NOSGNHNGZYR3ZIdnZaL0VvRmI3dDh5dGdhNHZ1RUZmZmIrRThGclZxZFJ6VWErMHczSS9zcFQxcWNxbVllRHZNakhjbkprc2tTdk9QTkp4M040eFBwcWgwVDNjMzRTQ1FLRStzaUhSUGRKaDBPK0ZWNzNVbmQ5MzdiOTN6ZFNkMFN2T1A0WnVJMzN4TzErQVo3RmZUYXR0Sy9IeE4xS2ZnNzNRY1RkdnZuOTM3MzA5djcwL2Q4OTkvZEJoTjEvRE1xQmhOdTBWYzh0aUliKzJEN0NmczUrMk1mRTdYN1l2Y0sremozWHg3N2ZmZ0dGUk91OXpQWTl4ZjNNUGN3MlBzWCt6UDdNajM3RnZzdkhoTzEreTg5OXhiM01oOE9tS0IyOTZuZDk2SGRBZWZmOStIakEvZnVJQjM3a3YxYTMvZXBwUXA2b0hiM0tkMzNvZDMzRkhjQjU5LzN3K01EOTBRVzl5bjNId2YzTStqZDl4MzNHaTdiK3pNZit4LzNGRGY5V2diZjkzc1Y5NkgzSHdmM0FjSmVOREZVWFBzQkh3N3pJeDBCdk9QNFp1TUQrQVo3RmJtMGs1cXdIOFkvQmVNR05mY0RCZVBNdS9jSDl4Z2E5MlA3Q2ZjNSsyRDdZUHNKK3puN1kvdGk5d3I3T1BkZkh2dDkrQVlWOXpQWTl4ZjNNUGN3MlBzWCt6TWthVEJKVng0Lzd3VXpCdkQ3RndXRWRuU0hjUnY3THozM0Z2Y3lIdzZ0b0ZVS1Z3b09yVjRLOXhaWENsRDRPQ0VkclY0Szl3eFhDdnMzK0xBbkNxMGtIZHhWQ2xjS0lmekRJUjJXZjU0ZERwWi8zZmpTM2NyM0ZwOGQ5eWo0d1NFZC9GZk5IWlovM2ZqUzNjcjNEQUhWNC9mbTR3UDNKL2Q4RlRPRkJmc2lsdmNHSy9jd0cvY1U5d3pROXhiM0FDYkwreGV2SDIwS1JFMWxML3NGUjgzcmVSNjMrVGtuQ3BaSUhXRDNLMUIyK1NMZEV0WGo5MkhCMnVNVFY0RDNKL2Q4RlRPRkJSTlBnSlg3RmVvdzl4cDdDQlB2Z0dobFVnb1RUNEJpWlFVVDc0QkZIYU9sQmZjUmp2Y0gwUGNUR3ZjQUpzdjdGNjhlYlFvVFY0QkVUV1V2K3dWSHpldDVIZzZXZjkzNDB0M0tKZ3JWNC9mbTR4UHM5eWYzZkJVemhRWDdJcGIzQml2M01CdjNGUGNNMFBjVzl3QW15L3NYcng5dENrUk5aUy83QlVmTjYza2V1ZmpCRmRZR0U5ekk0QVVUN0NBS2xpUWR1NTRkNVB3NklSMmtpOTMzcE5IM1h0OEI1OS8zNXVFRDkvRGRGU001OHdiM0x1M2w5eGIzQ3lqYit5ZVFIL2RhOTFRRjZmeGcvVnJmK1FiM29nZjdWUHRPQlRRSDFJd0Y5d2FOMUZZMEdqcExWaVVlRGxHZ3VRb09VYUIyK1FqZDJ2Y013d3I4SnZldEp3cFJTQjNHZHZrSTNSTDNpOStGd1JOODRBcWRCbDliQlJQNlVnb1RmR0psQlJQNlJSMFRmSzZ4QlpuNUNQZHhCZzVSSkIzY3VRcjcrdjNHSVIyL0x3b0IyTi80QWpvS0RyOXZDdnZDK0xFaEhiOHZDdTdKQWRqZnRjdjNtRG9LL0N6NU1qQUt2eThLN2ZjTWFLNFMyTi80QXQ4VDdGa0svQ2Y0c1JYV0JoUGN5T0FGRSt3Z0NyOHZDdkxxQWRqZnplSEQ0ZE02Q3Z3VStMWkpDcjl2Q3Z3WCtUTWhDcjl2Q3Z2MitMRjVIYjh2Q3ZjR3lRSFkzOFAzazhJNkN2d2UrTUVvQ3IvN2FkRDNGTjM1R1hjUzJOLzNMamtLdTk4VDlzRWRscFdMakpVZWRIRlNIUlA2TFIycHRRVVQ5dldzeWVYM0V4b092eThLMThIV3dRSFkzK2JCMThIbU9ncjcrL2oyRlZlMFpMNjl0Yksvdm1HMFdWaGlZbGdld1l3Vm5weWRvSitkZVhoM2VYbDNkbnFkbng0T3Z5OEs3TW1TeVJMWTM1c25IWnZmRStsWkNoUGQvRWI0c2lRS0Urc2lIUlBkSmgwT3E0dm9RM2I1V25jU29Qa0dFM0NnSUIzM2x2MWFCZmNDQnZlVytWb0ZMQVlUc1B0dS9QMzdiL2o5QlE3M3Brc0tFcUQ1OXhOd1Jnb1RzUHNtL09mN0tQam5CU3dHK3lmODUvc24rT2NGRHZlbVN3cnU5eFlTb1BuM0UzaEdDaE80VHdyM3g5b2hIZmVtU3dydUpncWcrZmNUZEVZS0U3UlBDdmRpMmhYV0JoTnN5T0FGRTNRZ0N2ZW1Td3J6NmhMMzVlSEU0Uk44UmdvVHZFOEs5M1RmTVIzM3Brc0s3dmNXRXFENTl4TjRSZ29UdUU4SzkzTDNaU0VLZzFZZHB2alNBL2lMSUIzN1QvdXkrMUgzc2dVcUJ2ZDgrL1g3Zi92NUJlc0c5MVAzdGZkUys3VUY3QWI3Zi9mNDkzMzM5Z1VPZzFZZDk2WGZBMGdLRG9PZUN2Y3oyaUVkZzZCMitWby9DdmVsM3hQb1NBckUyaFhXQmhQWXlPQUZFK2dnQ29PZ0pSM3o2aEwzV2VHQjMzcmhFK2hJQ2hQMDE5OHhIWU9lQ3RYM1pTRUtnNkFsSGUwcEhmY295TXZmeThnVDVFZ0tFOXltMnlRS0UrWWlIUlBjSmgwT0xTVUtBYWI0ZTFzS0RpMGxDdHIzRmdHbStIdGJDdmNOK1ZjaEhTMklIUUdtK0h0YkNwejV6eWNLTFNVSzN1b0I5My9oV3dyM0JmbGJJZ3BTdngzd3FSMnlvRlVLWVIwT3NsNEs5eFpoSFZuNE9DRWRzbDRLOXd4aEhmc3UrTEFuQ3JJa0hkeFZDbUVkK3dMOHd5RWQrMklsQ2dIM1FkOEQrQXNnSGZ2VU9mY0svTGI3RURsM0NnWU8rMktuQ3Z0WDl6VWhIZnRpaUIxb3JoTDNRZDhUNkVJZCs3ejNOUlhXQmhQWXlPQUZFK2dnQ3Z0aUpRcmY2aEx0NFlEZmV1RVQ2RUlkRS9UN3FmYzZTUXI3WWlVSzN1b1M5MERoTnQ4VDZFSWRFL0Q3WC9jNUZlSHFOUVlPKzJLbkN2dXM5N2NoQ3Z0aUpRcnF5UUgzUWQ4RCtBc2dIZnZVT2ZjSy9MYjdFRGwzQ2diN3RQZEZLQXI3WXZ0cDBQY2szZmkyM1JMM1FkK0dPUW9UY08wZEJoUGs5NmhSQ2hQb0xSMnF0d1hkQnhOdyt4RDR0dmNLQmc3N1lpVUsyY21TeVJLN3lGWEJ5OS9MeUJQbVFoMFQydnZiOXpZa0NoUG5JaDBUMmlZZERzdDczZmRtM2ZleTNRRzg0L2hHUlFvT3kzdmQ5MmJkOTdMZHk4a0J2T1BueS9lcVJRcjhQdmpFTUFyTGU5MzNadlVkM3hQMmpBcjhPZmhERmRZR0UrN0k0QVVUOWlBS3l5UWR0OTMzWnQzM3N0MEJ2T1A0UmtVSy9CRDh1Q0VkeTN2ZDkyYmQ5N0xkenVvQnZPUDNVdUgzTWtVSys5ejRSeUlLeTN2ZDkyYmQ5N0xkMnNrQnZPUDA5NVBWUlFyOE1maFRLQXFyS2dyczhoTDNYUFMvOHhQZUx4MDk5eFFWYnFMS0NuUjFiUjZZL0wwVkUrNHBDaW40dlJXTEhRN0xJeDNKN3dHODQvZEo4Z056SGZ2bStQb1ZiYUYzcWFpaG42bW9kYUJ1YlhWMmJoNE9hU3dLMmZJUzU5K1M4OER6RStnN0hSUDIrL2IzRlZvZHFFUUtibTExZFcwZURta3NDdHJ2QWVmZjVQSURPeDM3cFBjVktoM1NZZ3JKN3hLODQvZEo4dmNxM1VuTkUzU0FSaDBUdFFCQkhSTzBnR01LKzZYNTJpb2QvQU9nSlIzczhoS004MzdmZWZNVDZFY2RFL1Q3US9jVVdoMWRIUjRPL0FPZ0pSM3Q3eExlOGkzZkUraEhIUlB3TG1VZER2TWpIY2p5QWJ6ajcvTy85UFJOQ3UvNGVIWWR2eThLNi9JQjJOKzk4Ny8wd2pvSy9DVDQ0dFVkcWFoRUNtNXRkSFZ0SGc3M3Brc0s3UElTOTlYMHYvTVRmRVlLRTd4UEN2ZGs5eFFWYnFKMXFLbEVDbTF1MHgyRG9DVWQ3UElTOTBuemY5OTQ4eFBvU0FvVDlNZjNGS01LTFNVSzJlOEI5M2Z5QS9pTytRWVYzL3hpT2ZnQkIvd1MvTEVGTlBoNzNmd2NCL1Q1aUNvZCsySWxDdGp5RXQzemZ0OTQ5QlBJUWgwVDlQdTU5MloySGZ0aUpRclo3eEwzTi9JdTN4UElRaDBUOFB0bzkyWXFIY3Q3M2ZkbTNmZXkzY252QWJ6ajkwbnk5eXBGQ3Z2bCtIUXFIZmhpaTkzM0RkMzM2OTBCK2QzZkE2QVc1d2JTOTE4Rjk4QUcwdnRmQmVjRys1WDVXZ1g3QkFaSy9EMFZLUXIzbXZ1eHhRcjRkbnZkU2QzNHR0MFMyTi80QXQvM2p0OFR2RmtLRTN6M0V2dU14UXBOZmdwTmZRcjNCZmhySVIxTkxRclBRd3FTeS9kYmx4MFR0SUNTK093d0NrMHRDczczREg4S2xQampKd3BOTFFyTzl3eG9ybXNkRTdTQU1CMFR0Z0F4Q2hPMUFEWUtFM1VBUGgwVGRJQTlDaE8wZ1BzRk9Vb2tkaCtWQ3BiNGF4WFdCaE9zZ01qZ0JSTzBnQ0FLVFMwSzArb1N1dUdwNGNUaGxtWUtFN1JBTUIwVHZRQXhDaE8wZ0RZS0UzU0FQaDBUZEVBOUNoTzBRUHNGT1Vva2RoOFR2RUNWQ2hPMlFLbjRjREVkVFgwS3AvanRGZVg3RmdYTUJrdjNGZ1VPVFMwSzNrTUtuL2VUaHBjZEU3d0FuL2g3S0FwTisyYlE5eFhVVHRSWGRxRjIrR1BaYXgxQXo0N0ZFMFpBTUIwVFJ3QXhDaE5HZ0RZS0V3NkFpbE91ZHJhR0NCT1dJR2xrVWgwdEhSTVdFS2kwQlkwR0V5WVExQWNUSmtDTUhSTkdRRThkRGswdENyakIxc0VTdXVIQ3dkZkJxbVlLRTc4Z01CMFR2NEF4Q2hPL1FEWUtFMzlBUGgwVGZ5QTlDaE8vSUU4ZHd2aXdXQjFOTFFyTktSMjY0WGduSFY1bUNoTzBJREFkRTdTQU1Rb1R0RUEyQ2hOMFFENGRFM1FnUFFvVHRDRDdCVGxLSkhZZkU2b2d4ZmVBSkFvVHRRQWlIUk9xSUNZZEU3UWdudnhzaEIwTzk3eC8wRWJaOTBIVTl5elpFcnJoOTZUcEUzekQrQW9WNUlRRnhKaTdzODBiMnI1ZU1Jd2YrekZ2QmZzSGRqZHYrd01hTGVCVDlJa2U5bzNTd1ozckNDeXYybEwxRy9Ia3llK3FIMDRLTlVkbVMySWZ6bWxJclRVYit3STJTQ1oySHhPODJQdCtGZGpOak5xYUhrb0tQWWRtdDdZYStBVDNRTlFLYVd3ZDl6eDNFdURXUVA4QVM0QUEvLyswZ0FEZDk4TGhFN1BnSUIwVGMvMWFCeE4xMVFZVHRZN1pCVk9weEduZEcvY3QwdmNXOXlmM0owVDNGdnN0SHhPelBWTnRWVzBmOTVBSEU3bUUvRkVWOUxqczl3SDNBN2NySVNSZksvc0Qrd0ZlN2ZBZURqWWpDZ0c2NFFOT0hRNDJJd3JPOXhZQnV1RURUaDM3UGZlVUlSMDJJd3JPOXd3QnV1RURUaDM3cGZnTUp3bzJTQjJuMTFSMitHN1pFcnJoOTFUQkUwL1pIZnN2M0NMM0ZId2ZFKzlvWlZJS0UwOWlaUVVUNzBVZG82YjFrdUhUbS9jR0dUU1FCUk5YUDM5UlhrY2JLRkxXOXhEM0VNVFc3aDhUVDh6RVlrV1hIdzQyOXdBZEUraE9IZnVpOTVRVjFnWVQyTWpnQlJQb0lBbzJJd3JTNmdHNjRmY0Y0UU5PSGZ0Rjk1Z2lDbWxzSGZjOGR4SzY0ZmZDS3gwVHZNb2RFN29vSFJONmpqMEZFM3pWQmhPNS9CVDNuVjRkNlFwN0NnNWp1aDMzQWV2Qjk3WDdGUGRIMHFVWWRja3FhRmE3UTYwcmxSbDNQOFdHdm5xMWNSbjdBMk9oVFBjbndMcFZwa0NNTXhtYUN2Y0tiQjNPOENiM0ZoSzY0ZmZDS3gwVHRnREtIUk8xQUNnZEUzVUFqajBGRTNZQTFRWVR0SUQ4RlBlZFhoMzNBYmdxSWlaZUtmc0Jld3I0Ti9mc0Zjc0dFNjRBNXZjV0JUQUdEcDVzSGJiVFEvY1JFcnJoOTFiM1VqbmRhaDFBMWhPdEFQaVpJQjA1QmhPMUFGWUhFN1lBK3dBR0U2NEFRd2NUclFEM0FQc1QzQjBUcklBb0hSTnNnSTQ5QlJOdEFOWDQzY2tHRTdVQTAwMEgvQlQ4SEY0ZEhoT3NRT2tLSHhPMUFQc0RYK3Z5SHc1R0xCMXlIUTVHb3gzN1JQZTdJUjFHTEIzTTl3eHlIZnVzK0RNbkNrWXNIY3dtQ3JyaUUvUzY5NTBWK3p6cSt3SDNKL0hreWUrcUhrNEthUW9mNUhVSys2bjN1eFhXQmhQc3lPQUZFL1FnQ2tZc0hkSHFBYnJpc2VIRDRRTk5IZnVXOThCSkNrWXNIZERxQWJyaTl3VGhBMDBkKzB6M3Z5SUtScU1kKzVuNFBTRUtSaXdkM01rU3V1S205NU1UK0UwZEUvejdvZmZMRmZlVHlmdVRCZzVHKzJuUTl4alo5MEhVOXl6WkVycmk4TTlIOXpnVCtycjNuUlhsQ2g2VUJuRnVCWDRkRS93dEhhcTMwS0hDd2FMVkdVNEtFL3BwQ2gva2RRb09SaXdkeThtU3lSSzY0bi9JOTJqSUUvVzY5NTBWNVFyeDVNbnZxaDVPQ21rS0h4UHIxdmZySkFvVDlTSWRFK3NtSFJQem1mdTgxQXBHZjluM0xOVDNRZGtCK0VYaUEvaWM5NTBWOXp3czl3SDdKeVV5VFNkc0h1T0ZCY09qdjYzRkcrZkNTL3NCa3gvOEZnYU1aZ1g3VDVUeVBQY0tHL2NuNnZjQjl6d2YvQk5jRmZlNkJpdCtWRk0yRzBsUHMvY0VmQjhPKzMrZ2R2aGQxUGNBMHdIM0hhZ0tEbWcrQ2hLNjRmZkIzVHJjUE5vVDlnQlpIUlB1QVBoeUJ4UHNnRHdHRS9TQWNnb1Q5Z0J4Q2hQMUFITUtFL1lBTEZMVzh4OE9hRDRLNzBNS2xzdjNkcGdkbHZoWk1BcG9QZ3J1SmdxNjRmZkIzVHJjUE5vVDlZQlpIUlB0Z1BoeUJ4UHRJRHdHRS9VZ2Nnb1Q5WUJ4Q2hQMVFITUtFL1dBTEZMVzh4K2I5OWdWMWdZVDg0REk0QVVUOVlBZ0NtZytDdmNLOWhLNjRmWDE1SmtkOWZmcjBncG9QZ3J5NmhLNjRmY0I0ZldaSGZjQjk5d2lDbWcrQ3ZjSFF3cWo5NU9obUIyajkrZ29DbGVnZHZoazJmYzhkd0hnM2ZlVTNRTzhIUTVJb0hiNFpObTIwMFAzRVJMZzNUbjNWZmNsM1JQYTRDQWRFK3BXVHdjVDJrUEgvTjNKSGZjVkJ4UFc5d01HRStiVEJ4UHErd01HRTlyQUJ3NVhvSGI0Wk5uM1BEOEs0TjMzbE4wVDlyd2QrMFhhRmRZR0UrN0k0QVVUOWlBSy9CVENIZndVT1IwQjROMEQ0UGltRmZ5bTNmaW1Cdzc4Rk40ZFFOb2hIZndVb0hiNHBqOEs0TjBUNkVBZCswWGFGZFlHRTlqSTRBVVQ2Q0FLL0JRNUhmUHFFcFRoZ2QxODRSUG9RQjBUOVBzeTN6RWQvQlRDSGZ3VTNoMzdOZmRsSVFyN0hQc3ExTzFNSGZMcUV0N2hOOTNSOTBzNDRUYmRFL1NBUUIwVCtnQTMza3NkOXk3OTdyTUs3L2xHSWdyOEZEa2Q5d2ZKQWVEZEErRDRwaFg4cHQzNHBnZjdQT29vQ3Z3VSsyblE5emxNSGZMcUVyRTVDdnNMNFRmZEUzSGcrS1lWL0tZSEUvU2xVUW9UK0MwZEUzR3F0d1g0cGdjVGNqZmVJZ3I4RkRrZDdTa2RZc2pNM2N6SUUrUkFIUlBjKzJUYkpBb1Q1aUlkRTl3bUhRNzhEamNLOHVvU2h2ZExOK0UzeFIwMytQd2lDdndPTndvU2h2ZExPZDBUMElJZEUrQmlRcjBHRTlEa3Q4VGxIdzc4RGpjSzd2Y1dFb2IzU3puZEUrajNSb2dWK0trNS9La0hYWFZ2WlI0VDhHSkN2UVlUNk9TM3hPVWZRUGo0SVIzOER2c3ExUGp6UHdxRzkwczUzUlBrZ2gwVDZHSkN2UVlUNU9TM3hPVWYrMFg0K0JYV0JoUFV5T0FGRStRZ0NtR2dsd29PWVNRZDNKY0t0UDRZSVIzNzhJdklIUTc3OEl2VStSRjM3dmNXemgwLzJpRWQrMzZMMVBpcjhTWDNGaExpM1JQUTF4MnFoaDM3OExJZCs1R0wxUGtSZHdIM1FkMEQ5MEVnSGZ2QUJ6Vmtxa25DcEFYN2VBZE90R0xLSHNUVVhnWjBnSldpSC9lYUIrT3piTTFTY1FYM21nY085NGVnZHZocDFIOTNYQjMzZjkzM2Z0MFRybHNkRTg3cHZjWGR5N0pTTEI3NzBkMzMwQWZzdThQZXpMRlVLaDc3MGQzMzZRZjNFMDNWSVRoVFkwTjBIdEowVkxRL0d4UFdRVlJtU25NZkU3YUk1UVVPVjZCMitHblVmM2RjSGZlVTNST3NXeDBUekdJZEU5UndIUk8waU9ZRkRsZWdkdmhwMUg5Mzd2Y1drUXJ2MmlFZFY2QjIrR25VZjNmdTl3eVJDb2Q3SFZlR0NsZWdkdmhwMUg5MzdjbVN5VndkWkNjZFpOMFRza0JiSFJQU1FHSWRFOVJBY0IwVHRFQ0k1Z1VUeVVCcjJ5UUtFOUtBSWgwVHlVQW1IUTVSalFwUmJBcjNEZmZzSVIxUjl3QWQ5OHpoRSt4V0NwLzM3QlhXQmhQY3lPQUZFK3dnQ2xFakN0UHFBYnJoc3VIRDRiamhBMVlLc3ZmeFNRcFJiQXF2K0c0aENsRnNDdEQzN0hrZFVTTUsza01LcC9lVHFPRVQ5RllLRS95bjkvd29Da0VqQ2dHNjRmZk00UU5wSGRSNXlHdTZIOXpyQlRZR1kxc0ZxbU5abkZFYmFRcEVuRTZxWFI4NEtBWGdCclc5Qld1enZubkdHL3N3OTZrVjl4REUxdTZ4cTRCMXBCNzdlL3VuQlg2cGhLKzJHc1g3T1JYM2ZmZXBCWmx0a21WZkd2c1FVVUFwWTJ1WG9YRWVEbEVqQ3MwcEhicmhnQ2NkZ09FVDZXa2Q5endzOXdIN0ovSWRIeFBWK3p2NUFpUUtFK29pSFJQVkpoMFQ2WmI3N1JYM0VNVFc3dTNGUVBzUSt4QlJRQ2tvVXRiM0VCNE85OTBzSFFHNjRmZk00Z1AzdFg4VjQ5R3l6N1FmUjdUUlpPTWI4ZVRKNzZvZlRnb3pSV1JIWWgvUFlrV3lNeHQ2SGZnbGRRb09hZUVLNE5SQy93QkxnQUQvLzdTQUFOMzN3T01UNCtEN0toWGQ5M1lHVXFqRGJOVWI5ekwzRlIzN01oOFQ1VDVSYWs5dUh4UFZpTndGRTlOQkJoUHAxUHVkRmZDNTdmY0E5d0s0S3lRa1hpejdBdnNBWGV6d0hnNXAreFYyOXg3WitDWFc5engzRXVEV1FOLzN3T0VUOXVBZ0hmM3czL2RzQjFxcndXN1hHL2N0OXhVZCt5MC9VMjVYYlIvM2pRY1Qrb0w4VVJYMHVlejNBUGNEdHlzaEpGOHIrd1A3QUYzdDhCNE9hZUVLdXVQM3dOMXFIVUxVRSt6NG1mc3FGUlBjK1R3SEU5cEJCaFBxaURvRngyNVJyRDRiK3pKNUN2Y3lIeFBzMWNPcXhLZ2YrM1lIKzhENE14WHl1T3YzQWg0VDZmY0F1U2ttSmwwcSt3QWZFK3o3QWw3cThoOE8rNCtnZHZoZTA5d0tFOURqSFJQZ1JtTnNTSGtmaU8wRkR2dVBvSGI0WHRQYTl4WndDcFRhSVIzN2o2QjIrRjdUMnZjTWNBb3NleDM3anlRZDNIYjRYdE53Q3ZzUy9XUWhIU0Ivb1IwT0lDTUt6dmNXQWNqZzk0N2hBL2dXK0FNVjRaRUY4WG8xemlFYit3MDVTeWFNSHlidmIrMTBIbVFkK3dHVDYwYjNFUnZ3OUxqeDhqU3QrdzJpSDNRS3g4ZG5UcGNlK3pIM2hpRWQvRmZOSFNBakNzNzNEQUhJNFBlTzRRUDRGdmdERmVHUkJmRjZOYzRoRy9zTk9Vc21qQjhtNzIvdGRCNWtIZnNCayt0Rzl4RWI4UFM0OGZJMHJmc05vaDkwQ3NmSFowNlhIdnVaOS80bkNpQklIV0QzSjFWMitHM1pFc2pnOXpMQnNlRVRUNEQ0RnZnREZlR1JCZkY2TmM0aEcvc05PVXNtakI4bTcyL3RkQjRUVjRCa0hSTlBnSklxMkVyemZnZ1Q3NEJvWkZJS0UwK0FZbVVGRSsrQVJSMmpwUVh0anU2NDdocnlOSzM3RGFJZWRBb2VFMCtBeDhkblRwY2ZEaUFqQ3M0bUNzamc5NDdoRSt5a0hmdVc5NFlWMWdZVDNNamdCUlBzSUFvZ0pCMjdvUjM3YWZ6QklSMWgyZjhCQklBQTJmOEE0NEFBRXZjNzBFYmFFOUQzd05rVjR0cTE0T2c2dGl5SkgxK0tCZG9IdDRvRjRJbTh4TkVhdzFTNlJCNFQ0RDVWV2k0Zi9JbzUrSW9IOXgvbTNQY085dy9pUS9zQlEyUk5SblVlNDNUTFJ5d2EreGY3QzBmN0dSNUwyUVlPKzRHTG13b08rMUU0SGRpMllQY1dFdmNlM1JQbzl4NzVIaFg3REQxQzJmdlJCekcvV2VrZTE5US9CbUYxb2JnZjk5SDNJZFQ3SWZjTUI2NWdGY3dHRTlqbDl4WUZNQVlPKzRGSUhiSFUrQlRVRXZjZTNjTEJFMzczSHZrZUZmc01QVUxaKzlFSFI2bGV3bmtlVjFLbVp3VzNsYXg3YWhvVC9vb2RFMzVpWlFVVC9rVWRycklGaXBHUWk1RWIxOVEvQm1GMW9iZ2Y5OUgzSWRUN0lmY01Cdzc3Z1NRZHg1c0tQLzNjSVIxWk54MFM0dDMzanQwOTJSTjROUjBUdURNS0U3UXVDaE4wTVFjT1dXNEsrenY0OVNFZFdUY2Q3OGtTNHQxNHkvZGgzVDNaRTNvMUhSTzZNd29UdVM0S0UzVXhCL3VsK1hZd0NsazNIZTczREdpdUV1TGQ5NDdkUGRrVGRqVWRFN1l6Q2hPMUxnb1RkVEVIKzZINDlSWFdCaE91eU9BRkU3WWdDbGszSGZQcUV1TGRqK0hFNFp5VUN2dU8rUG9WNGVvMUJoTzdBUGNqTENJS1dXNEsrNUg1ZHlFS1dXNEsrM0Q0OVh3ZHcvc1dJUjFaTngzM0I4a1M0dDJGOTVPTTNUM1pFM28xSFJPNk13b1R1UzRLRTNreEJ4TzArNWo1QlJYM2s4bjdrd1lPV2Z0cDBQY1kxR04yK0taM0V1TGQ5MTg1Q3ZzSjNUM1pFOWtBTlIwb1ZGVTNQV3JCN2g3MzBEbjc2UWY3Qk1VeTl3b2VFOWlBTGdvVHVJQXhCeE82QUtFR1oySlNIUlBjQUMwZERsazNIZGpCMXNFUzR0Mm93ZGZCc04wOTJSTjhnRFVkRTd5QU13b1R2RUF1Q2hOL1FERUgrM1g1T2xnZFdUY2Q3U2tkNHQxZHVWMG5IV1hkUGRrVGRFQTFIUk8wUURNS0U3UWdMZ29UYWlBeEIvdkErUFlWRTZsQVlBb1R0SUFpSFJPcVFIb0tFMm9nVUdWWlBJb2ZEaVdMNFVwMitLWjNFcUg0ZmhOdytKVDRwaFV6QmhPdyt6SDhVUHN4K0ZBRk13YjNWdnltQmZFR0R2ZEpWQjBTb2ZtWkU3QkhDaFBRVUIwTzkwbFVIZTczRmhLaCtaa1R1RWNLRTloUUhmdGcrSm9WWlFyM1NWUWQ3aVlLb2ZtWkU3UkhDaFBVVUIzN3h2aWFGZFlHRTZ6STRBVVR0Q0FLOTBsVUhmUHFFdmU0NGNUaEU3eEhDaFBjVUIzN3MvaWZNUjMzU1ZRZDd2Y1dFcUg1bVJPNFJ3b1QyRkFkKzdiNUhDRUtWemtkQWJyNGZRUDRQdmltRmZzYSsxajdHL2RZQlNjRzkwejdsdnRXKzZRRjd3YjNKZmRrOXlUN1pBWHZCdnRVOTZQM1MvZVhCUTRtTndvQm9maC9BMWdLRGlhdUhmY1EyaUVkSnZzcTFQanpQd3FoK0g4VDZLSDRwaFgzVnZ5Y0JhY0dlRm9GYjRGN2dYQWJWRUxLQnNleHBjU2ZIL2RyK09rRk5BYjdML3hPK3pYNFRnV2gyaFhXQmhQWXlPQUZFK2dnQ2lZM0N2UHFBZmNyNGNUaEExZ0t0Tjh4SFNhdUhiSDNaU0VLSmpjSzdTa2Q4Q2NkRSt4WUNoUGNndHNrQ2hQc0loMFQzQ1lkRGpRNEhRSEUrRWNEK0hqNFRCWGwvRFZDOTkwSCsrZjhCQVV5K0VmVSsrNEhEalE0SGRyM0ZyWUs2dmlzSVIwME9CM2E5d3kyQ29MNUpCVlRDa0FHVGpaTzRBVU9ORGdkM3VvQjkzemgxQjNoK0xBaUN2dndzaDFYaGdvK0xoMFN0ZUgzb2pJZEU3SXpIUk8wU2dvVHNrTWRFM0k3Q2hPNE5CMFRzallkRGo2V0hmZFMrR2toSFQ0dUhjL0pFclhoaWN2M1pJQUtFN1NBMy9qcU1BbytMaDNPOXd5YUhlSDQ0U2NLUGk0ZHppWUt0ZUgzb2pJZEU3U0FNeDBUdFFEM0U2SUZaZ2NvUmxBemh4NFR0SUE5aDJhM3RobzFGaTNnVS9TSkh0K055N2VpdndnVGRJQTdDaE8yQURRZEU3U0FOaDNrK0drVjFnWVRySURJNEFVVHRJQWdDajR1SGRQcUVyWGhvZUhENFo4eUhSTzhnRE1kU2dvOWgyYTN0aG8xRmkzZ1UvU0pIaE8wUU4rTnk3ZWl2d2dUZEVBN0NoTzFBRFFkRTd5QU5oMFR0a0QzQVBodVNRbytsaDMwK09zaENqNHVIZDdKRXJYaGx2ZVRqNEFLRTd5QTdQaDVLQW8rKzJuUTl4alFaM2I0Wk5rU3RlSDNjODkyTWgwVFdJQXpIUk5aQUVvS0UxaUFReDBUT0lDT05RVVR2QUMrSFJNNGdLcTNCZmZVQi9jb050WDdGUHNDTmtnbWRoN2toQVhFbUx1enpSc1RXZ0EwSFJOWWdEWWREajR1SGJqQjFzRVN0ZUc2d2RmQnNqSWRFNzhnTXgwVHYwQktDaE8vSUVNZEUzOGdPd29UdjRBMEhSTy9JRFlkOXhuNHJsZ2RQaTRkelNrZHRlRnZKeDFuTWgwVHRDQXpIUk8wUVBjVG9nVm1CeWhHVURPSEhoTzBJRU1kRTNRZ093b1R0SUEwSFJPMElEWWRFNm9neGZocUpBb1R0UUFpSFJPcUlDWWREbU1yQ2hLNjRmZkNLeDBUcVRnS0U2dzVCaE9jUEFvVG1pZ2RFMXFPUFFVVFdkVUdFNWs4SFE1amdRcjNEUGZzSVIxakt3clBRd3FaeS9kMG5CMlorRzB3Q21NckNzNzNESUlLbS9oa0ZWTUtRQVpPTms3Z0JRNWpLd3JPSmdxNjRmZkNLeDBUcWtBNENoT3JBRGtHRTVzQVBBb1Rtb0FvSFJOYWdJNDlCUk5hUU5VR0U1cEFQQjJlOSt3VjFnWVRsa0RJNEFVVG1rQWdDbU1yQ3RQcUVycmhzT0hFNGE4ckhST3ZJRGdLRTYrQU9RWVRuNEE4Q2hPZlFDZ2RFMTlBamowRkUxOGcxUVlUbnlBOEhiRDM4VEVkWTRFS3J2aHVJUXBqS3dyZVF3cW05NU9mbkIybTkvd29DbVA3YWREM0dObGVkdmhueWt6V0Vycmg5NVBQZGlzZEUxUkFPQW9UVlFBNUJoTk5BRHdLRTB5QUtCMFRMSUNPUFFVVHJnQytIUk1zUUtxM0JSTk1RRHdkRG1NckNyakIxc0VTdXVIS3dkZkJ3aXNkRTYrUU9Bb1RyOEE1QmhPZndEd0tFNStnS0IwVFg2Q09QUVVUWDVEVkJoT2ZrRHdkeXZneFdCMWpLd3JOS1IyNjRYOG5IWGNySFJPcUVEZ0tFNnBBT1FZVG1rQThDaE9hSUNnZEUxb2dqajBGRTFVUTFRYjhJUGoyRldBS0U1cUFJaDBUbFJCNkNoTlZFRkJsV1R5S0h4T2FFSmY3N1Y0ZDl3QzVLaUltWFNuN0FIc0tEdndGb000S0R2d0ZvSTBkOFIxQTJpRWQrM1NnZHZqMDhTWDNGaExpM1JQUTRpQWQvVnJkK1ZvSHRJWWQvQVVrSGR6T0N2c2IvaGdoSGZ1UVZoMzNPdDBEOXpvZ0hmdkVCenhucWttN29RWDcydDM0QUFmcnQyek5TbTBGOTU0SERrMHRDc3p5RXJyaG1mUEE4NFptQ2hPNFFEQWRFN2tBTVFvVHVJQTJDaE40Z0Q0ZEUzaEFQUW9UdUVCUEhSTytBSm40bktNS05pTUt6ZThCdXVIejhnTk9IZnRPOThVcUhVWXNIY3J5RXJyaW9mTy85QlBxVFIwVC92dW05KzBWYmFGMXFhaWlvYW1vZEtGdWJYVjFiaDczTUJadG9uV29xYUtocWFoMG9XMXVkSFZ1SGc1R0xCM0w3d0c2NHZMeUEwMGQrMVgzN0NvZGFENEs3ZThTdXVIdjh1M2RPdHc4MmhQeWdGa2RFK3FBK0hJSEUrb2dQQVlUOGlCeUNoUHlnSEVLRS9KQWN3b1Q4b0FzVXRiekh4UDNnTy80Q1NvZC9CU1lDdndVT1IzczhoS0U4My9kZXZNVDZFQWRFL1Q3UXZjVVdoMm9SQXB1YlhWMWJSNE8vQlNZQ3ZzYyt5clU3VXdkN2U4UzF2SXUzZEgzU3kveUx0MFQ5SUJBSFJQNkFDOWxIZmMyL2J5ekN1YjVjeW9kL0JUN2FkRDNPVXdkN2U4U3NUa0sreFB5THQwVDhlRDRwaFg4cGdjVDlLVlJDaFA0TFIwVDhhcTNCZmltQnhQeUwyVWREdndPTndydDd4S0c5MHN2OGk3RkhTLzVLU29kVVNNS3pQSVN1dUdpODcvMHArRVQ4bFlLRS82aStCMTJIVmszSGV6eUV1TGRmL1BBODR5VUN2dWUrU2JsSFJPNkFNY0s5MGxVSGV6eUV2ZW84OER6RTd4SENoUGNVQjM3dy9qTFdoMWRIUjRPSmpjSzdQSUI5eHZ6d1BNRFdBcWs5eFJhSGFoRUNtNXRkWFZ0SGc0ME9CM1o3d0gzZFBJRCtIajRUQlhsL0RWQzk5MEgrK2Y4QkFVeStFZlUrKzRIMmZqZEtoMCtMaDNNOGhLMTRaSHp2L1NPTWgwVHVFQXpIUk80Z1BjVG9nVm1CeWhHVURPSEhoTzRRRU1kRTNoQU93b1R1UUEwSFJPNFFEWWRFN1pBNS9pYUZZQWQ5ekFXYnFKMXFLbEVDbTF1ZEhWdEhnNWpLd3JNOGhLNjRhRDB2L09mS3gwVHJDQTRDaE9zZ0RrR0U1eUFRd2ZCYlZPcFBSdjdMWGtLOXkwZkU1eEFLQjBUWEVDT1BRVVRYQ0RWQmhPY0lEd2RFNThnb1BnZEZXNml5Z3JUSGIyZ2R2aGQxUGNBMHdIM0hkMzNYOTBEOXgzNHloVm5RMExUL0YzZCtGMzNYOUlkWi90ZjZSME95amdkUXZkVkV2Y2UzZmR1M1JPNDl4NzVIaFVUMk1JSzkyN2lIZmNoMVBzaEJ4TzQ5d3c1QnhQWSt3ejdiZ2NUdVBjTUJ3NmRvSGI0WGRUZTZrWFRFdmNkM2ZlZDRUZmRFOXJESFJQczkrKzZTeDBUMm8zOVdCWGQrS1k1Qmc2dE9CMzNBTk1COXgzZDk0Nm9DdmZnL0dRVjZoMDVCdzVOZmdwUmpRcnhpOTM0eHQwU3ZPTTE5NkR2OTU4MjRoUGsrQVg1R0JYM0tOOGkrMFA3TVRyN0VDYUtIeFBvT2ZlZjNmc1pCeFBrM3NLLzhmY1JHdmR2K3cvM0kvdFkrMWo3RVBzaisyLzdFYjhsMzFRZUU5VDdHam4zb04wR0UrUWxqRHYzRVBjeEd2ZEQzL1QzS0I0T3BUZ2RFc2YzVVRuZDkxUGRFK2pIK0tZVlFnY1QyUGI4WGQzNFhmZFQrOHdHTTdoUzlSNnExR3dHWDNLbXR4LzN6ZkhVQnc2akl4MEJ2T1A0RnVNRDk5NlFDdnUwb0hiNHBOTDNBM2NTOTBEZlNjMFQ2TnozRVIzOHBOLzVXZ1lUNkVrR1BtcHBQeDRPWTZVZGZmQWR2T0wzemVOTTRoUG85NytFQ2xlekhXbDczZmZiMi9jdjNRSDRaZU1EK0kyT0NtaDczZmZqM2ZjMTNSSzg0VFhuOTlmaUUvVDRZSVVLT0tCMitRamRBZmRaNHdPa3J3cDhlOTMzb3VEM2M5MFN2T1lLOThxRENtaDczZmMxM2ZmajNSSzg0L2ZYNWpYaEUvUzhvQjMzS01YM3dNVUI5NkRIOTBySEEvZzM5eWdWN3gzN0U4VTc2Qi84Q1BkbUZjRUsrMkQ3T2ZjNTkyRWU5NjJJdEIzNE1ic1MrQ0RNVzdzVHdEUUsrd2o0UFJYcis1RE0rQmdHRTZCYkJrb2RFOEJ6Qmc3M05NWDNzY1VCOTYvVDl4UEtBelFLK3huM1FIUWQ5eWpGOXh2RDl3TEZFdmVxVlIwVDhqUUsreDczcEdZZEUreGFDaFB5TlFvTzk0SEZBZmcreVFNMEN2dEU5NDNMSGZjbHhmYzF3OVBGQWZoOXlRTTBDdnNhOTZCMUhmY294ZmM0eGRqRkV2ZXR4RkxPOXlISkUrejROSDhWa0IzM1gyUUs5em43T2Z0ZisySDdPZnM1KzJBZit4djM3UE1kRS9UUEhSUHNzUXI0ZjhVQjkvM0pBelFLK3gzNGk3Z0s5eWpGOXh6Qzl3REZFdmVuUUFvVDhqUUsreUgzcWwwS0Urd3lDaFB5UHgxUkhSUHNQUjMzS01YWXhmYzR4Ukwzclk4ZCtEUi9GWkFkOTE5a0N2YzUrem43WC90aCt6bjdPZnRnSC9zYjk1SVZwZ3AyQ2g0VCtQY0dIUlAwZkFwLzArUEY5OERGNWRNQnV0UDNKc2YzU3NmM0pqb2Q5eWFJRmZzVHhUdm82TVhiOXhQM0ZGSGNMaTVST3ZzVUhzY1c3SzNCeEorY2hYK1lIdnNYKzJVRmhKK0lwcWdhdFBzWEZmY1g5MllGa25hT2IyMGFMR2xWVW5kN2taZDlIZzUvMC9mMXUvZFYweEs2MC9lcHpGdTc5NURURS9wTUN2ZEp3aFhyKzVETStCZ0dFL1piQmtvZEUvcHpCZzUvMCsvRjk3SEY2Tk1CdXRQM09kUDNFOHIzT3pvZDl6bjdXblFkZjlQanhmY2J3L2NDeGVUVEVyclQ5ek5WSGZjeTB4UCtZRXdLOXpNcEZZRWRFLzJnV2dvVC9tQTFDZzUvMC9kRnhmZjcwd0c2MC9mSHlmZDFPaDMzRGZzTnl4MS8wK0RGOXpYRDA4WHowd0c2MC9nR3lmYzJPaDMzTnlWMUhYL1Q0OFgzT01YWXhlYlRFcnJUOXpiRVVzNzNJY24zTnRNVC9jQk1DdmMyY2ZNZEUvN0F6eDBUL2NDeENuL1QrRVBGOU5NQnV0UDNoc24zdGpvZDl6VDNHYmdLZjlQanhmY2N3dmNBeGViVEVyclQ5ekJBQ3ZjdzB4UCtZRXdLOXpBdlhRb1QvYUF5Q2hQK1lEOGRVUjBUL2FBOUhYL1Q0OFhZeGZjNHhlYlRFcnJUOXpiSjl5TE5VOFAzTnRNVC8wQk1DdmMyK3dnVjFoMFQvc0QzQlIxMkNoNFQvMEQzQmgwVC9zQjhDcU1qSFFHODQvZ1c0d1AzM3B3S3NxeUJkcWNlKzQvOFhnVnZ2SDNPM2hybSs1UVY5NUQ0WHdXbldwcEhOUnI3VEVVait3OWphWmFnYng0TysyQ0wzZmhTMHZjRGR4TDNRTjlKelJQbzNLc0taeU1kQVp2aitCYmpBL2U5a0Fwbmk5MzRVdEwzQTNjUzk2YmZTYzBUNlBkTHF3cG5wUjFuOEIyMTR2Zk40MHppRStqM3VJUUtaN01kWjN2ZDk5dmI5eS9kQWZoajR3UDRpNDRLWjN2ZDkrUGQ5elhkRXJuaE5lZjMxK0lUOVBoZGhRcG5vSGI1Q04wQjkyM2pBN2l2Q21kNzNmZWk0UGR6M1JLdjVncjN2WU1LWjN2ZDl6WGQ5K1BkRXJuajk5Zm1OZUVUOUxtZ0hXZFdIWm40MEFQNDNtY2REdmZsaThYM3NjWDNRbDhLK0ZUVDl4UEtFOW41aVdjZCsyMlJIUlBWV3dZVDVVb2RFK3R6QnZqMS9RTjBIZmZaZThWMmR2ZEZ3L2NDeGZkQ1h3cjRQTXBheXZjUHlWeXhIZmpkL0tObUhSTzJZRm9LRTdhUU5Rb085OUo3eFhaMjkwWEQ1OFZqeGZlZnhYdDNFcnpUOXhQSzk5SEtXc3IzRDhsY3lSTnp5UG1EWngzN2FQZlozUjBUdGNqTldibEZRVlZhUG9JZWh4MFRjOGdvU250S1RSb1R0Y2o0MS90NVpoMFRyYkJhQ2hPMXlEVUtEdmZVaS9jYVVjWDRUVjhLK09ISkU1cjVpaUFkT1FhcENoT1dXd1lUcGtvZEUycHpCdmpJL0xjVjkwNEdFNW8veVFjVFd0ZTRCeE9heFY3M2tsb0hFMXI3Vy91YkJST2F5UXIzNVl2M0dsSEY5MFBGOXh2RGMzZjNMc1Y3ZHhLOFZSMzRmOGtUcXpDcUNoT3MwR01kRTdWUWNIQnZaaDV5VXdZVGRUQTFDdmliKy9BVjkwNEdFNjB3UDhrSEUyMHcxN2dIRTYwd3hWNzNrbG9IRTIwdysxdjdtd1VUclRESkN2Zk5lOFYyZHZkZnc5UEY5MDY3Vy9jY0V2Y216RnU3K1FmSkU3YUErWW9nSFRrR0UzYUFxUW9UdFlCYkJoTzVnRW9kRTdxQWN3YjQyZnlrZFIzMzEyb0s5d0RGOTBSZkN2ZzF5bC9LOXd2SllMRWQrTmI4blYwS0U3WmdNZ29UdXBBL0hSTzJrRkVkRTdaZ1BSMzM2R29LMThWeHhmTERjM2YzTHNWN2R4SzhWUjMzMDBBS0UzTE1nS29LRTdNMGdHTWRFN1ZVZ0hCd2IyWWVjbE1HRTdWTWdEVUsrS243MWwwS0U2dExBRElLRTdWTWdEOGRFN05NZ0ZFZEU2dExBRDBkOStOcUN0VEZkTVgzRXNQVHhSTDNsY24zMVVBS0U3ZVErWllnSFRrR0UzZVFYeDM3ZXZnMUZZVWR4YmNLK0tUNzBoVVR0NUNESFJPdllESUtFM2VRUHgwVHQ1QlJIUk92WUQwZCtNaHFDdmNBeGZlUnhSTDNqTW40VWtBS0U3NUErZ29nSFRrR0UzNUFYeDM3ZXZrZ3V3cjQ0dnowRlJPK1FJTWRFNzJBTWdvVGZrQS9IUk8rUUZFZEU3MkFQUjFuZlBRZGZLWWRaNkIyOTVDN0V2ZW96RnU3RStEM1lQZkFGWE5iNi91UXpQZ1lCaFBRV3dZVDRGSnJiRkllRG1lTHhmZXh4UUgzTk5QM0U4b0Q5em4zcDZ3ZFozdkY5eHZEOXdMRkV2YzBWUjBUOVBlODkzMFZjbE1HRS9JMUNreUlCWUVkRSt4akhSUDBjSEJ2Wmg0T1o0djNHbEhGRXZmU3lST2crQkQ0R0JWYUJoTmcrMXY3bXdWYTkwNEhFNkEveVFjVFlOZTRCeE9nMWdwbmU5NEsrQm1TQ21kN3hmYzR4ZGpGRXZjNXhGTE85eUhKRSt6NENmZS9pZ3BubjNiMzNzVUI5NHpKQS9jNitCZlFIV2Q3eGZjY3d2Y0F4UkwzTTBBS0UvTDN3SHNWMVFvZkUrd3lDaFB5UHgxQ3lGN2JIajMzRHEwS0UrdzlIV2Q3eGRqRjl6akZFdmM4angzM2V0K0xDbWYzeXZRZDk4cW1IV2Y0MDd0Yjl4d1M5NmpNVzdzVG9QZGcrUU1WY3dZVFlGdnIrNURNK0JnSEUxQmJCaE9nU2gwT1ovZlp4ZmV4eFFIM05OUDNFOG9EOXpuNDdLd2RaL2ZKeGZjYnczTjM5eTdGRXZjMFZSMFQydmU4K01JVmNsTUdFOWsxQ2t5SUJVeVB4MXJZRzlmSHY4MGZFN203YUxoY21SNFR0bU1kRTlwd2NHOW1IZzVuK0NQRjk1SjNBZmZTeVFQNEVQbGJGVm9HKzF2N213VmE5MDQveWRlNDFncG45OGJlQ3ZsYmtncG45OHZGOXpqRjJNVVM5em5FVXM3M0lja1Q3UGdKK1FhS0NtZjVJTVVCOTR6SkEvYzYrVnJRSFdmM3k4WDNIS3Bzd25OMzl5ekZFdmN6UUFvVG5JRDN3UGZMRmRVS0h4T2JBRElLRTV5QVB4MUN5RjdiSGhQTWdEMzNEcTBLRTZzQVBSMW45OHZGMk1YM09NVVM5enlQSGZkNitDK0xDdndXRHZ1eCt3SFI5d2pSQWJyUzl3ZlNBL2RFK3dFVjBjWEUwZEpSeFVWRVVWRkVSY1ZTMGg5Ujl4TVZxNmFtcXF1a2NHdHJjbkpyYkhDa3F4NE9IQWJrUWdvY0NPUURIQWtpWEFvYzk2MC9IQWhSWVFvY0JJeENDaHdHakFNY0JzcGNDaHo2QlQ4Y0JmbGhDdmpJUWdyNnlBTWNCSEpjQ3Y0M1AvbzFZUXI4U0l2MkFicjFBN3IyRlNEMTlnY08vRWk4Q3Z2dWkvYjNpL1lCNS9VRDUvWm5DdmVMUVFyNzd2c1lkdmN0OXZlTDlnSG85UVBvK0dGbkN2eGh6QXBKaS9ZQnV2WFo5ZHYxQTdyMkZTRDE5Z2ZaSUJYMTlpRUc5MDRnUVFyOE9vdjIrTzkzRXNIMUw5OFQwTS81V2hYN2V3Y3ZsakdQTHg3QkJwRG5sZVhuR3ZkN0J4UGdLZjFhUVFyOE92c2hkdmp2OWhMQjlTL2ZFOURQd0FwOStBaEJDa0tpSFVMN050MzRyZllTdXVQdDlTcmY4ZU1UN1BmYTkvc1ZOd1pIZVdoVlpSNDJVV1ZWUlJyN0NPdzU5eDczRU8zcjl4YVhIak9SQlRLQVUwNDRHelJTdTgrTUg4MjVuNyszSHRIRW9yemlHaFB3THUxQkN2eEk5NGoyQWJyMUE3cjM4eFVnOWZZSER2dnQ5MGIzVkFHNjkxZ0Q5eVgzUmhYRHRiUER3Mkd6VTFOaFkxTlR0V1BESHc3N1hLOGQrNS8zcmZkY0FicjNwZ1AzWFBoMUZURUdUUHRjQmNzR3hSYktCdVQzWEFVeEJnNzdNcHNkK3pGWEhiUDRDZ096MndyN05GY2R2L2dLQS9nKyt3SVYrN3Y1OEFVOEJ2ZTgvZkFGRG8yVUhmdGNyeDMzcDkwS3V0Z2QrTjJUSGZzNVZ4MjYrQW9EK0RuN0FoWDd1L253QlR3Rzk3ejk4QVVPL0VpTDl2ZUw5Z0c2OVFPNjltY0s5NHRCQ3Z4SXZBcjcvb3YyK085M0VzTDFMOThUME5DK0NpbjlXa0VLK3pLYkhmY1dsUjM4U0lmMkFicjFBN3J5RlNEMTlnY09RcUlkKzdUNFh2ZVFBYnJnMytBRDkyckhIZnhiK0Y3M2tJdDNFcnJpRTJDNitWb1ZQd2NUb0puN1JBWEdCcG4zUkFYWEJ3NzhTUHNZZHZjdDl2ZUw5Z0c2OVFPNitHRm5DdnhoZngzN01sY2RzdmdLQTdMYkN2eEJ0QXI3NTRYM0F2ZU05d0lCNS9jRUEvY29oVVFkVS9neFVBcjc1dVFLNS9jRUkvVVQ4UGNvOS9ORUhSUG9XL3Z6ZngxUmhmY0NBYnIzQk5YM0JOVDNCQVB5aFVRZDl4YkNGVlFLOTAwV2E2TjBxNnVqb3F1cmM2SnJhM04wYXg0Ty9FR0Y5d0w0OG5jU3V2Y0VJdDhUME1INVdoWDdld2N2bGpHUEx4N0JCcERubGVYbkd2ZDdCeFBnTVAwcFVBcjhRZnNoZHZqeTl3SVN1dmNFSXQ4VDBNSEFDb1Q0UWxBS1FwMGRRdnMyM2Zpdzl3SVN1dVBnOXdRejIvUGpFNnozMlBmN0ZUc0dWSGRiV1dnZU1rNWxWVVVhK3dqc09mY2U5eER0Ni9jV2x4NHprUVV5Z0ZOT09CczBVcnZQakIvTnVxSER1QjdKd0tQSzFSb1Q5Q1AzTUJWVUNnNzhRZmVHOXdJQnV2Y0VBL0wzaGtRZERrSG1IZnhCaGZjQzk0ejNBZ0c2OXdRRDhvVkVIVlA0TVZBSysvNkY5d0w0OG5jU3UvY0VJdDhUME1LK0NqRDlLVkFLL0VHMENrS2RIZnhBNUFxNjl3UWo5UlB3OHZmelJCMFQ2RnY3ODh3Sysyak5DdnRqelFwajk1SFlBYnI0aWdPNjk5NFZQdmlLMkFjTzk2ajNrZGdCdXZuR0E3cjMzaFUrK2NiWUJ3NUI1aDMzYnZkLzkwd0J1dm1MQS9tSytDWVZ1MHdGUmtOQ2FFQWJYWGlSdy9zREg2SmNWWnBrRzBoWGNVdFNIMXpOQmQzandxWGFHN1hGZkhhMEgxRDNCNXFHdVJ2SXRxREp6eDhPMy9mTjF3RzYrUVlEdXZnWkZULzVCdGNIRHZ2Y253cjczTGdkKzJ1SUN2dHJod3I3eGFBSys4V2RDdnVzY1IzM21yb0tEdnVzY1IzM21nUDNFc2dLRHZ1aFRQb01BYnIzSGdQMzFQbk5GZnVsL2d6M3BRYjdTUGV6aS9mUDkwajNzZ2dPKzZGTStnd0I5MHIzSGdQMzFQbk5GZnVsQnZkSSs3S0wrOC83U1B1ekNQZWxCZzc3YTRnSysydUhDdnVFK1lMWEFicmFBN3IzZ1JYYStKWDNjOWY3d2dZTys0UWsxd0gzb3RvRDkvSDRlaFU4L0pYN2N6LzN3Z1lPK3dWeEhmaEJ1Z29zL0djVjkwdjhhQVhhQnZ0TCtHajNTL2huQlR3R0R2c0ZjUjM0UVFQM3VjZ0svRUg4YUJYYUJ2ZEwrR2o3Uy9obkJUd0c5MHY4WndVTys0VDdKdnA0QWJ2WkEvZTgrZVlWKzR6N2N3WDh0d2YzanZ0MnZzTDdjL2RlQmZoNUIvZHg5MW9GRHZ1RSt5YjZlQUgzb3RrRDcvbm1GVmhUOTNIN1dnWDhlUWY3Yy90ZXZsVDNqdmQyQmZpM0J3NzdnL2Q5c3ZnZXN0MnlBYnF6M0xMenNnTzY5MzBWOXpUNFJmY2o5elQ3d3dhei9MNFYrSmYzZERuN0kveEZCdzc3Z3lTeTNiTDRIcklCdXJMenN0eXpBL2Z5K0g0Vit6VDhSZnNqK3pUM3d3YjduTElWM2ZjaitFWGMvSmNIRHZ1cFRMTDV2cklCdXJLK3N3UDN6UG5ORmZ1ZC9nejNuUWI3U1BlemkvZlA5MGozc2dqN2R2M2xGZm0rOXk4SCt4LzdvSXY3cGZjZis2RUlEdnVwVExMNXZySUI5MHF6dnJJRDk4ejV6Ulg3blFiM1NQdXlpL3ZQKzBqN3N3ajNuUWI3VnJJVjl4LzNvWXYzcGZzZjk2QUk5eS85dmdZTys4V2dDdnZGblFyNzNKOEsrOXk0SGZ4RSt4aDI5eTMyQWJ6MUEvY3ZGbWdkRHZ1cit4aDI5eTMyQWJ6MXV2VUQ5OGdXc0FyN3EvaGs5dmN0ZHdHODlicjFBN3o0enhVZzlmWmpCN0gzTFFWYkJ1ejdtTklLKzZ2NDcvWUJ2UFc2OVFQM3lQanZGYkFLL0VUNFpQYjNMWGNCdlBVRHZQalA5aDM4UlBqdjlnRzg5UVAzTC9qdkZXZ2REaWJYK0NRQnV2aE56QjFtKzRBVjl4NzdPQVh3QnZzKzkxejNQdmRjQlNZRyt4NzdPQVVPSnRmNEpBRzYrRTBEOS9MRUN2eE4rNEFWOEFiM0h2YzRCZE1IK3g3M09BVW1CdmMrKzF3RkR2dkQxL2drQWJyM2c4d2REdnZEMS9na0FicjNnd1AzS01RS0R2dXcrRjcza0FHODROL2dBL2RzeHgzOFYvaGU5NUNMZHhLODRoTmd2UGxhRlQ4SEU2Q1orMFFGeGdhWjkwUUYxd2NPK3p5SzFmZ1UxUGJVRXZjZjk3UC8venFBQVA4QVRvQUEvLyt4Z0FEL0FNV0FBQlBvekJhNGl1V0p2YnFWNUJtdjk5Z0ZFK1QzRnRRR0UrajdEZ2FSdlFVVDVMQ1FvWit2RzhEVEJsK01CUlBvTUkxWlhJRXlobDBZRS9BMFF0b0daL3ZjOXdnZGp1SUs0OVAzRCtOUjR4UDY1eGIzUUREVDVnYjNLZWZZOXcvblVNa3BtQjhUL05pWnZjVFhHdmNHUU5EN0hKWWU3RU1zKzBBSDMvMElGZmVDNC91Q0J6UDMxQlgzZHVQN2RnY1QrdFA3MUJYM2dnZnR3bDgvUWxGZUxCOFQvUGZXQlBkeUI5dUJ0bVJNR2sxZ1pEdUNIZzc0eUVJSytzaDlIZm8xMS80M2lSMGNCSXhDQ2h3R2pIMGRIQVg1MXh6NkJZa2RIQWJrUWdvY0NPUjlIUndJVWRjYzk2MkpIUndFaTBJS0hBYUxBeHdHeVZ3S0hQcVhCdmVsOTZVRit3QUcrOHI3eS9jQkhSd0ZaV0VLZjlQM2ljMjM3ZmNoMHdHNjAvY3A3dlR1OXlJNkhlMzdMeFhSQnN5anVyRElHOGk2Wmtxakg5RUc4blE4ekNjYkp6eEtKSFFmdnZlYXZSMS8wL0xPOTAzdDl5SFRBYnJUOXludTlPNzNJam9kNElNVklKdmxPL2NCRy9jQzVOdjJteDlIQmtWN1QxbEVHMFJQdmRGN0g0ZjNCNzBkOTZ2ZENyellIZmpma3gyTGxCMVhvSGI1RHRjQjk2clV6OVFEK0lBZ0hmdHFCdnNwTFQzN0VQc1E2VDMzS1IvN3h0VDVEcy85RHRRSERqejdBZG41RHRrUzErRTQ0ZmVJNFRqaEU5VDRML2lORmQrUkJmY0FmZnNFeVRVYit3UXZWQ1ZicW1qSmNSOFQ2RWh3YmwxVUdqN0NaUGNrYVI3c2M3QnZZeHBjV201RFAxRzB6WUVlTm9VRklwWHVRZmNNRy9MenZPM0JlYlZKcWg4VDFNU2hxYSsvR3VaWXRQc3VzUjRvcFc2ZHRocTB1cW5JMnJ4bFQ1VWVFK1Q3amZ0bkZiVzVxTXJFMzNWTlhscHdRaDR0bFdtc3RSb085MXgvMFVYM01QYzQvd0JvZ0FEL0FKdUFBUGN5UmRFU3ZOSkU5ejc0aGRJVGMvZzYrTXdWOHRKUUxaUWZRNFlGdzRKaHIwOGJPMWhWTUMrK1ZOdkt0ckxKbEIvVGhRVW9nVVJOSVJ2N0VEemQ5eGYzRjlyYjl4QWZFNDM4Q2Z0bkZmdGc5em43T2ZkZzkyQmtDdnM1OXpuN1lQdGcrem43T2Z0Z0h0SVc5emozRy9jYjl6ZjNOL2NiK3h2N09QczQreHY3Ry9zMyt6ZjdHL2NiOXpnZURtcjNBaDN0dmZTODU4SUQ5N240OVJVdys2YTk5YmNHeXlFRnhBWkU5d1VGc1pXaHA3RWF3R0NyUlI3N2lLMGQ5eWpzSFdyM0FoMzNCYjMwdk5qQ0EvZkkrUFVWTVB1bXZmVzFCdE96cWNDL1g2eEdIL3VYclIzM04rd2Q5NUwzKzhqM2Y4SUI5MkRGOXpiRjk1WEZBK2NnSFZUM0JQdTh4ZmU4OXdUQ0I3Mzc4eFhGOTRzRzZQdUxCZFFHNXZlR0JmdUd4ZmZ6UEFjZys3WWg5N1lGT2dZTys0ajRIZEgzTU5JQnV0UDNMdE1EOTFqNEhSWGR6czNkM1VqT09UbElTRGs1emtuZEh6NzNLQlcycmE2MnRxMW9ZR0ZwWjJCZ2FhKzFIZzc4RjNnZCs1LzQ5ZmNXQWJyM3A5Y0t3eFpsQ3Z3TDJncjk4Tmo1OEFjTy9BdmFDdnYzMlBmM0J6Nzk4QlhZOS9jK0JnNUlvSGI0WGQ4ZC9GM1krRjMzRmgxSSt4VjI5empVK0FiZkhmd0creTlDOXkvN09OajNPUGN0MVBzdCtBYjNGaDM0V292WHpOWDNWdFgzQ3BJZHpkVlA5NVpRMHhQdlFGTWRFL2RBYlIzODl3Yjc5UGozQmZpSy9DSVZJc05KNHVMQ3pmVDBWTTAwTkZOSkloNFQ3b0NaKzh3Vjk1YlgrNVlHRSs5QXgvZUFGY21qcnJpM3BXaE5UWEZvWDE1enJza2VEdmR2OTN2M0l0ajNTd0g0TmVuWDl5SUQ5K24zZXhYNEdQZ20reUw3bVB1Szl3a0crMUQ3VVBkUSsxRUYrN2ozVVJYNEJQZ0VCZnR3NmZlWTk3djh3UHdaKzNJSERqWi8yVnQyK0xSM0VycmgzUDhBU0lBQS8vL3VnQURVRTdUNE8vZjFGZUdSZit0RXpET2NHWlBuQlVJR2d6TUYreG1BTmlIN014b1RkUHNmekNqMWJSNFR1SU16QmRRR2t0b0Y5d1hwMWZjTW5CODBrSDlDVlY1TGlCbXQrQndGRTdTNWZiQm1sRlVJKzdZekZmY0R1TkxibVI1cS9CSUZVS1ZxemVrYURsanMwdmVXMHJkM0FlZlM5NWJTQS9lNDdCVzFzcGlpckIvWlBMKy9QTmtGb2F1WXNyVWF0WDZ5ZGFzZTJ0cFh2enc4QmFGclpKaGhHMkZrZm5Wckh6M2FWMWZhUFFWMGFuNWtZUnBobUdTaGF4NDlQYjlYMmRrRmRhdXlmclViK3hYM1hCWFN4Y1hTMGNaUlJFUlFVVVZFVWNYU0hnNldNUGMyT2QxT2RxSjIrU0hkaFhjUzFlUDNHdFAzQ2VOQzR4TWJRUGNuOTN3Vk00V1YreFRwTVBjWmV4a1RpMEE1MHdjVEswRGJCL2NKbFBMUTl3d2E5Q3pLK3hHd0h2ZUhCeE1YZ014M3RsaVVSdU9SR0gvM0F6L2grd21oQ0JNYlFPQkRQQWY3RjRjd1Fmc0lHdnNHOGxQM0NtMGVqUHVWQmppY1dNWjgzQWlhOThBVnpjTzIyWTRlKzN3SFE2Rk5xYzhhRTB0QTkyTDhZUlgzZ3dmbWFyUmpVUnBLVjJVN2hoNE83bnZkOXo3VDNkUDNTdDBCOXlQakEvbEg5M1FWTVpFRkszaExSemdiSzByUzdtOGY5emNHbHRNRiswOEdpcHFLbXBzYWw0dVhqSmNlOTFrR2x0TUYrMWtHOUtYTTJQQWIyY2xQTTZFZjQ1RUY5eGRzTGVqN0VSdjdKQ1A3QS9zdGFoOHNRK0FHaW4rTGYzOGFlNHg4akh3ZU5VUHRCdnNucnZJaTl5QWI5eDNvOFBjZnBSOE9zSC9kOXpyVTI5VFRkL2NXM1FIaDQvZlY0d1BHOTRBVnN3YUNmSWQ0ZVJyN0IrODY5eVQzRXUzUDl3T3JIaXVUQlVwd1RHTkFHekpOdXM2ZGtaMlhteC80T3RUOHZ3YmJCUGkvMUZnR2w1NlRvNklhOXcwcjJQc3Ird1l4UWZzS2JCN25nZ1hZcThLMXpodml5RnBJY0lSMmVIa2YvQzRHRHR5TDkxZEQwOTNkOTZIZEV2YzEzemYzVy9kdTR4TjYrRE1nSGZ1Uy9KZjdDRVAzQ0FZVHV2c1Azd2NUZXZjUEJ4TjI5d2ZUQmhONit3ZmRwUXEwb0hiM3F0M3IxTzdkUXRRUzUvaWZFL1Q0SFJiM0NnYjd4UGVxQmRrRzl5SG16ZmNFbXgvZDFEb0dFK3lGdG51dmNhZ0k5eFVHRS9UVS9KODU5MVVINk1GcFNwZ2YrL1ZDOS9RR1RIeFdhakFiKzFVM0JnNzNISXZjK0xqY0FlZmYzOS9lMzkvZkEvZi9JQjM3by8xYTMva0o5MUVHc2FOeVpCLzhMdC80S1FmblVzVXdIaVQ5V2hYM293Ym14TVhuSC9qRU4vekpCMlJ6Y21VZSsxSDRiamNHRG5hTDRQZDkwL2VTM1JMM0ZPSmszVG4zaUJQdzkrYjVhaFg3Q1M0Mit3UnBrMldhWFIrU2RnVW9Rd1lUNlBjSEJveDlqSDUrR2paalRUOWRIallIK0lXT0JkMzhPd2ZydHJIcGdlc0lFK1QzTnRNR0UvRDdSZ1o2d1lHenFocld4OEhPeDcxcFVwMGU3SklGM254QzN2c2hHdzZEb0hiM0pOZk4yUGZ2ZHdIM3BkOERvQ0FkOTJUNzd3WDdEejczTzBuN096LzNPL3NrMy9jazl6ZlgremZOOXpmWSt3d0c5MlAzNy9jREhRNUo5NVRZOTF0M0FmZUwyQU82OStFVlB2ZGMrMXpZOTF6M1c5ajdXL2RiUHZ0YkJ3NUo5NVBZQWJyNGNBTzY5K0FWUHZodzJBY08reXYwK0J3QnV2Z2JBL0Q0aFJWVlZQY2greUg3SWZzaXdWWDNJdmNpOXlEN0ljTEIreUgzSWZjaDl5RlV3ZnNnK3lFRkRrbms5d0xsMSt6M0FnSDNmL2NFQTdyNEFSVS8rSERYQi91MCszRVZWQXI0Q1FSVUNnNms5ekhZOXhYWUFlZjRjQVBuK0V3VlB2aHcyQWY4Y1B1dkZmaHcyUHh3Qmc1Sjl6SFk5eFhZUHZjN0VycjRjQk93OTk3NHBoVVQwRzh4QmZ1VEJoT3dQdmQ4QjJQN0ZRWDdWRDczUFFaaCt4MEYxZ2ExOXgwRjkzelkrMlVHcy9jVkJmYzlCaFBRMlBzbUJ4T3dwK1VGRGppdCtKTUIrRVBVQTd6NHRSVTNCL2dTKzBEOEV2cy9CVGNIK0Z2M1lBWHlCdzQwcmZpVEFiclVBL2lLK0xVVi9GdjdZQVVrQi9oYisyQUYzd2Y4RXZjLytCTDNRQVVPU2VjS3V0Y1ZQL2h3MXdmOGNPQVYrSEQzR2dYeUIveHc5eGtGT3dmNEhpTDhIaUlGRGtubkN2aWYxeFg4Y0QvNGNBYjhjUGU3RmZodyt4b0Yyd2Y4SHZUNEh2UUYyd2Y4Y1BzWkJRNUpzTmYzWmRjLzkyUVM5NHZZRTlDNjl3VVZQL2h3MXdmOGNQZGxGZmRjK3hqWTl4ajNXOWY3V3dZVHNQY1lQZ2NUMFBzWSsxd0hEaWJmMUVMM1Jmczc5ME5EMDYzVVF2ZEUrenozUlVMVUVyclk5N1RYRTVuQXV2ZkxGUk9Td05nR0U1bkF5cHkwc3F1ZGMzQ2dIbTJpcDJ6RUc5cTkxUElmRTVUQVB3WVRtY0JOaW5waVpSdG5lcWVuZEIrb2RXK21WaHM4V1VJamloLzdiUVFUS2NEWUJoT1p3TW1jdExLcG5IWnhueDVzbzZab3lCdmF2ZFh5SHhOSndEOEdFNW5BVElwNlltVWJZbnF3clc0Zm9YWnhubDRiUEZsQ0pZb2ZEaWIzZ2RjLzkwcjdRUGRLUDljU3V0ajN0TmNUbkxyM2l4VVRMTmdHRTV6TG5MV3lzSnhxYktRZWNLQ29jcjBiMnIzWDlSOFRURDhHRTV4TGlucGhaUnRxZXFTbmRoK3FjM0NyVWhzOFdUOGhpaDhPK3l2M2c5Y0I5LzdYQTdyM3p4VS85OC83UWRmM2pRY08rNEw0RS9lMlBka1N1dmZFRTZEM28vZ1RGZHNHRTJBbjk3WUZJd1lUb0NmN3RnWGNCaE5nMHZkb0JRNzNZdXJXOTEzWFFOWVN1dUg0MCtFVHVQZ045Nk1WU1dSWWFGSWJWV0M0dzhPMnVNRWZ4WXErYUxGS0NQdmVGaXJaUE9yYjJyWFp0UjQ3dGR4ajNCdm8xOXJzSHhQWTdEL2FMaDQzaWo1aFlEMElFN2pYWUQrNE9Sc3NQVHdxSHhQWStEWVdzczNBcnNTS0NNQ0t0RjlVR2xSaVhsYUtIbEdLVnE5bHpRZ08rNWY3S3RYNVhOVUJpL2dOQS9zcEJMaUs1WW05dXBYa0djMzQ2SSt3b2FHd2lSbTVpWkxWWG93eGpWbGNnVElaU3Z6bzl3Z2Rtb3ZYK01uUUFhRDQ5UU9nMXhVLytQWFhCL3VPK1E0Rit3RUcreno5RGhYM2Mvako5M0w4eVFVT2Qvc1Zkdm1rMXhLazkxSSsyUGRUMXovM1RSUGsrT01nSGZ6S1B3WVQyUGNGL2FUWSthVDNVLzJrMS9ta0JoUFU5d0VHRGlBbENnR20rRzhEcGlBZE9BZjNTL3VrKzB2N3BBVTQrRy9kL0JBSDkwdjNwZnRMOTZVRitCRGRCZzV4K3hWMithZlVBYUg0eWdQNDRDQWQrNndHK3gzOVhrWDM2QVU4QnZEOGVnWHRCdmNzK2FjRjkyc0dEbVM2SGZjdjl4eTMrS1A4UmJsM1B4ajNSSHoxK3c2TiswYWFDbC83RlhiM0h0UmpkdmltZHhMbDNmZU8zVDNaRTd6NGpCYjRwam43MEFjVDNDMVdVRFZCWnIvd0h2ZlFPZjA4M2ZkZkIyT2R0WEsrR3hQYXljT3h5cVFmRTdveUJ3NzNGcFVkK0ZlTDFrbDI5NnpXcE5iM1ZkYWFkeEs2MWZjZjFPL1Y5eC9VcnRYM0g5UVRxL0Q2RlJiYnl0ZnE2MHpYT3p0TVB5c3N5ai9iSC8zbStMQVZFeHNBSzhvLzI5dksxK3ZxVE5jN0hoT3I4RHRNUHl3ZkUwWUFyUHk4RmVnRytKcjVkZ1V1QmhNYkFQeHgrMDRWeHFhd3RiV25abEJQYjJaaFlYQ3d4eDRUb1BDN0hmZlZGc2Vtc0xXMnBtWlBVSEJtWUdGd3NNWWVEdUJXSGZmVTNBUDMvUGxhRmZ2TCs4b0Yrd0FIOTZQM293WDh4OXo0eEFmM28vdWhCZmNBQnc2RStSRFhBZmlML3dCTWdBQUQrTmY1WEJYOFN3WS9Qd1g0RXdiOEl2d2l4Rkw0SVBnZmpmd1IxOWNGRHZkQTk4N2NBYno1V2dQNWk5TUsvTWM2K01UM0R4MkUyUXI0ak5jRCtOaU9GZmhMQnovWEJmd1RCL3dpK0NKU1V2Z2YvQ0Q4RVluWFB3VU80RllkOTlUY0EvZjhGdmZNOThzRjl3QUgrNlA3b1FYNHhEcjh4d2Y3by9lakJmc0FCdzZFMlFxODF3TzhqaFg0VFlyWDEvd1JqZmdmK0NCU3hQd2kvQ01GK0JRSFB6OEZEdmRBOTg3Y0FiejVXZ084OS9jVjk4djd6QVgzQUFiN29mZWpCZmpFM1B6SEJ2ZWo5Nk1GK3dBR0RvVDVFTmNCL3dBeGdBRFlBNzM1WEJXSy9FM1lQNHo0RWZnZy9CL0V4UHdoK0NJRitCSUdQOWNGRHZncjk4N2NBYno2UlFQNmR0TUsvUjhHOTZQM293WDdBQWI3eXZ2TDk4djd6QVgzQUFiN29mZWpCZmtaOXc4ZDRQc2dkZ0gzMU53RDkvMzdOUlgzeS9mS0JmY0FCL3VqKzZNRitSOEg5NlA3b3dYM0FBZjd5L2ZLKzh6N3l3WDdBQWYzby9laEJmMFpCL3VqOTZFRit3QUhEcC8zUDlmM0hOWUJ2UGpDQTd6M3pCWGNCcDdEdEtlc2VLeDRpV2FSWTVCcG1HaTJjYzVsMnJIQjVPRllHSGIzZi90b0t0MWJhMVpvY0dxZUdXNmJpYXFIcm9heGc3VmFxRHk0K3dSRGVDSUlEclQzME5jQnZOZ0Q5emIzOWhYM1ZQc3pCZmNOOTZiWCs2ZjNEUWY3eFB2MkZkajRHajRHRHJUMzBOY0IrTHZZQS9pWDkvWVYrMVAzTXdYN0RmdW5QL2VtK3cwSDkzaG5GZGo0R2o0R0RxYjNpOWYzbmRnQitLM1lBL2dlOTRzVjl3L3M1dmNKOXdvcTUvc1BIL3U3UHZlN0J0dktVVUJCVEZFN0gvdGdCdmNXOXhVRkl3YjdPL3M3OXozN1BBWHlCdnNWOXhZRkRxYjNpOWYzbmRnQnZOZ0Q5NkgzaXhYM1hnYjdGZnNXQmZJRzl6MzNQUHM3OXpzRkl3YjNGdnNWQmZ0Z0JqdE14ZFhXeXNYYkgvZTcyUHU3QnZzUEtpLzdDdnNKN0REM0R4OE9yS0IyK0NuYkFmaXcyd084K0ZFVjkxVDdNd1gzQy9lLy9DbmIrSG44RVBjTEJ3NnNvSGI0S2RzQnZOc0QrUUQ0VVJYN1UvY3pCZnNML0JEOGVkdjRLZmUvK3dzSERxejNkZHY0S1hjQnZOc0QrUUQzblJYN1ZQY3pCZnNMKzcvNEtUdjhlZmdRK3dzSERyR2dkdmtNMkFINFA5Y0QrR1VXOXpQM1V3WDdEZmlhL0ZvKytBNzhUUHNOQmc2czkzWGIrQ2wzQWZpdzJ3Tzg5NTBWOTFQN013WDNDL2dRK0hrNy9Dbjd2L2NMQnc3M01kajNvUUgzeHZkTUEvZkcrRHNWKys3M1RQZnU4UWY3VnZkVysxajdWZ1g3U1Q0VitBMzRDL2dLL0FzRisyTDc3dnZsOSs0R0R2dHY5eFFkK1VvVit6VDdVd1gzQy94NTNQaDQ5d3NHRG16NVhIY0J2UGlQQS9qQStWd1YrNHgxM3pmNzYvdnJ4RkwzNi9mcjN6WUZEdmNlOTliY0FiejVPQVA1YWZmK0ZmdFQ5elFGK3d2OGVUcjRlUHNMQnc1c2p2aVBBYno0amdQNHY0NFZkZmVNTnpmNzYvZnJVbEgzNnZ2cU56Y0ZEdnR2OXhRZG5SWDNNL2RVQmZzTCtIZzYvSG43Q3dZT2JJMzRqd0c5K0k0RHZZMFY5NHlpTjkvMzZ2ZnFVc1g3Ni92ck45OEZEdmNlOTl2Y0FiejVPQU84K0FNVjkxVDdNd1gzQy9oNDNQeDU5d3NIRG16NVczY0J2UGlQQTd6NVd4V2krNHpmNFBmcisrdkV4UHZyOSt2ZjN3VU85MlAzd3RzQnZQbDhBN3ozNmhYM1Uvc3pCZmNMOS83N0N3ZjNVL2N6KzFUM013WDdDL3Y4OXdzSER2dHZqM2I1ZkhjQjl6M2JBL2RsZWhYM00vZFRCZnNMOS83M0N3YjdNL2RUK3pQN1ZBWDNDL3Y4K3dzR0R2ZHNsSGI1ZG5jQnZQbUdBL2crZnhYM2FmYzQ5eS8zYWZkcit6ajNML3RwKzJuN09Qc3YrMnY3YWZjNCt5LzNhUjhPOTJ4LzBQanMwQUc4MHZqNDBnUDRQbjhWOTJuM09QY3Y5Mm4zYS9zNDl5LzdhZnRwK3pqN0wvdHIrMm4zT1Bzdjkya2YrOGI0QkJYM1EvY2E5eEwzUVBkQjl4bjdFdnREKzBIN0dmc1MrMEg3UVBzYTl4TDNRUjRPOTJ5UTB2am4wVzkzcDNjU3ZOTDQrZEVUblBrWTl6Z1Z2Rm1jbkp1ZW1hQVpVTEtBZW45OWZYd1ovT2YzWGhWeWpuS1FkQjdSbVFXR25vbWZvQnBMMHhYUmY0NmVrWjZTblJsS3BvRjFoSE9IY2htaisyMFZsWFdZZFpsM3hMVVlnSnFCbklPZUNHcjMyQlhHWkphY21KbVptaGxadlhwNmUzaDlkaG5CL0d3Vm5YcWVmS0Irc01ZWWVwWjhsM3laQ0JNb2p2aWdGYkpSbXBhZWxKNlRHWERNZElGMWdIZDlHZFQ5SVJXaWdxT0ZwSWFYMFJoMmozaVFlWklJRThTdytSY1ZtVVlGanArZWpwOGIwUWR5YzRpSGN4L1UvVzBWcEtPT2o2TWZmdEFGaUhkM2lYY2JFeFRBK09nVm40YWVocDZFcE0wWWRKUnprWEtRQ01IOUZ4V2xTcUtWb1phZm1SbGt4WHlBZVlKNGd4bTYrS2NWbklDYmY1cDl1cjRZZVp4NG1uYVlDTDM3SWhXV2ZKVjZsSGpMcUJpQm9YNmhmWjhJYy92WkZjdHdsYUdTbzQra0dVYVhpSGlGZUlSNUdacjNSQldRZUkxM2RoclJqQVdraUtTR29oNE9LSXZOK0pUTkFiejRTZ1AzYnZrWUZmczkrOWIzUGZ2V0JlOEc5ejMzMXZzOTk5WUYrMDM3MWhYM0cvZVU5eHY3bFBzYis1UUZEdmQxOXhNZCtWb1YrQzc5V2dYOXh3WU85MUJ2SGVmNVdnUDV0dmY0RmYxYTkvZ0YvVjBIRHZkMTl4TWRGdnd0K1ZvRitjY0dEdmRRYngyaCtWb0RvZmY0RmZsYSsva0YrVjBIRHZkMTZBclhGZmk4QnZ1cCtIWUYvQzM4d2hYNExmbGErQzc5V2dVTzkxQnZIZWZZQS9tMjkvZ1YvVnIzK0FYOVhRZlk5dzhWK0djSCtHTDdmUVVPOTNYb0N2a09GZmVuL0hiM3FmaDJCZjFDMXhYNXh3YjhMdjFhQlE3M1VHOGQrU1BZQTZIMytCWDVXdnY1QmZsZEIveXYrL2dWK0dMM2ZRWDhad2NPL1JDOUN2MFE2QjM5RUw4Sy9SQjRIZjBRckFyOUVPRWR6QVlPL1JEQUhmMFF4aDM5RUtJSy9SQ3dIZjBRcHgzOUVPUWQvUkQ1Q1BZQnV2VUR1dmx6OWgzOUVOc2QvUkNQQ3YwUXFCMzlFTnNkL1JDV0N2MFF0UXI3emIwSy9Gem9IZndYdndyOEYzZ2QrNkNzQ3Z1aHdCMzdvY1lkKzVpaUN2djZzQjM3WktjZCs3UGtIZnZjandyOERxZ2QrNnlXQ3Z4THRRcG5Ebi81ZGdHNitYWUROQW9PZjlQNDV0TUJ1dFA0NWpvZERuK1grS2FYOXp5YkJ2czJsd2Nlb0RmL0RBbUxEQXY1MUJUNUVCV3BFd0RLQWdBQkFBVUFFUUFVQUJvQUhnQWtBQ29BTlFBNUFFTUFUZ0JZQUdFQWFRQndBSFlBZVFDUkFLWUF2UURIQU5nQTN3RG1BT3dBOFFEMkFSUUJKQUVwQVRZQk93RkVBVW9CVUFGVkFWd0JZUUYrQVpnQnJnRzFBY0lCeVFJVkFob0NPUUpPQWxJQ1dBSmtBbThDZ1FLSkFwVUM0UU1RQXhvRFFBTmFBMklEWmdOckEzWURnd09OQTVnRG9nT3JBN1FEdWdQQkE4Z0QwQVBZQStVRDdRUWVCRHdFU1FSYkJHNEVmd1NNQkpnRW5BU3FCTFFFdXdUR0JNMEUxQVRhQk9JRS93VWFCVHNGUXdWdkJkWUdOQWFRQnJRSEJ3ZFlCNG9Ic1FmSkIrWUg2d2d2Q0ZZSWJBaURDSTBJblFpMUNMc0kxUWtHQ1NFSkt3bFlDWEVKb0FuTUNkY0ovZ29uQ2pJS1dncGZDbWNLalFxVkNxSUtwd3F1Q3JrSzB3cmhDdlFMRmdzMUN6MExTQXRSQzJnTGRRdUlDNDhMclF1d0M3Y0wwZ3Z0Qy8wTUVnd3JERGtNVWd4bERHME1ld3lUREtJTXJBeTNETTBNMkF6Z0RPa00rdzBORFJJTkZRMGdEVElOUWcxS0RVME5WdzFsRFhRTmd3MlNEYUVOcmcyOERjb04yQTNnRGV3TitRNEZEaEVPSFE0bERqQU9PdzVHRGxIM0RCME9GZVg3RmdYTUJrdjNGZ1VPU3gwT2Y5bjRJdGtMRldBS0M0dmQrTGJkQy9jTWFLNFNDeFZUQ2tBR1RqWk80QVVPOXhBZER2Y045L1AzRGZ2ekJRdWdkdmRmM2ZmejFZdDNDMy9aWG5iNFo4cE0xZ3VMM2ZkKzIvZDgzUXQvMUU3VStCdlpDOUhLck5DbUh3dDczZmtaZHd2UkhRN2l0bDh2akIvN01XMEYrd2gwT0cvN0FSb3Q0RlAwSGd1d21xQ21zeHJKVnJsR1IxVmRUV09oY0s5OEhnc29WRlUzUFdyQjdoNzMwRG43NlFmN0JNVXk5d29lQy9nMGZ4V1FIY0VLSHd1a0JyZXViR05uYTI5aFlXcWtxNGdmQzkvSHVMMmlId3Y3S3RUNDgzY0wrSm40cGhVTHowZjNPQXZmQTFrS0M0NDFCZFgzMUFiM0tEYlYreFQ3QWpaSUpuWWU1SVFGeEppN3M4MGJDME1Id1cxVHFUMGIreTE1Q3ZjdEh3dXUxSXdkQy9zMjJleDJyOW4zK3RsL2R3dDM3aVlLQzhwZnl2Y0x5V0RKQ3hYMTlpRUdEdmZSMXdISkM4a1N1dUVMb3FHb3FYU2hDOThEakFvTG9DQWQ5MC85V2dYMUJ2Y2grTEgzSWZ5eEJmUUc5MC81V2dVdkJndjRXUGltRlRRRyt4UDhTL3NVK0VzRk13YjNPUHltQmZJR0M2QWdIZmVRL0RnRis3YmY5N1lIOTQ3NE9QY0RIUXRMSGZjaUxDSUs5eE9pQldZSEtFWlFNNGNlQzR2M0J5MGxIUXY0Tkg4VjkyRDNPZmM1OTJIM1gvczU5em43WVB0Zyt6bjdPZnRmKzJIM09mczU5MkFmKzczNEJoWDNPdmNYOXhiM092Yzc5eGI3RnZzNit6djdGdnNYK3p2N092c1g5eGYzT3g0TDR3T3FIUXN6a1FWVGMxZHBVUnN2Vk12M0FZTWYrQllHaXJBRjkwK0NKTnI3Q2hzTCt5Yjg1L3NvK09jRkxBYjdKL3puK3lmNDV3VUxGVlFLRGdabllsSWRDNlpuQmJlVnJIdHFHb29kQytIN0RBWHVCdUwzREFVTGE2TjBxNnVqb3F1cmM2SnJhM04wYXg0TGR2ZXozZmVYM1F0cEhmYzhMUGNCK3lkNkhRc0I1OS8zNXVNRDkvd2dIZnVnL1ZyZjk3UDNSQWJ6dDNWTGtSK2MrMTBGNEFaNDkyV0UxV3l2UkpjWnpKM0V5ZUFhOXhndTNmc3BIdnRNKytrVjk1ZjNUQWZ1d2x3NE9GUmRLQjhMb2ZpbUZmZFcvSndGcHdaNFdnVnZnWHVCY0J0VVFzb0d4N0dseEo4ZjkydjQ2UVUwQnZzdi9FNzdOZmhPQlF2QkhmYzU4ZkgzTmg0THRwaWpzYkFheFZhNVJreFVZVldESHNxSEJhS09vNTZ2RzZ5bWMyeHdjRzltSDNKVEJnc0QrSTc1QmhYZi9HSTUrQUVIL0JMOHNRVTArSHZkL0J3SEMrTUs5Nlg3cFFVTEZZTWRDNkJWQ3RvTHUxdjNIQkwzSnN4YnV3dklCcnFabjZlamwzcDZuQjRMQnZ1ays2VUY5d0FHRG52ZFhuYjNxTjMzc3QwTGFBb1Rmb0NUK3dvRkMvYzU5em4zWVBkZ0M4c0c1dmNXQlRBR0R0MDYzRHZiQ3hVZzlmWUhJUXZxNDhMYXFSOEwreWNzK3dIN1BBdDd4WFoyOTBiQ0N5TWR5dmNXQWJ6aitHWk5DZ3NqQ3M3M0Zxc2RDeTZsSnFQaUd0REh0dDd1MEU4eWx4N2prUVgzRm4wbTZ2c3NHL3NjSzBEN0Mvc0c4bFAzQ20wZjl5Tm15VjlER2dzM0hlNzNGaExpM2ZlTzNUM1pFM3cxSFJPOE13b1R1aTRLRTNveEJ3c3ZDdTMzRmdIWTMvZ0NPZ29MM0FvVDZPTWRFL0JHWTJ4SWVSK0k3UVVMK3lubyt3RDNKUjc3TFBlVkZmUEUxdW9lQ3pZSHhIUlJzMFFiK3lNcyt3RDdLUjhMNmNVL0pJa2ZKSXBSUHpBYkMwK1lTS0dLdndpK3U2ckhDN3JZQ2d0c2Q1bW5nUi8zUWdTOXBxeTNDL2ZnM2ZzUStMYjNDZ3NCNTk4RFNSMExSUHNXK3lmN0o5TDdGZ3ViZW5pWVpoc0wrd05mNi9JZUMxNXlxN3dmRGkwS3p2Y1dmd29MTFFwckhST3lNQjBUdURFS0U3UTJDaE4wUGgwVGNqMEtFN0pQSFE1ckhSTzVNQjBUdkRFS0U3bzJDaE42UGgwVGVUMEtFN2xQSFFzeUhSTzRnRE1kRTdrQVNnb1R1SUJESFJONGdEc0tFN29BTkIwVHVJQTJIUXNyQ3M3M0ZvSUtDeEs2NGZmQ0t4MFRySUE0Q2hPdUFEa0dFNTRBUEFvVG5RQW9IUk5kQUk0OUJSTmNnTlVHRTV5QVBCMExleFgzTGZjQjNQY1c0bGZQTmE0ZkUrek1wN0s2MGhyM0JDemUreG43RnlzNCt3UkVzVnpOYng0VDhqVnBWMGN6R3ZzVzl3RTY5eXdlKzBIM2JoWGR6Ny8wOWM5WE9UaEhWaUVoU01EZUhoUHNyZmZkRmREQnQrRGh3VjlHU0ZWZ05UWlZ0czRlRHZnMkZWU01CVGdId293RkUvVGhqZVJoTEJvck1tTTFReml1NG9NZU5JVUYrd2lTOFRuM0lSdjNMdmNBNHZjUTVsVFFKNmdmRStqaG83akIyaHIzQVNuWCt5RDdDaTVFS0g0ZTRvVUZ4SlhBc05VYjU4VmpUREE3YWtXTUh3NzR2Qlhqa1FYM0FXczB4aUFiKzJCRysxMzdhUHNFcERPOVZSOVh2OHAweWh2M0p2THQ5eTczSml6dyt5QTlTMlpKWkIvM1A1ak82UFliemI1cFVhQWZFK3o3MC92UUZleU0wYy90RytYTFJ5b29TRVF1S2tmUzdvMGZEaVFkM0hiNGFkUi9kMXdkOTVUZEU5WmJIUlBtWWgwVDZuQWRFOXFJNWdXei9XUWhIZnNIMlBsYzF3SDNWZGkzeHdQNEN2ZXBGZHdIVDRsZnhOMGEzZ2Z3UXRJaEhsOC9CdlNPdEhCRkdpOEhNYjFLMG4wZWlnZENmbHRJTUJvdkIwVmljQ0tQSGo2M0IvWFUwdkFmM3dmZHQ4UEhpUjRPK3dmWStWelhBYnJIdDlnRHV2ZjZGVG9IeDQyM1V6a2FOd2NtMUVUMUhyZllCaUtIWXFiUkd1Y0g1bHZPUXBnZWpBZlNtYjNNNVJybkI5RzBwdlNJSHRkZkJ5RkNSQ1lmT0FjNVgxSlBqUjRPaTkzM2dkUDNnZDBCOTBqZitCampBN3o0R3hWRDl4ZjcwL2QxQitjZCsyLzcwd2JmKzhrVjk0SDNMOVA3TC9lQnp3b1Z5SkVGeDNsYXJWUWJJbUg3QlBzTDl3UWRIeFAwOXdjZEUreXFuMzF2bFIvN0lmdEMyaDBWVFlVRnBnb1QrSFlLdGFscVdZb2VXb3ByYTJRYmZBcjRCdmY2RlRuM1hRZjdDNGhFTVBzVHRSMzNTZlAzRC9kakg3Y0hDeU1LcXgwT0lCMzhHUVpVL0NNRjVnYS9vc09welJ2eXpFc21MRXRJTERWRHVOaUFIek9GQmZzSWxmVTU5eUViOXlMMDhQY2o5eUlxOHZzZFRVdHpZbWtmcWZkd0JmZlFCZzVJSFJMM1k4RVRjUEpiRmFabkJiZVZySHRxR2hQd2loMFRjR0psQlJQd1JSMjN1d1ZYQmc2Y0N2Y1AwU0w3VGZ0TVJTUDdEL3NQUmZQM1RCNE9YQjMzbE4wVHRsc2RFOVppSFJQYWNCMFR1b2ptQlFzVnR3cE5pQVdGSFFZT0tncnU5eGF5Q2tyOFBSVVQ3Q2tLQzkwOTJSTjVBRFVkRTdrQU13b1R1SUF1Q2hOMGdERUhDOWo3Z0lRZEMvano4Z0c2ODhEekErNzQ4eFZkSFc2aGRha2Y5TDRWZ0IwT1RCMzNYSGNCNE4wRDRDQWQvVnJkOXgwSDgvY0U5MFA3alFYd0J2dHc5OFgzWnZkMUJmc0VCdnVXKzdNRitHY0hDemtkN2U4UzF2SXUzUlBvNFBpbUZmeW0zZmltQnhQd0wyVWREZ0hPNGZldTN3T2hDZ3R2elZDeVE1SUkrMFA3ZkJXUzdkSEw1b01JRS9EWmhNbGNsejJDK3hKQU9TcVRDQlBvTUpSUno1WHdDQTdVK0JUVUFmY2UzUVAzSHZrZUZjSUs5eUhVK3lIM0RBY0xleFgzUVBjQjl5UDNkL2Q1K3dIM0kvdEErMEQ3QWZzaiszbjdkL2NCK3lQM1FCLzdWZmdHRmZkTjBmVDNEd3Y3QXRmNVdOY1N1dmVCUE5vVDBQZXcrWUlWRStEN2dUOEdFOUQzTXYxWUJoUGcrekkvQmhQUTk0RUdEcUNOSFFIM3BkOERTQW9MVngyNjR3UDNtZm1DRlQ0RyswdjdxWXY3eHZkTCs2a0kyQWI3UFBlemkvZXk5enozc3dnTyt3TFgrVmpYRXJyYVBQZUJFK0M2K1lJVi9mQUhFOUQzZ2RjR0UrRDdNdmxZQmhQUTl6TFhCZzczTGZlQ0ZUV0RCYTRLQy9qMnlRRzZ5d1AzQS9sMkZVc0dRNHpJVTlvYjJzakQwNHdmU3dabWltcHVZQnRnYWFpd0h3NFZpeDNIQ2l3SzIvY1dkeDBMOXo0Rzl6TG8zZmNkOXhvdTIvc3lIL3MrKy9NVjk2SDNQZ2YzQWNGZk16QlZYZnNCSHc3V0hSUDA5d1VkQ3lVSzJ2Y1dBZmRCM3dOQ0hRdmRBOE1kQzE4ZCsyNlJIUXY1bTJjZCs0RDRPV1lkQy9jUkhmeFMreVU1K0JEZCt5djVDQVlUNkVrR1BtcHBQeDRPK1BYM0ZnRzY5NmJYQ3NJV1pRb1Z0cXVvdWJtc2JtQmthbkpkWFd1a3NoNEwreVNNNkNYM0Z4djNIK1B4OXpZZitHSTMvR0lIK3doWFNUQTBXTW4zQW9vZUN5QWRPZmdzQi9zaiswa3UrMno3ZXhyakJ2ZDk3L2RzOXlQM1NoN2FCdzVvSGZ0Zjl5MS9IU0poK3dUN0N4L09ZTm9kRXFENUJoUGNMeDBMRmIwR0UvU0E1TGZFNVIvM0N4MFQ5Z0JpQmhQMUFBdUY5d0lCdXZjRUEvS0ZSQjBPK1BUdkFicnlBKzc0OUJWdUhXMmhkNmtmRGdIRStFZlVIUXY3WVFacyszWUZ4Z2F3b2FTT29odXpxbWRlWEd4cVkyZHNvYTJFSHd1N0NnNTIrUWpkd3dvTEEvZDYrY2tWKzB2OFovZEwvR2dGMmdiN1MvaG85MHY0WndVTEZmZGZCa0FyWGZzRit3MGF5UWIzRThEM0NkbnZIcmY3cHdjTCt4aDI5eTMyQWJyMUEvY3RGbWdkRHZqNjZnRzY0Y1RoQTdyNVdSVXM0ZW9IeEN3aUNpQWQrM3NITDVZeGp5OGV3UWFRNTVYbDV4cjNld2NUNEF2NDlmY1dBYnIzTHdPNitYY2hDdEFWKzN2Zjkzc0g1NEhsaHVjZVZRYUhMNEF4THhvVDRBdjNYMlFLOXpuN09mdGYrMkg3T2ZzNSsyQUwrd3c5UXRuaUhRc0I5NHZmQStBSzMva0k5M0VHQy9od0ZTWUc5ejc3WFBzKysxd0Y4QWIzSHZjNEJkTUhDeFYzQ3QzNzFEbjNDdnkyK3hBR0RxQ05IWGdLMy9sYUJ3djNNUlp1b1hXcFhSMGVEdm5KRlR3RzkwdjhaL3RML0dnRjJnYjNTL2hvQlF2Y2xCWDA5eDhGK3g4SERuV3BxRVFLYm0wTC9QY0grL1Q0OXdVTEZiSUdaZnN0QmJzR3cvY3RCWXoySVFZTzk1SFhBYnIzM2dPNjk5MFZQL2ZlMXdjT0pSM3hIUXZySFE1N0ZmZFo5eEQzSS9kM0M5MWVkdmVvM2ZleTNSSzg0L2hHM1VuTkN4WDE5bU1Hc2ZjdEJWc0dVL3N0QlE3akN2ZWorNk1GQzlnS0R0dkl1TlM4YnJGYm53dkZYZ2Y3T3hiMDl4OEYreDhIRGdQM1h2bDNGVEFHUy9zV0Jjc0dDeFhybU1MRDRCdk54MlA3QkpvZkMvOEFBb0FBL3dCTWdBRDRXbmNCQy9zVmR2bndkd0huMkFQbitWb1ZDL3NDRmRrRzk3ejU4QVU4Qmc0UzRQOEFTWUFBLy8rMmdBRGRDeW5UOXNaU3ovZTN4UGNnMGhJTHhmYzF3OVBGQWZnSnlRUDRMUXNqSGNvbUNyempDL2k4SUIzOG96bjNjdjBJQy9zVmR2Y2UydmdoMlg5M0VndUwzZmVDM2ZkMjNSTG4zd3YzOXhYN3l2ZkxCZnNBQmd2N0dIYjNMZmIzaVBjQ0VndjdQT3I3QWZjbkMrTlY0L2VyNDFYakUvSUxpOWY0VzNjQnV2aHdBd3VMK1ZvQm9QbkhBL2N2Qy9jQnVDb2lKbDRwK3dFTEFBQUJBQUFBREFBQUFBQUFBQUFDQUNzQUFnQU1BQUVBRHdBaUFBRUFKUUFyQUFFQUxRQkJBQUVBUXdCUUFBRUFWQUJhQUFFQVhBQmZBQUVBWVFCdkFBRUFjUUIxQUFFQWR3Q2tBQUVBcFFDbUFBSUFwd0N5QUFFQXRBQzVBQUVBdmdESUFBRUF5Z0Q0QUFFQS9BRUJBQUVCQXdFR0FBRUJDQUVXQUFFQkdBRWNBQUVCSGdGV0FBRUJWd0ZhQUFJQld3RmNBQUVCcVFHcEFBRUJxZ0dzQUFJQnJ3R3dBQUVCc2dHekFBRUJ0Z0czQUFFQndRSEJBQUVCd3dIREFBRUJ5Z0hLQUFFQnpRSFVBQUVCMWdIWEFBRUIyUUhhQUFFQ0FBSUJBQUVDQ2dJTkFBSUNGd0lZQUFFQ0h3SWZBQUVDSVFJakFBRUNLZ0lxQUFFQ0xnSXVBQUVDUVFKQkFBRUNZd0prQUFFQ2J3S0JBQU1BQUFBQkFBQUFDZ0RVQVhvQUFrUkdURlFBRG14aGRHNEFMQUFLQUFGTlFVZ2dBQlFBQVAvL0FBSUFBQUFNQUFELy93QUNBQUVBRFFBNkFBbEJXa1VnQUVSRFVsUWdBRTVMUVZvZ0FGaE5RVWdnQUdKTlQwd2dBR3hPVEVRZ0FIWlNUMDBnQUlCVVFWUWdBSXBVVWtzZ0FKUUFBUC8vQUFJQUFnQU9BQUQvL3dBQ0FBTUFEd0FBLy84QUFnQUVBQkFBQVAvL0FBSUFCUUFSQUFELy93QUNBQVlBRWdBQS8vOEFBZ0FIQUJNQUFQLy9BQUlBQ0FBVUFBRC8vd0FDQUFrQUZRQUEvLzhBQWdBS0FCWUFBUC8vQUFJQUN3QVhBQmhyWlhKdUFKSnJaWEp1QUpKclpYSnVBSkpyWlhKdUFKSnJaWEp1QUpKclpYSnVBSkpyWlhKdUFKSnJaWEp1QUpKclpYSnVBSkpyWlhKdUFKSnJaWEp1QUpKclpYSnVBSkp0WVhKckFKcHRZWEpyQUpwdFlYSnJBSnB0WVhKckFKcHRZWEpyQUpwdFlYSnJBSnB0WVhKckFKcHRZWEpyQUpwdFlYSnJBSnB0WVhKckFKcHRZWEpyQUpwdFlYSnJBSm9BQUFBQ0FBQUFBUUFBQUFRQUFnQURBQVFBQlFBR0FBNEFoZ2xjQzBZTHVCWGFBQUlBQ0FBQkFBZ0FBZ0FjQUFRQUFBQW9BREFBQWdBREFBRC83QUFBQUFBQUFQL1lBQUVBQkFHdEFhNEJ6QUlHQUFFQ0JnQUJBQUVBQWdBS0FBOEFEd0FCQUNVQUpRQUJBRWdBU0FBQkFGUUFWQUFCQUZrQVdRQUJBVjhCWHdBQkFXZ0JhQUFCQVgwQmZRQUJBYTRCcmdBQ0FoUUNGQUFCQUFJQUNBQUNBQW9BZWdBQkFCUUFCQUFBQUFVQUlnQXNBRElBUkFCS0FBRUFCUUFPQUJrQUpBQmhBUHdBQWdBWi8rMEJDUC9zQUFFQVEvLzJBQVFBeWYvMkFONy83QUZQLyt3QlYvLzJBQUVBQXYrbUFBa0F0UC9ZQUxyLzJBQysvOWdBeXYvWUFPLy8yQUQ3LzlnQkFQL1lBU3IvNXdFMS85Z0FBZ1RxQUFRQUFBVnlCdElBR3dBWEFBRC84di9lLyt6L3B2L3gvN29BQ3YvWi8vSC94Zi9zLzg0QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVAvMy8rd0FBUC9zQUFELzdBQUFBQUFBQUFBQS8vSC85Z0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBUC8yQUFBQUFQL3hBQUFBQUFBQUFBQUFBQUFBQUFBQUFQL29BQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUE4QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFEL3hBQUFBQUFBQUFBQUFBQUFBQUFBLy9ZQUFBQUEvN0FBQVAvMkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBUC8yQUFBQUFBQUFBQUFBQ2dBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFELzhRQUFBQUFBQUFBQUFBRC8rd0FBLyt3QUFBQUFBQUQvOWdBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBUC9pLzV3QUFQK3hBQUFBQVAvWi8rTC81Ly9ZQUJRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFQLzJBQUFBQVAvc0FBRC83QUFBLy9ZQUFQL1lBQUQvOGYvbi8rd0FBUC9ZLytmLzdQL3MvK3dBQUFBQUFBQUFBUCt3QUFBQUFBQUFBQUQvNlFBQS8rY0FBUC8zQUFEL3VnQUFBQUFBQUFBQUFBRC85d0FBQUFBQUFBQUEvL0lBQVAveEFBQUFBUC9pQUFBQUFQL3hBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBLzM3LzdBQVRBQUFBRi8vWi8rei91Z0FBLzkvLzlnQUFBQUQvN0FBQUFBQUFBUC8zQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBRC85Z0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBLy9IL3NQL2pBQUFBQUFBSy8rd0FBUC9PQUFBQUFBQUEvN3NBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVAvc0FBRC8yQUFBQUFBQUFQLzNBQUQvemdBQUFBRC80Z0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUEvK3dBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVVBQUFBQUFBQUFBUC94QUFBQUFBQUFBQUFBQUFBQS85bi83QUFBQUFELzlnQUFBQUQvNGdBQS8vSUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBUC9zQUFELzRnQUFBQUFBQUFBQS85UUFBQUFBQUFBQUFBQUFBQUQvN1FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQS8vYi96di8yLytnQUFBQUFBQUFBQUFBQUFBRC8rQUFUQUFBQUFBQUFBQUFBQUFBQS85Z0FBUC9zQUFELzhmL3gvK2dBQVAvc0FBQUFBUC8yLy9ZQUFBQUEvK3dBQVAveUFBQUFBQUFBQUFBQUFQKzZBQUQvemdBRi8rd0FBUC9pLy9iLzUvLzIvL2IvemdBQS8rd0FBUC83QUFBQUFQL3lBQUFBQUFBQUFBQUFBQUFBQUFELzdQLzJBQUQvOFFBQUFBRC80di9zQUFBQUFBQUEvOFQvNC8vWUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBUC9zQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUV3QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUEvKzBBQVAvdEFBQUFBQUFBQUFBQUFBQUEvL0VBQUFBQUFBQUFBQUFBQUFBQUFBQUEvL0gvOWdBQUFBRC83QUFBLytjQUFBQUFBQUQvemdBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBUC8yLyt3QUFBQUEvL2IvMVAvTy8rMy83QUFBQUFELzlnQUFBQUFBQUFBQUFBQUFBUC9vQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFELzhnQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBRUFRZ0FDQUE0QUR3QVZBQmtBSkFBbEFDc0FMZ0E0QURzQVBRQkNBRU1BU0FCU0FGUUFWUUJaQUdFQVpRQndBSEVBZGdCM0FIMEFnd0NuQUxNQXRBQzZBTDRBeVFEUUFOTUEzZ0RpQU9RQTZRRHFBTzhBK1FEN0FQd0JBQUVJQVF3QkZ3RVlBUjBCSGdFa0FTb0JOUUZBQVVvQlR3RlhBVmdCWHdGb0FYMEJ1d0c4QWhRQ1dBQUNBRG9BRGdBT0FBRUFEd0FQQUFJQUZRQVZBQWdBR1FBWkFBTUFKQUFrQUFRQUpRQWxBQVVBS3dBckFCQUFMZ0F1QUJBQU9BQTRBQXdBT3dBN0FBNEFQUUE5QUFjQVFnQkRBQVlBU0FCSUFBZ0FVZ0JTQUFrQVZBQlVBQWdBVlFCVkFBb0FXUUJaQUFnQVlRQmhBQXNBWlFCbEFBd0FjQUJ4QUEwQWRnQjJBQTRBZHdCM0FBMEFmUUI5QUE4QWd3Q0RBQW9BcHdDbkFCSUFzd0MwQUJRQXVnQzZBQkFBdmdDK0FCUUF5UURKQUJFQTBBRFFBQk1BMHdEVEFCQUEzZ0RlQUJBQTRnRGlBQmtBNUFEa0FCSUE2UURxQUJNQTd3RHZBQlFBK1FENUFCUUErd0Q3QUJBQS9BRDhBQlVCQUFFQUFCUUJDQUVJQUJZQkRBRU1BQmNCRndFWUFCZ0JIUUVkQUJrQkhnRWVBQmdCSkFFa0FCb0JLZ0VxQUJNQk5RRTFBQk1CUUFGQUFCQUJTZ0ZLQUJBQlR3RlBBQkFCVndGWEFCRUJXQUZZQUJZQlh3RmZBQWdCYUFGb0FBZ0JmUUY5QUFnQnV3RzdBQTBDRkFJVUFBZ0FBZ0JCQUFJQUFnQU5BQTRBRGdBQkFBOEFEd0FEQUJVQUZRQUJBQmtBR1FBQkFDUUFKQUFSQUNVQUpRQURBQ3NBS3dBUkFDNEFMZ0FSQURnQU9BQUNBRHNBT3dBQkFEMEFQUUFCQUVJQVF3QUJBRWdBU0FBREFGSUFVZ0FCQUZRQVZBQURBRlVBVlFBQkFGa0FXUUFEQUdFQVlRQUVBR1VBWlFBRkFIQUFjUUFHQUhZQWRnQVFBSGNBZHdBR0FJTUFnd0FCQUtjQXB3QUhBTE1Bc3dBUkFMUUF0QUFKQUxvQXVnQUpBTDRBdmdBSkFNa0F5UUFJQU1vQXlnQUpBTkFBMEFBVEFOTUEwd0FUQU40QTNnQU9BT0lBNGdBVEFPUUE1QUFWQU9rQTZnQVRBTzhBN3dBSkFQa0ErUUFUQVBzQSt3QUpBUHdBL0FBVEFRQUJBQUFKQVFnQkNBQUtBUXdCREFBTEFSY0JHQUFNQVIwQkhRQVBBUjRCSGdBTUFTUUJKQUFXQVNvQktnQUhBVFVCTlFBSkFVQUJRQUFSQVVvQlNnQVRBVThCVHdBT0FWY0JWd0FJQVZnQldBQUtBVjhCWHdBREFXZ0JhQUFEQVgwQmZRQURBYTBCclFBVUFhNEJyZ0FTQWJzQnV3QU5BYndCdkFBR0Fjd0J6QUFVQWhRQ0ZBQURBbGdDV0FBTkFBUUFBQUFCQUFnQUFReUtBQXdBQXdCVUFLSUFBUUFpQWE4QnNBR3lBYk1CdGdHM0FjRUJ3d0hLQWMwQnpnSFBBZEFCMFFIU0FkTUIxQUhXQWRjQjJRSGFBZ0FDQVFJWEFoZ0NId0loQWlJQ0l3SXFBaTRDUVFKakFtUUFFd0FBREpnQUFBeWVBQUFNcEFBQURLb0FBQXl3QUFBTXRnQUFETHdBQUF6Q0FBQU15QUFBRE00QUFBelVBQUFNMmdBQURPQUFBUXp5QUFFTTVnQUNET3dBQVF6eUFBQU0rQUFBRFA0QUlnRE9BQUFBQUF5QUFBQUFBQURnQUFBQUFBQUFBTlFBQUF5U0FBQUFBQURhQUFBQUFBeVNBQUFBQUFEZ0FBQUFBQUVFQUFBQUFBeUFBQUFBQUFEbUFBQUFBQXU4QUFBQUFBRCtBQUFBQUFEc0FQSUFBQUVRQUFBQUFBcWlBUGdBQUFEK0FBQUFBQUVFQUFBQUFBRUtBQUFBQUFFUUFBQUFBQXl3QUFBQUFBRVdBQUFBQUFFY0FBQUFBQUVpQUFBQUFBRW9BQUFBQUFuUUNlSUFBQXZJQzg0QUFBcWlBQUFBQUFvQUNpUUFBQXBVQ2xvQUFBRXVBQUFBQUFBQUFBQUJOQUU2QUFBQUFBRTZBQUFBQUFBQkFJb0NFZ0FCQUdrQUVnQUJBSVVDRWdBQkFHa0NFZ0FCQUpBQ0VnQUJBR0lDRWdBQkFHQUFFZ0FCQVNRQUlnQUJBR0FDRWdBQkFGNENFZ0FCQUdFQ0VnQUJBUThDRWdBQkFFWUNFZ0FCQUdzQ0VnQUJBY2NDRWdBQkFMWUNFZ0FCQUlJQ0VnQUJBZmdBQUFBQkFhb0NFZ0FFQUFBQUFRQUlBQUVBREFBY0FBRUFJZ0JnQUFJQUFnSnZBbnNBQUFLQUFvRUFEUUFCQUFFQnFRQVBBQUFLNEFBQUN1WUFBQXJzQUFBSzhnQUFDdmdBQUFyK0FBQUxCQUFBQ3dvQUFBc1FBQUFMRmdBQUN4d0FBQXNpQUFBTEtBQUFDMEFBQUF0R0FBRUFCQUFCQUl3QUh3QUVBQUFBQVFBSUFBRUtMZ0FNQUFNS1FnQ0lBQUlBRkFBQ0FBd0FBQUFQQUNJQUN3QWxBQ3NBSHdBdEFFRUFKZ0JEQUZBQU93QlVBRm9BU1FCY0FGOEFVQUJoQUc4QVZBQnhBSFVBWXdCM0FLUUFhQUNuQUxJQWxnQzBBTGtBb2dDK0FNZ0FxQURLQVBnQXN3RDhBUUVBNGdFREFRWUE2QUVJQVJZQTdBRVlBUndBK3dFZUFWWUJBQUZiQVZ3Qk9RRTdDb29La0FBQUNvb0trQUFBQ29vS2tBQUFDb29La0FBQUNvb0trQUFBQ29vS2tBQUFDb29La0FBQUNvb0trQUFBQ29vS2tBQUFDb29La0FBQUNvb0trQUFBQUFBSVBBaENBQUFJUEFoQ0FBQUlQQWhDQUFBSVBBaENBQUFJUEFoQ0FBQUlQQWhDQUFBSFpBZHFBQUFIY0FkMkFBQUhaQWRxQUFBSGNBZDJCK2dIN2dmMEIrZ0g3Z2YwQitnSDdnZjBCK2dIN2dmMEIrZ0g3Z2YwQitnSDdnZjBCK2dIN2dmMEIrZ0g3Z2YwQitnSDdnZjBCK2dIN2dmMEFBQUlQQWhDQUFBSVBBaENBQUFJUEFoQ0FBQUlQQWhDQUFBSVBBaENBQUFJUEFoQ0FBQUhmQUFBQUFBSGZBQUFDbHdIK2dnQUNsd0hnZ2dBQ2x3SCtnZ0FDbHdIK2dnQUNsd0grZ2dBQ2x3SCtnZ0FDbHdIK2dnQUNsd0grZ2dBQ2x3SCtnZ0FDbHdIK2dnQUFBQUhpQUFBQUFBSGlBQUFBQUFIaUFBQUFBQUhqZ2VVQUFBSGpnZVVBQUFIK2dmS0FBQUgrZ2ZLQUFBSCtnZktBQUFIK2dmS0FBQUhtZ2VnQUFBSDBBZldBQUFIMEFmV0FBQUgwQWZXQUFBSDBBZldBQUFIMEFmV0FBQUlQQWhDQUFBSVBBaENBQUFJUEFoQ0FBQUlQQWhDQUFBSVBBaENBQUFJUEFoQ0FBQUlQQWhDQUFBSHBnZXNBQUFJUEFoQ0FBQUlQQWhDQUFBSHNnZTRBQUFIc2dlNEFBQUhzZ2U0QUFBSHNnZTRBQUFIdmdmaUFBQUh2Z2ZpQUFBSHZnZmlBQUFIdmdmaUFBQUh2Z2ZpQUFBSHZnZmlBQUFIeEFtTUFBQUh4QW1NQUFBSHhBbU1BQUFIeEFtTUNyWUt2QXJDQ3JZS3ZBckNDcllLdkFyQ0NyWUt2QXJDQ3JZS3ZBckNDcllLdkFyQ0NyWUt2QXJDQ3JZS3ZBckNDcllLdkFyQ0NyWUt2QXJDQ3JZS3ZBckNBQUFJQmdnTUFBQUlCZ2dNQUFBSUJnZ01BQUFJQmdnTUFBQUlCZ2dNQUFBSUVnZ1lBQUFJRWdnWUFBQUlFZ2dZQUFBSUVnZ1lBQUFJRWdnWUFBQUlFZ2dZQUFBSUhnZ2tBQUFJSGdna0FBQUlIZ2drQUFBSUhnZ2tBQUFIK2dmS0FBQUgwQWZXQUFBSDNBZmlBQUFIM0FmaUFBQUgzQWZpQUFBSDNBZmlDQ29JTUFnMkNDb0lNQWcyQ0NvSU1BZzJDQ29JTUFnMkNDb0lNQWcyQ0NvSU1BZzJDQ29JTUFnMkNDb0lNQWcyQ0NvSU1BZzJBQUFJUEFoQ0FBQUlQQWhDQUFBSVBBaENBQUFJUEFoQ0FBQUlQQWhDQUFBSVBBaENDb29La0FBQUFBQUlQQWhDQitnSDdnZjBCK2dIN2dmMEFBQUlQQWhDQ2x3SCtnZ0FDbHdIK2dnQUFBQUlQQWhDQ3JZS3ZBckNBQUFJQmdnTUFBQUlFZ2dZQUFBSUhnZ2tDQ29JTUFnMkNDb0lNQWcyQUFBSVBBaENDWFFKZWdtQUNYUUplZ21BQ1hRSmVnbUFDWFFKZWdtQUNYUUplZ21BQ1hRSmVnbUFDWFFKZWdtQUNYUUplZ21BQ1hRSmVnbUFDWFFKZWdtQUNYUUplZ21BQ0VnSVRnaFVBQUFKaGdtTUFBQUpoZ21NQUFBSmhnbU1BQUFKaGdtTUFBQUpoZ21NQUFBSmhnbU1DUEFJOWdtTUNQQUk5Z21NQ1BBSTlnbU1DUEFJOWdtTUNQQUk5Z21NQ1BBSTlnbU1DUEFJOWdtTUNQQUk5Z21NQ1BBSTlnbU1DUEFJOWdtTUNGb0lZQWhtQUFBSS9BQUFBQUFJL0FBQUFBQUkvQUFBQUFBSS9BQUFBQUFJL0FBQUFBQUkvQUFBQUFBSWJBQUFBQUFJYkFBQUFBQUliQUFBQ1E0SkZBQUFDUTRKRkFBQUNRNEpGQUFBQ1E0SkZBQUFDUTRKRkFBQUNRNEpGQUFBQ1E0SkZBQUFDUTRKQ0FBQUNRNEpGQUFBQ1E0SkZBQUFDUTRKRkFBQUFBQUpHZ0FBQUFBSkdnQUFBQUFKR2dBQUFBQUpHZ0FBQUFBQUFBaHlBQUFBQUFoeUFBQUl1Z3BXQUFBSXVncFdBQUFJdWdwV0FBQUl1Z3BXQUFBSWVBaCtBQUFJaEFpS0FBQUl3QWpHQUFBSXdBakdBQUFJd0FqR0FBQUl3QWpHQUFBSXdBakdBQUFKaGdtTUFBQUpoZ21NQUFBSmhnbU1BQUFKaGdtTUFBQUpoZ21NQUFBSmhnbU1BQUFKaGdtTUFBQUpoZ21NQUFBSmhnbU1DSkFJbGdpY0FBQUlvZ2lvQUFBSW9naW9BQUFJb2dpb0FBQUlvZ2lvQUFBSXJnaTBBQUFJcmdpMEFBQUlyZ2kwQUFBSXJnaTBBQUFJcmdpMEFBQUlyZ2kwQUFBQUFBcm9BQUFBQUFyb0FBQUFBQXJvQUFBQUFBcm9DU0FKSmdrc0NTQUpKZ2tzQ1NBSkpna3NDU0FKSmdrc0NTQUpKZ2tzQ1NBSkpna3NDU0FKSmdrc0NTQUpKZ2tzQ1NBSkpna3NDU0FKSmdrc0NTQUpKZ2tzQUFBSk1nazRBQUFKTWdrNEFBQUpNZ2s0QUFBSk1nazRBQUFKTWdrNEFBQUpQZ0FBQUFBSlBnQUFBQUFKUGdBQUFBQUpQZ0FBQUFBSlBnQUFBQUFKUGdBQUFBQUpSQWxLQUFBSlJBbEtBQUFKUkFsS0FBQUpSQWxLQUFBSXVncFdBQUFJd0FqR0NWQUpWZ2xjQ1ZBSlZnbGNDVkFKVmdsY0NWQUpWZ2xjQ1ZBSlZnbGNDVkFKVmdsY0NWQUpWZ2xjQ1ZBSlZnbGNDVkFKVmdsY0NWQUpWZ2xjQ1ZBSlZnbGNDV0lKYUFsdUNXSUphQWx1Q1dJSmFBbHVDV0lKYUFsdUNXSUphQWx1Q1dJSmFBbHVDV0lKYUFsdUNXSUphQWx1Q1dJSmFBbHVDV0lKYUFsdUNXSUphQWx1QUFBSTJBamVBQUFJMkFqZUFBQUl6QWpTQUFBSTJBamVBQUFJNUFqcUNYUUplZ21BQUFBSmhnbU1DUEFJOWdtTUNQQUk5Z21NQUFBSS9BQUFDUTRKQWdBQUNRNEpGQUFBQ1E0SkZBQUFDUTRKQ0FBQUNRNEpGQUFBQUFBSkdnQUFBQUFKaGdtTUNTQUpKZ2tzQUFBSk1nazRBQUFKUGdBQUFBQUpSQWxLQ1ZBSlZnbGNDV0lKYUFsdUNYUUplZ21BQUFBSmhnbU1BQUVCUkFMR0FBRUJTZ0FBQUFFQm5BTEdBQUVCb2dBQUFBRUJYd0xHQUFFQ25BTEdBQUVCM2dMR0FBRUJXd0xHQUFFQld3QUFBQUVBcUFMR0FBRUJXZ0FBQUFFQmR3TEdBQUVCZHdBQUFBRUJVQUxHQUFFQlhRQUFBQUVCU2dMR0FBRUJJUUxHQUFFQk9BQUFBQUVCY1FMR0FBRUJjQUFBQUFFQlN3TEdBQUVCU3dBQUFBRUNJUUFBQUFFQlBBTEhBQUVCUGdBQUFBRUFoZ0xHQUFFQWhnQUFBQUVCeHdMR0FBRUJ4d0FBQUFFQk93TEdBQUVCT3dBQUFBRUJGZ0xHQUFFQkZnQUFBQUVCZlFBQUFBRUExd0xHQUFFQTF3QUFBQUVCY2dMR0FBRUJjZ0FBQUFFQzJRQUFBQUVDamdJUUFBRUNqZ0FBQUFFQXl3SVNBQUVCRmdJU0FBRUJGZ0FDQUFFQWZnTEdBQUVCTHdBQUFBRUExUUxHQUFFQkFRQUFBQUVCdXdJU0FBRUJ1d0FBQUFFQytnQUFBQUVDcndJUUFBRUNyd0FBQUFFQXlRSVNBQUVBZmdBQUFBRUJDQUlTQUFFQkRBQUFBQUVBZndMR0FBRUJKd0lTQUFFQkp3QUFBQUVBZ0FMR0FBRUFnQUFBQUFFQWhRTEdBQUVBaFFBQUFBRUEwQUxHQUFFQTBBQUFBQUVCYkFBQUFBRUJJUUlRQUFFQkhRSVNBQUVBZVFJU0FBRUJmQUlTQUFFQXB3QUFBQUVBZmdJU0FBRUFpUUlTQUFFQjlRQUFBQUVCSWdJU0FBRUJJZ0FBQUFFQm1nSVNBQUVCbWdBQUFBRUJEQUlTQUFFQkZBSVNBQUVCRkFBQUFBRUI0QUFBQUFFQkN3SVNBQUVCQ1FBQUFBRUNCUUFBQUFFQklBSVNBQUVCSFFBQUFBRUNHd0FEQUFFQkdRSVNBQUVCR0FBQUFBRUJJUUlTQUFFQklRQUFBQVVBQUFBQkFBZ0FBUUFNQUJZQUF3QWdBTm9BQWdBQkFtOENnUUFBQUFFQUF3Q2xBS1lCV0FBVEFBRUFUZ0FCQUZRQUFRQmFBQUVBWUFBQkFHWUFBUUJzQUFFQWNnQUJBSGdBQVFCK0FBRUFoQUFCQUlvQUFRQ1FBQUVBbGdBQ0FLZ0FBZ0NjQUFBQW9nQUNBS2dBQVFDdUFBRUF0QUFCQUtRQ0VnQUJBRm9DRWdBQkFLY0NFZ0FCQUZJQ0VnQUJBSVlDRWdBQkFEd0NFZ0FCQUxjQ0VnQUJBTG9DRWdBQkFMd0NFZ0FCQUlzQ0VnQUJBTllDRWdBQkFLOENFZ0FCQUYwQ0VnQUJBS3NBQUFBQkFMQUFBQUFCQUk0QUFBQUJBTFFDRWdBQkFHTUNFZ0FEQUFnQU5BQm1BQUlBRGdBVUFBQUFHZ0FnQUNZQUFRS0hBQUFBQVFGT0FzWUFBUVFZQUFBQUFRTnpBc1lBQVFOekFBQUFBZ0FPQUJRQUdnQWdBQ1lBTEFBQkFid0FBQUFCQVZnQ3hnQUJBVmdBQUFBQkJDMEFBQUFCQTRjQ3hnQUJBNGNBQUFBQ0FBQUFBQUFPQUFBQUFBQVVBQUVBN2dBQUFBRUNHd0FBQUFBQUFRQUFBQW9Dc0FtYUFBSkVSa3hVQUE1c1lYUnVBSG9BQ2dBQlRVRklJQUE2QUFELy93QVZBQUFBREFBWUFDUUFNQUE4QUZJQVhnQnFBSFlBZ2dDT0FKb0FwZ0N5QUw0QXlnRFdBT0lBN2dENkFBRC8vd0FXQUFFQURRQVpBQ1VBTVFBOUFFZ0FVd0JmQUdzQWR3Q0RBSThBbXdDbkFMTUF2d0RMQU5jQTR3RHZBUHNBT2dBSlFWcEZJQUJxUTFKVUlBQ2NTMEZhSUFET1RVRklJQUVBVFU5TUlBRXlUa3hFSUFGa1VrOU5JQUdXVkVGVUlBSElWRkpMSUFINkFBRC8vd0FWQUFJQURnQWFBQ1lBTWdBK0FGUUFZQUJzQUhnQWhBQ1FBSndBcUFDMEFNQUF6QURZQU9RQThBRDhBQUQvL3dBV0FBTUFEd0FiQUNjQU13QS9BRWtBVlFCaEFHMEFlUUNGQUpFQW5RQ3BBTFVBd1FETkFOa0E1UUR4QVAwQUFQLy9BQllBQkFBUUFCd0FLQUEwQUVBQVNnQldBR0lBYmdCNkFJWUFrZ0NlQUtvQXRnRENBTTRBMmdEbUFQSUEvZ0FBLy84QUZnQUZBQkVBSFFBcEFEVUFRUUJMQUZjQVl3QnZBSHNBaHdDVEFKOEFxd0MzQU1NQXp3RGJBT2NBOHdEL0FBRC8vd0FXQUFZQUVnQWVBQ29BTmdCQ0FFd0FXQUJrQUhBQWZBQ0lBSlFBb0FDc0FMZ0F4QURRQU53QTZBRDBBUUFBQVAvL0FCWUFCd0FUQUI4QUt3QTNBRU1BVFFCWkFHVUFjUUI5QUlrQWxRQ2hBSzBBdVFERkFORUEzUURwQVBVQkFRQUEvLzhBRmdBSUFCUUFJQUFzQURnQVJBQk9BRm9BWmdCeUFINEFpZ0NXQUtJQXJnQzZBTVlBMGdEZUFPb0E5Z0VDQUFELy93QVdBQWtBRlFBaEFDMEFPUUJGQUU4QVd3Qm5BSE1BZndDTEFKY0Fvd0N2QUxzQXh3RFRBTjhBNndEM0FRTUFBUC8vQUJZQUNnQVdBQ0lBTGdBNkFFWUFVQUJjQUdnQWRBQ0FBSXdBbUFDa0FMQUF2QURJQU5RQTRBRHNBUGdCQkFBQS8vOEFGZ0FMQUJjQUl3QXZBRHNBUndCUkFGMEFhUUIxQUlFQWpRQ1pBS1VBc1FDOUFNa0ExUURoQU8wQStRRUZBUVpoWVd4MEJpWmhZV3gwQmlaaFlXeDBCaVpoWVd4MEJpWmhZV3gwQmlaaFlXeDBCaVpoWVd4MEJpWmhZV3gwQmlaaFlXeDBCaVpoWVd4MEJpWmhZV3gwQmlaaFlXeDBCaVpqWTIxd0JpNWpZMjF3Qmk1alkyMXdCaTVqWTIxd0JpNWpZMjF3Qmk1alkyMXdCaTVqWTIxd0JpNWpZMjF3Qmk1alkyMXdCaTVqWTIxd0JpNWpZMjF3Qmk1alkyMXdCaTVrYkdsbkJqUmtiR2xuQmpSa2JHbG5CalJrYkdsbkJqUmtiR2xuQmpSa2JHbG5CalJrYkdsbkJqUmtiR2xuQmpSa2JHbG5CalJrYkdsbkJqUmtiR2xuQmpSa2JHbG5CalJtY21GakJqcG1jbUZqQmpwbWNtRmpCanBtY21GakJqcG1jbUZqQmpwbWNtRmpCanBtY21GakJqcG1jbUZqQmpwbWNtRmpCanBtY21GakJqcG1jbUZqQmpwbWNtRmpCanBtZDJsa0JrQm1kMmxrQmtCbWQybGtCa0JtZDJsa0JrQm1kMmxrQmtCbWQybGtCa0JtZDJsa0JrQm1kMmxrQmtCbWQybGtCa0JtZDJsa0JrQm1kMmxrQmtCbWQybGtCa0JzYVdkaEJrWnNhV2RoQmtac2FXZGhCa1pzYVdkaEJrWnNhV2RoQmtac2FXZGhCa1pzYVdkaEJrWnNhV2RoQmtac2FXZGhCa1pzYVdkaEJrWnNhV2RoQmtac2FXZGhCa1pzYjJOc0JreHNiMk5zQm1Sc2IyTnNCbVJzYjJOc0JtUnNiMk5zQmxKc2IyTnNCbDVzYjJOc0JsaHNiMk5zQmw1c2IyTnNCbVJzYjJOc0JtUnZjbVJ1Qm1wdmNtUnVCbXB2Y21SdUJtcHZjbVJ1Qm1wdmNtUnVCbXB2Y21SdUJtcHZjbVJ1Qm1wdmNtUnVCbXB2Y21SdUJtcHZjbVJ1Qm1wdmNtUnVCbXB2Y21SdUJtcHdiblZ0Qm5Kd2JuVnRCbkp3Ym5WdEJuSndiblZ0Qm5Kd2JuVnRCbkp3Ym5WdEJuSndiblZ0Qm5Kd2JuVnRCbkp3Ym5WdEJuSndiblZ0Qm5Kd2JuVnRCbkp3Ym5WdEJuSnphVzVtQm5oemFXNW1Cbmh6YVc1bUJuaHphVzVtQm5oemFXNW1Cbmh6YVc1bUJuaHphVzVtQm5oemFXNW1Cbmh6YVc1bUJuaHphVzVtQm5oemFXNW1Cbmh6YVc1bUJuaHpjekF4Qm41emN6QXhCbjV6Y3pBeEJuNXpjekF4Qm41emN6QXhCbjV6Y3pBeEJuNXpjekF4Qm41emN6QXhCbjV6Y3pBeEJuNXpjekF4Qm41emN6QXhCbjV6Y3pBeEJuNXpjekF5Qm9oemN6QXlCb2h6Y3pBeUJvaHpjekF5Qm9oemN6QXlCb2h6Y3pBeUJvaHpjekF5Qm9oemN6QXlCb2h6Y3pBeUJvaHpjekF5Qm9oemN6QXlCb2h6Y3pBeUJvaHpjekF6QnBKemN6QXpCcEp6Y3pBekJwSnpjekF6QnBKemN6QXpCcEp6Y3pBekJwSnpjekF6QnBKemN6QXpCcEp6Y3pBekJwSnpjekF6QnBKemN6QXpCcEp6Y3pBekJwSnpjekEwQnB4emN6QTBCcHh6Y3pBMEJweHpjekEwQnB4emN6QTBCcHh6Y3pBMEJweHpjekEwQnB4emN6QTBCcHh6Y3pBMEJweHpjekEwQnB4emN6QTBCcHh6Y3pBMEJweHpjekExQnFaemN6QTFCcVp6Y3pBMUJxWnpjekExQnFaemN6QTFCcVp6Y3pBMUJxWnpjekExQnFaemN6QTFCcVp6Y3pBMUJxWnpjekExQnFaemN6QTFCcVp6Y3pBMUJxWnpjekEyQnJCemN6QTJCckJ6Y3pBMkJyQnpjekEyQnJCemN6QTJCckJ6Y3pBMkJyQnpjekEyQnJCemN6QTJCckJ6Y3pBMkJyQnpjekEyQnJCemN6QTJCckJ6Y3pBMkJyQnpjekEzQnJwemN6QTNCcnB6Y3pBM0JycHpjekEzQnJwemN6QTNCcnB6Y3pBM0JycHpjekEzQnJwemN6QTNCcnB6Y3pBM0JycHpjekEzQnJwemN6QTNCcnB6Y3pBM0JycHpjekE0QnNSemN6QTRCc1J6Y3pBNEJzUnpjekE0QnNSemN6QTRCc1J6Y3pBNEJzUnpjekE0QnNSemN6QTRCc1J6Y3pBNEJzUnpjekE0QnNSemN6QTRCc1J6Y3pBNEJzUnpjekE1QnM1emN6QTVCczV6Y3pBNUJzNXpjekE1QnM1emN6QTVCczV6Y3pBNUJzNXpjekE1QnM1emN6QTVCczV6Y3pBNUJzNXpjekE1QnM1emN6QTVCczV6Y3pBNUJzNXpkV0p6QnRoemRXSnpCdGh6ZFdKekJ0aHpkV0p6QnRoemRXSnpCdGh6ZFdKekJ0aHpkV0p6QnRoemRXSnpCdGh6ZFdKekJ0aHpkV0p6QnRoemRXSnpCdGh6ZFdKekJ0aHpkWEJ6QnQ1emRYQnpCdDV6ZFhCekJ0NXpkWEJ6QnQ1emRYQnpCdDV6ZFhCekJ0NXpkWEJ6QnQ1emRYQnpCdDV6ZFhCekJ0NXpkWEJ6QnQ1emRYQnpCdDV6ZFhCekJ0NTBiblZ0QnVSMGJuVnRCdVIwYm5WdEJ1UjBiblZ0QnVSMGJuVnRCdVIwYm5WdEJ1UjBiblZ0QnVSMGJuVnRCdVIwYm5WdEJ1UjBiblZ0QnVSMGJuVnRCdVIwYm5WdEJ1UUFBQUFDQUFBQUFRQUFBQUVBQWdBQUFBRUFFQUFBQUFFQUN3QUFBQUVBRWdBQUFBRUFFUUFBQUFFQUF3QUFBQUVBQmdBQUFBRUFCd0FBQUFFQUJRQUFBQUVBQkFBQUFBSUFEQUFOQUFBQUFRQU9BQUFBQVFBSkFBWUFBUUFUQUFBQkFBQUdBQUVBRkFBQUFRRUFCZ0FCQUJVQUFBRUNBQVlBQVFBV0FBQUJBd0FHQUFFQUZ3QUFBUVFBQmdBQkFCZ0FBQUVGQUFZQUFRQVpBQUFCQmdBR0FBRUFHZ0FBQVFjQUJnQUJBQnNBQUFFSUFBQUFBUUFJQUFBQUFRQUtBQUFBQVFBUEFCOEFRQUhpQTVRRDNBUHdCQVFFSmdSSUJINEVmZ1NNQkpvRkxnVnNCWTRGcGdXK0Jld0dmQWJxQnZnSEVBY29CMEFIY0FlSUI2QUlmZ2lVQ0tvSXhBQUJBQUFBQVFBSUFBSUF6Z0JrQVZzQWxnQ1hBSmdBbVFDUUFKRUFrZ0NUQUpVQWh3Q0lBSWtBakFDTkFJNEFqd0E1QUlFQWdnRmNBSjBBZ3dDRUFJVUFoZ0JmQUdRQW5nQ2ZBS0FBb1FDaUFLTUFwQUZHQVVjQlNBRkpBVXNCVEFGTkFVNEJRQUZCQVVJQlJBRXBBVndCVUFFR0FRc0JVUUZTQVZNQlZBRlZBVllCd2dIUEFkRUIwd0hVQWI0QnhBSExBY0FCMWdIWEFkZ0IyUUhhQWVFQjFRSDZBZnNCN0FIdEFmZ0IrUUhJQWNrQnZ3RzlBY1VDV1FKYUFsc0NYQUpkQWw0Q1h3SmdBbUVDWWdLQUFvRUNmd0tQQXBBQUFRQmtBQUlBQndBVUFCMEFIZ0FsQUNZQUp3QW9BQ29BTGdBd0FERUFOQUExQURZQU53QTRBRUFBUmdCSUFFc0FWUUJXQUZjQVdBQmRBR01BYVFCMEFIb0FnQUNLQUlzQWxBQzVBTUlBd3dET0FOY0EyQURhQU53QTVBRGxBT1lBNkFEdEFPOEE4Z0VFQVFvQkVBRWJBU0VCSndFdkFUb0JyZ0d4QWJNQnRRRzJBYmdCdWdHN0Fid0J3UUhEQWNZQnh3SEtBZHNCM3dIaUFlTUI1QUhsQWVZQjV3SUdBZ2NDRUFJUkFrSUNSQUpGQWtZQ1J3SklBa2tDU2dKTEFrd0NUUUp2QW5BQ2ZBS0NBb01BQXdBQUFBRUFDQUFCQVY0QUtnQmFBR0FBWmdCc0FIUUFlZ0NBQUlZQWpBQ1VBSm9Bb0FDbUFLd0FzZ0M0QUw0QXhBRE9BTmdBNEFEb0FQQUErQUVBQVFnQkVBRVlBUndCSUFFa0FTZ0JMQUV3QVRRQk9BRThBVUFCUmdGTUFWSUJXQUFDQUpRQW1nQUNBSW9BbXdBQ0FJc0FuQUFEQVZzQktnRTFBQUlCS3dFMkFBSUJMQUUzQUFJQkxRRTRBQUlCTGdFNUFBTUJMd0U2QVVVQUFnRXdBVHNBQWdFeEFUd0FBZ0V5QVQwQUFnRXpBVDRBQWdFMEFUOEFBZ0RZQVVvQUFnRGdBVThBQWdFb0FVTUFCQUdVQVo0QmZ3RjlBQVFCbFFHZkFZQUJmZ0FEQVpZQm9BR0JBQU1CbHdHaEFZSUFBd0dZQWFJQmd3QURBWmtCb3dHRUFBTUJtZ0drQVlVQUF3R2JBYVVCaGdBREFad0JwZ0dIQUFNQm5RR25BWWdBQVFGZkFBRUJZQUFCQVdFQUFRRmlBQUVCWXdBQkFXUUFBUUZsQUFFQlpnQUJBV2NBQVFGb0FBSUJ4Z0hNQUFJQndRSE5BQUlCeWdIT0FBSUJ3d0hRQUFJQnh3SFNBQUlBREFBcEFDa0FBQUF5QURNQUFRQ25BTEVBQXdEVEFOTUFEZ0RlQU40QUR3RG5BT2NBRUFGZkFXZ0FFUUYvQVlnQUd3R3RBYTBBSlFHdkFiQUFKZ0d5QWJJQUtBRzBBYlFBS1FBR0FBQUFBZ0FLQUJ3QUF3QUFBQUVGQkFBQkFDNEFBUUFBQUJ3QUF3QUFBQUVFOGdBQ0FCUUFIQUFCQUFBQUhBQUJBQUlDZlFKK0FBSUFBZ0p2QW5NQUFBSjFBbnNBQlFBQkFBQUFBUUFJQUFFQUJnQURBQUVBQVFKOEFBRUFBQUFCQUFnQUFRQUdBQVVBQVFBQkFOTUFBUUFBQUFFQUNBQUNBQTRBQkFCZkFHUUJCZ0VMQUFFQUJBQmRBR01CQkFFS0FBRUFBQUFCQUFnQUFnQU9BQVFBZ1FDQ0FTZ0JLUUFCQUFRQVFBQkdBT2NBN1FBR0FBQUFBUUFJQUFFRWJBQUNBQW9BSEFBQkFBUUFBUUF3QUFFQUFBQUJBQUFBSFFBQkFBUUFBUURWQUFFQUFBQUJBQUFBSFFBQkFBQUFBUUFJQUFFQkxnQTFBQUVBQUFBQkFBZ0FBUUVnQUQ4QUJBQUFBQUVBQ0FBQkFINEFCUUFRQUVRQVVBQm1BSElBQlFBTUFCUUFIQUFrQUN3QmlnQURBYnNCWVFHTEFBTUJ1d0ZpQVkwQUF3RzdBV01CandBREFic0JaQUdRQUFNQnV3Rm5BQUVBQkFHTUFBTUJ1d0ZpQUFJQUJnQU9BWTRBQXdHN0FXTUJrUUFEQWJzQlp3QUJBQVFCa2dBREFic0Jad0FCQUFRQmt3QURBYnNCWndBQkFBVUJZQUZoQVdJQlpBRm1BQVlBQUFBQ0FBb0FKQUFEQUFFQWZBQUJBQklBQUFBQkFBQUFIZ0FCQUFJQUFnQ25BQU1BQVFCaUFBRUFFZ0FBQUFFQUFBQWVBQUVBQWdCSUFPOEFCQUFBQUFFQUNBQUJBQlFBQVFBSUFBRUFCQUlmQUFNQTd3R3RBQUVBQVFCREFBRUFBQUFCQUFnQUFRQUcvK0FBQWdBQkFYOEJpQUFBQUFFQUFBQUJBQWdBQVFBR0FDQUFBZ0FCQVY4QmFBQUFBQVFBQ0FBQkFBZ0FBUUFlQUFJQUNnQVVBQUVBQkFDbEFBSUFMZ0FCQUFRQXBnQUNBQzRBQVFBQ0FBSUFaUUFFQUFnQUFRQUlBQUVBZkFBRUFBNEFLQUF5QUZJQUF3QUlBQTRBRkFGWEFBSUF5UUZaQUFJQTB3RmFBQUlBNUFBQkFBUUJXQUFDQVFnQUF3QUlBQklBR2dHcUFBUUIyd0hiQWpFQnF3QURBZHNDTVFHc0FBSUNNUUFFQUFvQUZBQWNBQ1FDREFBRUFkc0Iyd0hiQWdzQUF3SGJBZHNDRFFBREFkc0NNUUlLQUFJQjJ3QUJBQVFBeVFFSUFkc0NNZ0FCQUFBQUFRQUlBQUlBTkFBWEFjWUJ3Z0hCQWNvQnd3SEhBYjRCeEFITEFjQUI0UUhWQWZvQit3SHNBZTBCK0FINUFjZ0J5UUcvQWIwQnhRQUJBQmNCclFHdUFhOEJzQUd5QWJRQnVBRzZBYnNCdkFIYkFkOEI0Z0hqQWVRQjVRSG1BZWNDQmdJSEFoQUNFUUpDQUFFQUFBQUJBQWdBQVFBVUFJTUFBUUFBQUFFQUNBQUJBQVlBamdBQ0FBRUFwd0N4QUFBQUFRQUFBQUVBQ0FBQkFBWUFYQUFDQUFFQTVBRG9BQUFBQVFBQUFBRUFDQUFCQUFZQUxnQUNBQUVBVlFCWUFBQUFBUUFBQUFFQUNBQUNBQmdBQ1FDSEFJZ0FpUUNLQUlzQWpBQ05BSTRBandBQ0FBSUFMZ0F1QUFBQU1BQTNBQUVBQVFBQUFBRUFDQUFCQUFZQWF3QUNBQUVBSlFBcUFBQUFBUUFBQUFFQUNBQUJBQVlBRlFBQ0FBRUNSQUpOQUFBQUFRQUFBQUVBQ0FBQ0FHd0FNd0NXQUpjQW1BQ1pBSm9BbXdDY0FKMEFuZ0NmQUtBQW9RQ2lBS01BcEFGRkFVWUJSd0ZJQVVrQlNnRkxBVXdCVFFGT0FVOEJVQUZSQVZJQlV3RlVBVlVCVmdITUFjMEJ6Z0hQQWRBQjBRSFNBZE1CMUFIV0FkY0IyQUhaQWRvQ2dBS0JBbzhDa0FBQkFETUFCd0FVQUIwQUhnQXBBRElBTXdCTEFHa0FkQUI2QUlBQWlnQ0xBSlFBckFDNUFNSUF3d0RPQU5NQTF3RFlBTm9BM0FEZUFQSUJFQUViQVNFQkp3RXZBVG9CclFHdkFiQUJzUUd5QWJNQnRBRzFBYllCd1FIREFjWUJ4d0hLQW04Q2NBS0NBb01BQVFBQUFBRUFDQUFCQUFZQUhnQUJBQUlCWHdGZ0FBRUFBQUFCQUFnQUFRQUdBQUVBQVFBQ0FOTUEzZ0FCQUFBQUFRQUlBQUlBQ2dBQ0FEa0E0QUFCQUFJQU9BRGVBQUVBQUFBQkFBZ0FBZ0FPQUFRQld3RmNBVnNCWEFBQkFBUUFBZ0JJQUtjQTd3PT1cIixcbiAgICAgIFwiYmFzZTY0XCIsXG4gICAgKTtcbiAgfSxcbn07XG4iLCAiaW1wb3J0IHR5cGUgeyBDU1NQcm9wZXJ0aWVzIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBDbGFzc05hbWVWYWx1ZSwgdHdNZXJnZSB9IGZyb20gXCJ0YWlsd2luZC1tZXJnZVwiO1xuXG5leHBvcnQgdHlwZSBTdHlsYWJsZSA9XG4gIHwge1xuICAgICAgc3R5bGU6IENTU1Byb3BlcnRpZXNMaWtlO1xuICAgICAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICAgIH1cbiAgfCBzdHJpbmc7XG5cbi8qKlxuICogVGhlIENTUyBwcm9wZXJ0aWVzIGxpa2Ugb2JqZWN0LlxuICovXG5leHBvcnQgdHlwZSBDU1NQcm9wZXJ0aWVzTGlrZTxLIGV4dGVuZHMgc3RyaW5nIHwgbnVtYmVyIHwgc3ltYm9sID0gc3RyaW5nPiA9XG4gIFJlY29yZDxLLCBDU1NQcm9wZXJ0aWVzPjtcblxuLyoqXG4gKiBQZXJmb3JtcyBvYmplY3QgY2xlYW51cCBieSBkZWxldGluZyBhbGwgdW5kZWZpbmVkIHByb3BlcnRpZXMgdGhhdCBjb3VsZCBpbnRlcmZlcmUgd2l0aCBidWlsZGVyIG1ldGhvZHMuXG4gKi9cbmV4cG9ydCBjb25zdCBwZXJmb3JtT2JqZWN0Q2xlYW51cCA9IChcbiAgb2JqOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICBkZWVwID0gZmFsc2VcbikgPT4ge1xuICBmb3IgKGNvbnN0IHByb3AgaW4gb2JqKSB7XG4gICAgaWYgKG9ialtwcm9wXSA9PT0gdW5kZWZpbmVkKSBkZWxldGUgb2JqW3Byb3BdO1xuICAgIGlmICh0eXBlb2Ygb2JqW3Byb3BdID09PSBcIm9iamVjdFwiICYmIGRlZXApXG4gICAgICBwZXJmb3JtT2JqZWN0Q2xlYW51cChvYmpbcHJvcF0sIGRlZXApO1xuICB9XG59O1xuXG5leHBvcnQgY2xhc3MgU3R5bGVTaGVldCBleHRlbmRzIG51bGwge1xuICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge31cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBDU1NQcm9wZXJ0aWVzTGlrZSBvYmplY3QuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNyZWF0ZTxPIGV4dGVuZHMgQ1NTUHJvcGVydGllc0xpa2UsIEsgZXh0ZW5kcyBrZXlvZiBPPihcbiAgICBzdHlsZXM6IENTU1Byb3BlcnRpZXNMaWtlPEs+XG4gICk6IENTU1Byb3BlcnRpZXNMaWtlPEs+IHtcbiAgICBpZiAoIXN0eWxlcyB8fCB0eXBlb2Ygc3R5bGVzICE9PSBcIm9iamVjdFwiKSByZXR1cm4ge30gYXMgTztcblxuICAgIHBlcmZvcm1PYmplY3RDbGVhbnVwKHN0eWxlcyk7XG5cbiAgICByZXR1cm4gc3R5bGVzIGFzIE87XG4gIH1cblxuICAvKipcbiAgICogQ29tcG9zZXMgdHdvIENTU1Byb3BlcnRpZXNMaWtlIG9iamVjdHMuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNvbXBvc2Uoc3R5bGUxOiBDU1NQcm9wZXJ0aWVzLCBzdHlsZTI6IENTU1Byb3BlcnRpZXMpIHtcbiAgICBwZXJmb3JtT2JqZWN0Q2xlYW51cChzdHlsZTEpO1xuICAgIHBlcmZvcm1PYmplY3RDbGVhbnVwKHN0eWxlMik7XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihzdHlsZTEsIHN0eWxlMik7XG4gIH1cblxuICAvKipcbiAgICogRmxhdHRlbnMgYW4gYXJyYXkgb2YgQ1NTUHJvcGVydGllc0xpa2Ugb2JqZWN0cy5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZmxhdHRlbihzdHlsZTogQ1NTUHJvcGVydGllc1tdKSB7XG4gICAgcmV0dXJuIHN0eWxlLnJlZHVjZSgocHJldmlvdXMsIGN1cnJlbnQpID0+IHtcbiAgICAgIHBlcmZvcm1PYmplY3RDbGVhbnVwKGN1cnJlbnQpO1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ocHJldmlvdXMsIGN1cnJlbnQpO1xuICAgIH0sIHt9IGFzIENTU1Byb3BlcnRpZXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1lcmdlcyBtdWx0aXBsZSB0YWlsd2luZC1saWtlIGNsYXNzIG5hbWVzIGludG8gYXBwcm9wcmlhdGUgY2xhc3MgbmFtZXMuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNuKC4uLmNsYXNzZXM6IENsYXNzTmFtZVZhbHVlW10pIHtcbiAgICByZXR1cm4gdHdNZXJnZSguLi5jbGFzc2VzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjbGFzc05hbWUgc3RyaW5nIGZyb20gc3R5bGFibGUgZGF0YS5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgdHcoZGF0YT86IFN0eWxhYmxlKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSByZXR1cm4gZGF0YTtcbiAgICByZXR1cm4gZGF0YT8uY2xhc3NOYW1lID8/IFwiXCI7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgc3R5bGUgb2JqZWN0IGZyb20gc3R5bGFibGUgZGF0YS5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY3NzKGRhdGE/OiBTdHlsYWJsZSkge1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIHt9O1xuICAgIHJldHVybiBkYXRhPy5zdHlsZSA/PyB7fTtcbiAgfVxufVxuIiwgImltcG9ydCB0eXBlICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBwZXJmb3JtT2JqZWN0Q2xlYW51cCwgU3R5bGVTaGVldCB9IGZyb20gXCIuL1N0eWxlU2hlZXRcIjtcbmltcG9ydCB7IE5vZGUgfSBmcm9tIFwiLi5cIjtcblxuY29uc3QgaXNOb2RlID0gKG5vZGU6IHVua25vd24pOiBub2RlIGlzIE5vZGUgPT4ge1xuICByZXR1cm4gdHlwZW9mIG5vZGUgPT09IFwib2JqZWN0XCIgJiYgbm9kZSAhPSBudWxsICYmIFwidG9FbGVtZW50XCIgaW4gbm9kZTtcbn07XG5cbi8qKlxuICogVGhlIGVsZW1lbnQgaW5pdGlhbGl6YXRpb24gb3B0aW9ucy5cbiAqL1xuZXhwb3J0IHR5cGUgRWxlbWVudEluaXQgPSB7XG4gIHR5cGU6IHN0cmluZztcbiAgcHJvcHM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICBrZXk/OiBSZWFjdC5LZXkgfCBudWxsO1xuICBjaGlsZHJlbj86IGFueTtcbn07XG5cbi8qKlxuICogVGhlIEpTWCBlbGVtZW50LlxuICovXG5leHBvcnQgY2xhc3MgRWxlbWVudCB7XG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgZWxlbWVudC5cbiAgICovXG4gIHB1YmxpYyB0eXBlOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgb2YgdGhlIGVsZW1lbnQuXG4gICAqL1xuICBwdWJsaWMgcHJvcHM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICAvKipcbiAgICogVGhlIGtleSBvZiB0aGUgZWxlbWVudC5cbiAgICovXG4gIHB1YmxpYyBrZXk6IFJlYWN0LktleSB8IG51bGw7XG4gIC8qKlxuICAgKiBUaGUgY2hpbGRyZW4gb2YgdGhlIGVsZW1lbnQuXG4gICAqL1xuICBwdWJsaWMgY2hpbGRyZW4/OiBhbnk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgSlNYIGVsZW1lbnQuXG4gICAqIEBwYXJhbSBfaW5pdCBUaGUgaW5pdGlhbGl6YXRpb24gb3B0aW9uc1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKF9pbml0OiBFbGVtZW50SW5pdCkge1xuICAgIHRoaXMudHlwZSA9IF9pbml0LnR5cGU7XG4gICAgdGhpcy5wcm9wcyA9IF9pbml0LnByb3BzO1xuICAgIHRoaXMua2V5ID0gX2luaXQua2V5ID8/IG51bGw7XG4gICAgdGhpcy5jaGlsZHJlbiA9IF9pbml0LmNoaWxkcmVuO1xuICB9XG59XG5cbmNvbnN0IGNsZWFuU3R5bGVzID0gPFQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4ocHJvcGVydGllczogVCk6IFQgPT4ge1xuICBwZXJmb3JtT2JqZWN0Q2xlYW51cChwcm9wZXJ0aWVzLCB0cnVlKTtcbiAgcmV0dXJuIHByb3BlcnRpZXM7XG59O1xuXG4vKipcbiAqIFRoZSBKU1ggZmFjdG9yeSBmb3IgY2FudmFjb3JkIGpzeC5cbiAqL1xuZXhwb3J0IGNvbnN0IEpTWCA9IHtcbiAgLyoqXG4gICAqIFRoZSBKU1ggZWxlbWVudCBpbnN0YW5jZS5cbiAgICovXG4gIEVsZW1lbnQsXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IEpTWCBlbGVtZW50LlxuICAgKiBAcGFyYW0gdHlwZSBUaGUgdHlwZSBvZiB0aGUgZWxlbWVudFxuICAgKiBAcGFyYW0gcHJvcHMgVGhlIHByb3BzIG9mIHRoZSBlbGVtZW50XG4gICAqIEBwYXJhbSBjaGlsZHJlbiBUaGUgY2hpbGRyZW4gb2YgdGhlIGVsZW1lbnRcbiAgICogQHJldHVybnMgVGhlIGNyZWF0ZWQgZWxlbWVudFxuICAgKi9cbiAgY3JlYXRlRWxlbWVudChcbiAgICB0eXBlOiBzdHJpbmcgfCBFbGVtZW50LFxuICAgIHByb3BzOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPixcbiAgICAuLi5jaGlsZHJlbjogRWxlbWVudFtdXG4gICk6IEVsZW1lbnQge1xuICAgIGlmICh0eXBlIGluc3RhbmNlb2YgRWxlbWVudCkgcmV0dXJuIHR5cGU7XG5cbiAgICBwcm9wcyA/Pz0ge307XG5cbiAgICBpZiAoaXNPYmplY3RFbXB0eShwcm9wcy5zdHlsZSkpIGRlbGV0ZSBwcm9wcy5zdHlsZTtcblxuICAgIC8vIG1vbmtleS1wYXRjaCBsYXlvdXQgaXNzdWVzXG4gICAgaWYgKFwiY2xhc3NOYW1lXCIgaW4gcHJvcHMpIHByb3BzLnR3ID8/PSBwcm9wcy5jbGFzc05hbWU7XG5cbiAgICBpZiAodHlwZSA9PT0gXCJkaXZcIikge1xuICAgICAgaWYgKCEoXCJ0d1wiIGluIHByb3BzKSAmJiAhKFwic3R5bGVcIiBpbiBwcm9wcykpIHtcbiAgICAgICAgcHJvcHMudHcgPSBTdHlsZVNoZWV0LmNuKFxuICAgICAgICAgIFwiZmxleCBmbGV4LWNvbCBjb250ZW50LXN0YXJ0IHNocmluay0wXCIsXG4gICAgICAgICAgcHJvcHMudHcgYXMgc3RyaW5nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBFbGVtZW50KHtcbiAgICAgIHR5cGUsXG4gICAgICBwcm9wczoge1xuICAgICAgICAuLi5jbGVhblN0eWxlcyhwcm9wcyksXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgfSxcbiAgICAgIGNoaWxkcmVuLFxuICAgIH0pO1xuICB9LFxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBKU1ggZnJhZ21lbnQuXG4gICAqIEBwYXJhbSBjaGlsZHJlbiBUaGUgY2hpbGRyZW4gb2YgdGhlIGZyYWdtZW50XG4gICAqL1xuICBGcmFnbWVudCh7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IEVsZW1lbnRbXSB8IHN0cmluZyB9KTogRWxlbWVudCB7XG4gICAgcmV0dXJuIG5ldyBFbGVtZW50KHsgdHlwZTogXCJGcmFnbWVudFwiLCBwcm9wczogeyBjaGlsZHJlbiB9LCBjaGlsZHJlbiB9KTtcbiAgfSxcbn07XG5cbi8qKlxuICogUmVuZGVycyB0aGUgY29tcG9uZW50cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihjb21wb25lbnRzOiAoTm9kZSB8IEVsZW1lbnQgfCB1bmtub3duKVtdKSB7XG4gIHJldHVybiBjb21wb25lbnRzXG4gICAgLm1hcCgoY29tcG9uZW50KSA9PiB7XG4gICAgICBpZiAoY29tcG9uZW50ID09IG51bGwpIHJldHVybiBbXTtcbiAgICAgIGlmIChjb21wb25lbnQgaW5zdGFuY2VvZiBFbGVtZW50KSByZXR1cm4gY29tcG9uZW50O1xuICAgICAgaWYgKGlzTm9kZShjb21wb25lbnQpKSByZXR1cm4gY29tcG9uZW50LnRvRWxlbWVudCgpO1xuXG4gICAgICBjb25zdCBjaGlsZCA9IFN0cmluZyhjb21wb25lbnQpIGFzIHVua25vd24gYXMgRWxlbWVudDtcbiAgICAgIHJldHVybiBKU1guY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjaGlsZHJlbjogY2hpbGQgfSwgY2hpbGQpO1xuICAgIH0pXG4gICAgLmZsYXQoMSk7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0RW1wdHkob2JqOiBhbnkpIHtcbiAgcmV0dXJuIG9iaiA/IE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwIDogZmFsc2U7XG59XG4iLCAiLy8gaHR0cHM6Ly9naXRodWIuY29tL0Jyb29vb29va2x5bi9jYW52YXMvYmxvYi9kYjgxMDUwZjBmMjA2NGI0YjU0NDU3NWRiOWRiMzE4YWI1ODQ3ZDMzL2xvYWQtaW1hZ2UuanNcblxuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tIFwic3RyZWFtXCI7XG5pbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnNcIjtcbmltcG9ydCB7IENhbnZhY29yZEltYWdlIH0gZnJvbSBcIi4vaW1hZ2VcIjtcbmltcG9ydCAqIGFzIGZpbGVUeXBlIGZyb20gXCJmaWxlLXR5cGVcIjtcbmltcG9ydCB7IEltYWdlIH0gZnJvbSBcIkBuYXBpLXJzL2NhbnZhc1wiO1xuaW1wb3J0IHsgYnVmZmVyIH0gZnJvbSBcInN0cmVhbS9jb25zdW1lcnNcIjtcbmltcG9ydCB7IFRyYW5zZm9ybWVyIH0gZnJvbSBcIkBuYXBpLXJzL2ltYWdlXCI7XG5cbmxldCBodHRwOiB0eXBlb2YgaW1wb3J0KFwiaHR0cFwiKSwgaHR0cHM6IHR5cGVvZiBpbXBvcnQoXCJodHRwc1wiKTtcblxuY29uc3QgTUFYX1JFRElSRUNUUyA9IDIwLFxuICBSRURJUkVDVF9TVEFUVVNFUyA9IG5ldyBTZXQoWzMwMSwgMzAyXSksXG4gIERBVEFfVVJJID0gL15cXHMqZGF0YTovO1xuXG5jb25zdCBORUVEU19UUkFOU0ZPUk1BVElPTiA9IFtcbiAgXCJpbWFnZS93ZWJwXCIsXG4gIFwiaW1hZ2UvZ2lmXCIsXG4gIFwiaW1hZ2UvYm1wXCIsXG4gIFwiaW1hZ2UvaWNuc1wiLFxuICBcImltYWdlL3RpZmZcIixcbl07XG5cbi8qKlxuICogVGhlIHN1cHBvcnRlZCBpbWFnZSBzb3VyY2VzLiBJdCBjYW4gYmUgYSBidWZmZXIsIGEgcmVhZGFibGUgc3RyZWFtLCBhIHN0cmluZywgYSBVUkwgaW5zdGFuY2Ugb3IgYW4gSW1hZ2UgaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCB0eXBlIEltYWdlU291cmNlID1cbiAgfCBDYW52YWNvcmRJbWFnZVxuICB8IEJ1ZmZlclxuICB8IEFycmF5QnVmZmVyXG4gIHwgVWludDE2QXJyYXlcbiAgfCBVaW50MzJBcnJheVxuICB8IFVpbnQ4QXJyYXlcbiAgfCBVaW50OENsYW1wZWRBcnJheVxuICB8IFNoYXJlZEFycmF5QnVmZmVyXG4gIHwgUmVhZGFibGVcbiAgfCBzdHJpbmdcbiAgfCBVUkxcbiAgfCBJbWFnZTtcblxuLyoqXG4gKiBUaGUgb3B0aW9ucyBmb3IgbG9hZGluZyBhbiBpbWFnZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMb2FkSW1hZ2VPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSBoZWFkZXJzIHRvIHVzZSB3aGVuIGRvd25sb2FkaW5nIHRoZSBpbWFnZS5cbiAgICovXG4gIGhlYWRlcnM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuICAvKipcbiAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHJlZGlyZWN0cyB0byBmb2xsb3cuXG4gICAqL1xuICBtYXhSZWRpcmVjdHM/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBPdGhlciByZXF1ZXN0IG9wdGlvbnMgdG8gdXNlIHdoZW4gZG93bmxvYWRpbmcgdGhlIGltYWdlLlxuICAgKi9cbiAgcmVxdWVzdE9wdGlvbnM/OiBpbXBvcnQoXCJodHRwXCIpLlJlcXVlc3RPcHRpb25zO1xufVxuXG4vKipcbiAqIExvYWRzIGFuIGltYWdlIGZyb20gdGhlIHNwZWNpZmllZCBzb3VyY2UuXG4gKiBAcGFyYW0gc291cmNlIFRoZSBpbWFnZSBzb3VyY2VcbiAqIEBwYXJhbSBbb3B0aW9uc10gVGhlIG9wdGlvbnMgZm9yIGxvYWRpbmcgdGhlIGltYWdlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkSW1hZ2UoXG4gIHNvdXJjZTogSW1hZ2VTb3VyY2UsXG4gIG9wdGlvbnM6IExvYWRJbWFnZU9wdGlvbnMgPSB7fVxuKSB7XG4gIC8vIGxvYWQgY2FudmFjb3JkIGltYWdlXG4gIGlmIChzb3VyY2UgaW5zdGFuY2VvZiBDYW52YWNvcmRJbWFnZSkgcmV0dXJuIHNvdXJjZTtcbiAgLy8gbG9hZCByZWFkYWJsZSBzdHJlYW0gYXMgaW1hZ2VcbiAgaWYgKHNvdXJjZSBpbnN0YW5jZW9mIFJlYWRhYmxlKSByZXR1cm4gY3JlYXRlSW1hZ2UoYXdhaXQgYnVmZmVyKHNvdXJjZSkpO1xuICAvLyB1c2UgdGhlIHNhbWUgYnVmZmVyIHdpdGhvdXQgY29weWluZyBpZiB0aGUgc291cmNlIGlzIGEgYnVmZmVyXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc291cmNlKSkgcmV0dXJuIGNyZWF0ZUltYWdlKHNvdXJjZSk7XG4gIC8vIGNvbnN0cnVjdCBhIGJ1ZmZlciBpZiB0aGUgc291cmNlIGlzIGJ1ZmZlci1saWtlXG4gIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgaWYgKGlzQnVmZmVyTGlrZShzb3VyY2UpKSByZXR1cm4gY3JlYXRlSW1hZ2UoQnVmZmVyLmZyb20oc291cmNlKSk7XG4gIC8vIGlmIHRoZSBzb3VyY2UgaXMgSW1hZ2UgaW5zdGFuY2UsIGNvcHkgdGhlIGltYWdlIHNyYyB0byBuZXcgaW1hZ2VcbiAgaWYgKHNvdXJjZSBpbnN0YW5jZW9mIEltYWdlKSByZXR1cm4gY3JlYXRlSW1hZ2Uoc291cmNlLnNyYyk7XG4gIC8vIGlmIHNvdXJjZSBpcyBzdHJpbmcgYW5kIGluIGRhdGEgdXJpIGZvcm1hdCwgY29uc3RydWN0IGltYWdlIHVzaW5nIGRhdGEgdXJpXG4gIGlmICh0eXBlb2Ygc291cmNlID09PSBcInN0cmluZ1wiICYmIERBVEFfVVJJLnRlc3Qoc291cmNlKSkge1xuICAgIGNvbnN0IGNvbW1hSWR4ID0gc291cmNlLmluZGV4T2YoXCIsXCIpO1xuICAgIGNvbnN0IGVuY29kaW5nID1cbiAgICAgIHNvdXJjZS5sYXN0SW5kZXhPZihcImJhc2U2NFwiLCBjb21tYUlkeCkgPCAwID8gXCJ1dGYtOFwiIDogXCJiYXNlNjRcIjtcbiAgICBjb25zdCBkYXRhID0gQnVmZmVyLmZyb20oc291cmNlLnNsaWNlKGNvbW1hSWR4ICsgMSksIGVuY29kaW5nKTtcbiAgICByZXR1cm4gY3JlYXRlSW1hZ2UoZGF0YSk7XG4gIH1cbiAgLy8gaWYgc291cmNlIGlzIGEgc3RyaW5nIG9yIFVSTCBpbnN0YW5jZVxuICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gXCJzdHJpbmdcIiB8fCBzb3VyY2UgaW5zdGFuY2VvZiBVUkwpIHtcbiAgICAvLyBpZiB0aGUgc291cmNlIGV4aXN0cyBhcyBhIGZpbGUsIGNvbnN0cnVjdCBpbWFnZSBmcm9tIHRoYXQgZmlsZVxuICAgIGlmIChhd2FpdCBleGlzdHMoc291cmNlKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUltYWdlKGF3YWl0IGZzLnByb21pc2VzLnJlYWRGaWxlKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIGZldGNoICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBmZXRjaChzb3VyY2UsIHtcbiAgICAgICAgICByZWRpcmVjdDogXCJmb2xsb3dcIixcbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgaGVhZGVyczogb3B0aW9ucy5yZXF1ZXN0T3B0aW9ucz8uaGVhZGVycyxcbiAgICAgICAgfSkudGhlbihhc3luYyAocmVzKSA9PiB7XG4gICAgICAgICAgaWYgKCFyZXMub2spXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGByZW1vdGUgc291cmNlIHJlamVjdGVkIHdpdGggc3RhdHVzIGNvZGUgJHtyZXMuc3RhdHVzfWBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIGF3YWl0IGNyZWF0ZUltYWdlKEJ1ZmZlci5mcm9tKGF3YWl0IHJlcy5hcnJheUJ1ZmZlcigpKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8gdGhlIHNvdXJjZSBpcyBhIHJlbW90ZSB1cmwgaGVyZVxuICAgICAgc291cmNlID0gc291cmNlIGluc3RhbmNlb2YgVVJMID8gc291cmNlIDogbmV3IFVSTChzb3VyY2UpO1xuICAgICAgLy8gYXR0ZW1wdCB0byBkb3dubG9hZCB0aGUgcmVtb3RlIHNvdXJjZSBhbmQgY29uc3RydWN0IGltYWdlXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgbmV3IFByb21pc2U8QnVmZmVyPigocmVzb2x2ZSwgcmVqZWN0KSA9PlxuICAgICAgICBtYWtlUmVxdWVzdChcbiAgICAgICAgICBzb3VyY2UgYXMgVVJMLFxuICAgICAgICAgIHJlc29sdmUsXG4gICAgICAgICAgcmVqZWN0LFxuICAgICAgICAgIHR5cGVvZiBvcHRpb25zLm1heFJlZGlyZWN0cyA9PT0gXCJudW1iZXJcIiAmJiBvcHRpb25zLm1heFJlZGlyZWN0cyA+PSAwXG4gICAgICAgICAgICA/IG9wdGlvbnMubWF4UmVkaXJlY3RzXG4gICAgICAgICAgICA6IE1BWF9SRURJUkVDVFMsXG4gICAgICAgICAgb3B0aW9ucy5yZXF1ZXN0T3B0aW9ucyB8fCB7fVxuICAgICAgICApXG4gICAgICApO1xuICAgICAgcmV0dXJuIGNyZWF0ZUltYWdlKGRhdGEpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHRocm93IGVycm9yIGFzIGRvbid0IHN1cHBvcnQgdGhhdCBzb3VyY2VcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcInVuc3VwcG9ydGVkIGltYWdlIHNvdXJjZVwiKTtcbn1cblxuZnVuY3Rpb24gbWFrZVJlcXVlc3QoXG4gIHVybDogVVJMLFxuICByZXNvbHZlOiAocmVzOiBCdWZmZXIpID0+IHZvaWQsXG4gIHJlamVjdDogKGVycjogdW5rbm93bikgPT4gdm9pZCxcbiAgcmVkaXJlY3RDb3VudDogbnVtYmVyLFxuICByZXF1ZXN0T3B0aW9uczogaW1wb3J0KFwiaHR0cFwiKS5SZXF1ZXN0T3B0aW9uc1xuKSB7XG4gIGNvbnN0IGlzSHR0cHMgPSB1cmwucHJvdG9jb2wgPT09IFwiaHR0cHM6XCI7XG4gIC8vIGxhenkgbG9hZCB0aGUgbGliXG4gIGNvbnN0IGxpYjogdHlwZW9mIGltcG9ydChcImh0dHBcIikgPSBpc0h0dHBzXG4gICAgPyAhaHR0cHNcbiAgICAgID8gKGh0dHBzID0gcmVxdWlyZShcImh0dHBzXCIpKVxuICAgICAgOiBodHRwc1xuICAgIDogIWh0dHBcbiAgICA/IChodHRwID0gcmVxdWlyZShcImh0dHBcIikpXG4gICAgOiBodHRwO1xuXG4gIGxpYlxuICAgIC5nZXQodXJsLnRvU3RyaW5nKCksIHJlcXVlc3RPcHRpb25zIHx8IHt9LCAocmVzKSA9PiB7XG4gICAgICBjb25zdCBzaG91bGRSZWRpcmVjdCA9XG4gICAgICAgIFJFRElSRUNUX1NUQVRVU0VTLmhhcyhyZXMuc3RhdHVzQ29kZSEpICYmXG4gICAgICAgIHR5cGVvZiByZXMuaGVhZGVycy5sb2NhdGlvbiA9PT0gXCJzdHJpbmdcIjtcbiAgICAgIGlmIChzaG91bGRSZWRpcmVjdCAmJiByZWRpcmVjdENvdW50ID4gMClcbiAgICAgICAgcmV0dXJuIG1ha2VSZXF1ZXN0KFxuICAgICAgICAgIG5ldyBVUkwocmVzLmhlYWRlcnMubG9jYXRpb24hKSxcbiAgICAgICAgICByZXNvbHZlLFxuICAgICAgICAgIHJlamVjdCxcbiAgICAgICAgICByZWRpcmVjdENvdW50IC0gMSxcbiAgICAgICAgICByZXF1ZXN0T3B0aW9uc1xuICAgICAgICApO1xuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgcmVzLnN0YXR1c0NvZGUgPT09IFwibnVtYmVyXCIgJiZcbiAgICAgICAgKHJlcy5zdGF0dXNDb2RlIDwgMjAwIHx8IHJlcy5zdGF0dXNDb2RlID49IDMwMClcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gcmVqZWN0KFxuICAgICAgICAgIG5ldyBFcnJvcihgcmVtb3RlIHNvdXJjZSByZWplY3RlZCB3aXRoIHN0YXR1cyBjb2RlICR7cmVzLnN0YXR1c0NvZGV9YClcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgYnVmZmVyKHJlcykudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgIH0pXG4gICAgLm9uKFwiZXJyb3JcIiwgcmVqZWN0KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlSW1hZ2Uoc3JjOiBCdWZmZXIpIHtcbiAgY29uc3QgbWltZSA9IGF3YWl0IGZpbGVUeXBlLmZyb21CdWZmZXIoc3JjKTtcbiAgaWYgKCFtaW1lPy5taW1lKSB0aHJvdyBuZXcgRXJyb3IoXCJmYWlsZWQgdG8gbG9hZCBpbWFnZVwiKTtcbiAgaWYgKE5FRURTX1RSQU5TRk9STUFUSU9OLmluY2x1ZGVzKG1pbWUubWltZSkpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lZCA9IGF3YWl0IG5ldyBUcmFuc2Zvcm1lcihzcmMpLnBuZygpO1xuICAgIHJldHVybiBuZXcgQ2FudmFjb3JkSW1hZ2UodHJhbnNmb3JtZWQsIFwiaW1hZ2UvcG5nXCIpO1xuICB9XG4gIHJldHVybiBuZXcgQ2FudmFjb3JkSW1hZ2Uoc3JjLCBtaW1lLm1pbWUpO1xufVxuXG5mdW5jdGlvbiBpc0J1ZmZlckxpa2Uoc3JjOiBJbWFnZVNvdXJjZSkge1xuICByZXR1cm4gKFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICAoc3JjICYmIHNyYy50eXBlID09PSBcIkJ1ZmZlclwiKSB8fFxuICAgIEFycmF5LmlzQXJyYXkoc3JjKSB8fFxuICAgIHNyYyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8XG4gICAgc3JjIGluc3RhbmNlb2YgU2hhcmVkQXJyYXlCdWZmZXIgfHxcbiAgICBzcmMgaW5zdGFuY2VvZiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVWludDhBcnJheSlcbiAgKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZXhpc3RzKHBhdGg6IHN0cmluZyB8IFVSTCkge1xuICB0cnkge1xuICAgIGF3YWl0IGZzLnByb21pc2VzLmFjY2VzcyhwYXRoLCBmcy5jb25zdGFudHMuRl9PSyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIiwgImltcG9ydCB7IHJlbmRlckFzeW5jLCB0eXBlIFJlc3ZnUmVuZGVyT3B0aW9ucyB9IGZyb20gXCJAcmVzdmcvcmVzdmctanNcIjtcbmltcG9ydCB7IEVuY29kaW5nRm9ybWF0IH0gZnJvbSBcIi4uL2NhbnZhcy9FbmNvZGFibGVcIjtcbmltcG9ydCB7IEF2aWZDb25maWcsIFBuZ0VuY29kZU9wdGlvbnMsIFRyYW5zZm9ybWVyIH0gZnJvbSBcIkBuYXBpLXJzL2ltYWdlXCI7XG5cbi8qKlxuICogVGhlIG9wdGlvbnMgZm9yIHJlbmRlcmluZyB0aGUgc3ZnLlxuICovXG5leHBvcnQgdHlwZSBSZW5kZXJTdmdPcHRpb25zID0gUG5nRW5jb2RlT3B0aW9ucyB8IEF2aWZDb25maWcgfCBudW1iZXIgfCBudWxsO1xuXG4vKipcbiAqIFJlbmRlcnMgdGhlIHN2ZyB0byB0aGUgc3BlY2lmaWVkIGZvcm1hdC5cbiAqIEBwYXJhbSBzdmcgVGhlIHN2ZyBgc3RyaW5nYCBvciBgQnVmZmVyYCB0byByZW5kZXJcbiAqIEBwYXJhbSBmb3JtYXQgVGhlIGZvcm1hdCB0byByZW5kZXIgdG9cbiAqIEBwYXJhbSBbb3B0aW9uc10gVGhlIG9wdGlvbnMgZm9yIHJlbmRlcmluZ1xuICogQHBhcmFtIFtzaWduYWxdIFRoZSBhYm9ydCBzaWduYWxcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlbmRlclN2Zyh7XG4gIHN2ZyxcbiAgZm9ybWF0LFxuICBvcHRpb25zLFxuICBzaWduYWwsXG59OiB7XG4gIHN2Zzogc3RyaW5nIHwgQnVmZmVyO1xuICBmb3JtYXQ6IEVuY29kaW5nRm9ybWF0O1xuICBvcHRpb25zPzogUmVuZGVyU3ZnT3B0aW9ucztcbiAgc2lnbmFsPzogQWJvcnRTaWduYWwgfCBudWxsO1xufSk6IFByb21pc2U8QnVmZmVyPiB7XG4gIGNvbnN0IG9wdHM6IFJlc3ZnUmVuZGVyT3B0aW9ucyA9IHtcbiAgICBmb250OiB7XG4gICAgICBsb2FkU3lzdGVtRm9udHM6IGZhbHNlLFxuICAgIH0sXG4gICAgbG9nTGV2ZWw6IFwib2ZmXCIsXG4gIH07XG5cbiAgLy8gVHJhbnNmb3JtZXIuZnJvbVN2ZyBnaXZlcyB3ZWlyZCBvdXRwdXQgZm9yIHNvbWUgcmVhc29uXG4gIGNvbnN0IG91dHB1dCA9IGF3YWl0IHJlbmRlckFzeW5jKHN2Zywgb3B0cyk7XG5cbiAgaWYgKGZvcm1hdCA9PT0gXCJwbmdcIikge1xuICAgIHJldHVybiBvdXRwdXQuYXNQbmcoKTtcbiAgfVxuXG4gIGNvbnN0IHRyYW5zZm9ybWVyID0gVHJhbnNmb3JtZXIuZnJvbVJnYmFQaXhlbHMob3V0cHV0LnBpeGVscywgb3V0cHV0LndpZHRoLCBvdXRwdXQuaGVpZ2h0KTtcblxuICBvcHRpb25zID8/PSBudWxsO1xuICBzaWduYWwgPz89IG51bGw7XG5cbiAgc3dpdGNoIChmb3JtYXQpIHtcbiAgICAvLyBjYXNlICdwbmcnOlxuICAgIC8vICAgcmV0dXJuIHRyYW5zZm9ybWVyLnBuZyhvcHRpb25zIGFzIFBuZ0VuY29kZU9wdGlvbnMsIHNpZ25hbCk7XG4gICAgY2FzZSBcImF2aWZcIjpcbiAgICAgIHJldHVybiB0cmFuc2Zvcm1lci5hdmlmKG9wdGlvbnMgYXMgQXZpZkNvbmZpZywgc2lnbmFsKTtcbiAgICBjYXNlIFwianBlZ1wiOlxuICAgICAgcmV0dXJuIHRyYW5zZm9ybWVyLmpwZWcob3B0aW9ucyBhcyBudW1iZXIsIHNpZ25hbCk7XG4gICAgY2FzZSBcIndlYnBcIjpcbiAgICAgIHJldHVybiB0cmFuc2Zvcm1lci53ZWJwKG9wdGlvbnMgYXMgbnVtYmVyLCBzaWduYWwpO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBVbnN1cHBvcnRlZCBlbmNvZGluZyBmb3JtYXQ6IFwiJHtmb3JtYXR9XCJgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ2FudmFjb3JkSW1hZ2Uge1xuICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIGRhdGE6IEJ1ZmZlciwgcHVibGljIG1pbWU6IHN0cmluZykge31cblxuICBwdWJsaWMgdG9CYXNlNjQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS50b1N0cmluZyhcImJhc2U2NFwiKTtcbiAgfVxuXG4gIHB1YmxpYyB0b0RhdGFVUkwoKSB7XG4gICAgcmV0dXJuIGBkYXRhOiR7dGhpcy5taW1lfTtiYXNlNjQsJHt0aGlzLnRvQmFzZTY0KCl9YDtcbiAgfVxufVxuIiwgImltcG9ydCB7IEltYWdlU291cmNlLCBsb2FkSW1hZ2UgfSBmcm9tIFwiLi4vaGVscGVyc1wiO1xuaW1wb3J0IHsgbG9hZEltYWdlIGFzIGNyZWF0ZUltYWdlLCBTS1JTQ29udGV4dDJEIH0gZnJvbSBcIkBuYXBpLXJzL2NhbnZhc1wiO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjYW52YXMgaW1hZ2UgZnJvbSB0aGUgaW1hZ2Ugc291cmNlLlxuICogQHBhcmFtIGltZyBUaGUgaW1hZ2Ugc291cmNlXG4gKiBAcmV0dXJucyBUaGUgY2FudmFzIGltYWdlXG4gKlxuICogY29uc3QgaW1hZ2UgPSBhd2FpdCBjcmVhdGVDYW52YXNJbWFnZSgnaHR0cHM6Ly9leGFtcGxlLmNvbS9pbWFnZS5wbmcnKTtcbiBcbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUNhbnZhc0ltYWdlID0gYXN5bmMgKGltZzogSW1hZ2VTb3VyY2UpID0+IHtcbiAgY29uc3QgY2FudmFjb3JkSW1nID0gYXdhaXQgbG9hZEltYWdlKGltZyk7XG4gIGNvbnN0IG5hdGl2ZUltYWdlID0gYXdhaXQgY3JlYXRlSW1hZ2UoY2FudmFjb3JkSW1nLmRhdGEpO1xuXG4gIHJldHVybiBuYXRpdmVJbWFnZTtcbn07XG5cbi8qKlxuICogVGhlIHN0ZXBzIHRvIGFwcGx5IHRvIHRoZSBjYW52YXMuXG4gKiBAcGFyYW0gY3R4IFRoZSBjYW52YXMgY29udGV4dFxuICovXG5leHBvcnQgdHlwZSBDb250ZXh0TWFuaXB1bGF0aW9uU3RlcCA9IChjdHg6IFNLUlNDb250ZXh0MkQpID0+IEF3YWl0ZWQ8dm9pZD47XG4iLCAiaW1wb3J0IHsgQ2FudmFzLCBjcmVhdGVDYW52YXMsIFNLUlNDb250ZXh0MkQgfSBmcm9tIFwiQG5hcGktcnMvY2FudmFzXCI7XG5pbXBvcnQgeyBHaWZFbmNvZGVyLCBFbmNvZGVyT3B0aW9ucyB9IGZyb20gXCJAc2t5cmEvZ2lmZW5jXCI7XG5pbXBvcnQgeyBFbmNvZGFibGUgfSBmcm9tIFwiLi9FbmNvZGFibGVcIjtcbmltcG9ydCB7IFRlbXBsYXRlSW1hZ2UgfSBmcm9tIFwiLi4vYXNzZXRzL1RlbXBsYXRlRmFjdG9yeVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEltYWdlR2VuZXJhdGlvblN0ZXAge1xuICAvKipcbiAgICogVGhlIGltYWdlIHRvIHJlbmRlci5cbiAgICovXG4gIGltYWdlPzogSW1nZW5TdGVwW107XG4gIC8qKlxuICAgKiBUaGUgdGV4dCB0byByZW5kZXIuXG4gICAqL1xuICB0ZXh0PzogVGV4dEdlbmVyYXRpb25TdGVwW107XG4gIC8qKlxuICAgKiBUaGUgY3VzdG9tIHN0ZXBzIHRvIGFwcGx5IHRvIHRoZSBjYW52YXMuXG4gICAqL1xuICBjdXN0b20/OiBDdXN0b21HZW5lcmF0aW9uU3RlcFtdO1xuICAvKipcbiAgICogVGhlIGZ1bmN0aW9uIHRvIGNhbGwgYmVmb3JlIHByb2Nlc3NpbmcgdGhpcyBzdGVwLlxuICAgKi9cbiAgcHJlcHJvY2Vzcz86IChjYW52YXM6IENhbnZhcywgY3R4OiBTS1JTQ29udGV4dDJELCBzdGVwOiBJbWFnZUdlbmVyYXRpb25TdGVwKSA9PiBBd2FpdGVkPHZvaWQ+O1xuICAvKipcbiAgICogVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBwcm9jZXNzaW5nIHRoaXMgc3RlcC5cbiAgICovXG4gIHByb2Nlc3M/OiAoY2FudmFzOiBDYW52YXMsIGN0eDogU0tSU0NvbnRleHQyRCwgc3RlcDogSW1hZ2VHZW5lcmF0aW9uU3RlcCkgPT4gQXdhaXRlZDx2b2lkPjtcbiAgLyoqXG4gICAqIFRoZSBmdW5jdGlvbiB0byBjYWxsIGFmdGVyIHByb2Nlc3NpbmcgaGFzIGZpbmlzaGVkLlxuICAgKi9cbiAgcG9zdHByb2Nlc3M/OiAoY2FudmFzOiBDYW52YXMsIGN0eDogU0tSU0NvbnRleHQyRCwgc3RlcDogSW1hZ2VHZW5lcmF0aW9uU3RlcCkgPT4gQXdhaXRlZDx2b2lkPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDdXN0b21HZW5lcmF0aW9uU3RlcCB7XG4gIC8qKlxuICAgKiBUaGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIHByb2Nlc3NpbmcgdGhpcyBzdGVwLlxuICAgKi9cbiAgcHJvY2VzczogKGNhbnZhczogQ2FudmFzLCBjdHg6IFNLUlNDb250ZXh0MkQsIHN0ZXA6IEltYWdlR2VuZXJhdGlvblN0ZXApID0+IEF3YWl0ZWQ8dm9pZD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW1nZW5TdGVwIHtcbiAgLyoqXG4gICAqIFRoZSBpbWFnZSB0byByZW5kZXIuXG4gICAqL1xuICBzb3VyY2U6IFRlbXBsYXRlSW1hZ2U7XG4gIC8qKlxuICAgKiBUaGUgeCBwb3NpdGlvbiBvZiB0aGUgaW1hZ2UuXG4gICAqL1xuICB4OiBudW1iZXI7XG4gIC8qKlxuICAgKiBUaGUgeSBwb3NpdGlvbiBvZiB0aGUgaW1hZ2UuXG4gICAqL1xuICB5OiBudW1iZXI7XG4gIC8qKlxuICAgKiBUaGUgd2lkdGggb2YgdGhlIGltYWdlLlxuICAgKi9cbiAgd2lkdGg/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBUaGUgaGVpZ2h0IG9mIHRoZSBpbWFnZS5cbiAgICovXG4gIGhlaWdodD86IG51bWJlcjtcbiAgLyoqXG4gICAqIFRoZSBmdW5jdGlvbiB0byBjYWxsIGJlZm9yZSBwcm9jZXNzaW5nIHRoaXMgc3RlcC5cbiAgICovXG4gIHByZXByb2Nlc3M/OiAoY2FudmFzOiBDYW52YXMsIGN0eDogU0tSU0NvbnRleHQyRCwgc291cmNlOiBJbWdlblN0ZXApID0+IEF3YWl0ZWQ8dm9pZD47XG4gIC8qKlxuICAgKiBUaGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIHByb2Nlc3NpbmcgdGhpcyBzdGVwLlxuICAgKi9cbiAgcHJvY2Vzcz86IChjYW52YXM6IENhbnZhcywgY3R4OiBTS1JTQ29udGV4dDJELCBzb3VyY2U6IEltZ2VuU3RlcCkgPT4gQXdhaXRlZDx2b2lkPjtcbiAgLyoqXG4gICAqIFRoZSBmdW5jdGlvbiB0byBjYWxsIGFmdGVyIHByb2Nlc3NpbmcgaGFzIGZpbmlzaGVkLlxuICAgKi9cbiAgcG9zdHByb2Nlc3M/OiAoY2FudmFzOiBDYW52YXMsIGN0eDogU0tSU0NvbnRleHQyRCwgc291cmNlOiBJbWdlblN0ZXApID0+IEF3YWl0ZWQ8dm9pZD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGV4dEdlbmVyYXRpb25TdGVwIHtcbiAgLyoqXG4gICAqIFRoZSB0ZXh0IHRvIHJlbmRlci5cbiAgICovXG4gIHZhbHVlOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgZm9udCBvZiB0aGUgdGV4dC5cbiAgICovXG4gIGZvbnQ6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgdGV4dC5cbiAgICovXG4gIGNvbG9yOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHN0cm9rZSB0aGUgdGV4dC5cbiAgICovXG4gIHN0cm9rZT86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBUaGUgeCBwb3NpdGlvbiBvZiB0aGUgdGV4dC5cbiAgICovXG4gIHg6IG51bWJlcjtcbiAgLyoqXG4gICAqIFRoZSB5IHBvc2l0aW9uIG9mIHRoZSB0ZXh0LlxuICAgKi9cbiAgeTogbnVtYmVyO1xuICAvKipcbiAgICogVGhlIG1heGltdW0gd2lkdGggb2YgdGhlIHRleHQuXG4gICAqL1xuICBtYXhXaWR0aD86IG51bWJlcjtcbiAgLyoqXG4gICAqIFRoZSBsaW5lIGhlaWdodCBvZiB0aGUgdGV4dC5cbiAgICovXG4gIGxpbmVIZWlnaHQ/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBUaGUgbGluZSB3aWR0aCBvZiB0aGUgdGV4dC5cbiAgICovXG4gIGxpbmVXaWR0aD86IG51bWJlcjtcbiAgLyoqXG4gICAqIFRoZSBhbGlnbm1lbnQgb2YgdGhlIHRleHQuXG4gICAqL1xuICBhbGlnbj86IFwibGVmdFwiIHwgXCJjZW50ZXJcIiB8IFwicmlnaHRcIjtcbiAgLyoqXG4gICAqIFRoZSBiYXNlbGluZSBvZiB0aGUgdGV4dC5cbiAgICovXG4gIGJhc2VsaW5lPzogXCJ0b3BcIiB8IFwibWlkZGxlXCIgfCBcImJvdHRvbVwiO1xuICAvKipcbiAgICogVGhlIGRpcmVjdGlvbmFsaXR5IG9mIHRoZSB0ZXh0LlxuICAgKi9cbiAgZGlyZWN0aW9uPzogXCJpbmhlcml0XCIgfCBcImx0clwiIHwgXCJydGxcIjtcbiAgLyoqXG4gICAqIFRoZSBmdW5jdGlvbiB0byBjYWxsIGJlZm9yZSBwcm9jZXNzaW5nIHRoaXMgc3RlcC5cbiAgICovXG4gIHByZXByb2Nlc3M/OiAoY2FudmFzOiBDYW52YXMsIGN0eDogU0tSU0NvbnRleHQyRCwgdGV4dDogVGV4dEdlbmVyYXRpb25TdGVwKSA9PiBBd2FpdGVkPHZvaWQ+O1xuICAvKipcbiAgICogVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBwcm9jZXNzaW5nIHRoaXMgc3RlcC5cbiAgICovXG4gIHByb2Nlc3M/OiAoY2FudmFzOiBDYW52YXMsIGN0eDogU0tSU0NvbnRleHQyRCwgdGV4dDogVGV4dEdlbmVyYXRpb25TdGVwKSA9PiBBd2FpdGVkPHZvaWQ+O1xuICAvKipcbiAgICogVGhlIGZ1bmN0aW9uIHRvIGNhbGwgYWZ0ZXIgcHJvY2Vzc2luZyBoYXMgZmluaXNoZWQuXG4gICAqL1xuICBwb3N0cHJvY2Vzcz86IChjYW52YXM6IENhbnZhcywgY3R4OiBTS1JTQ29udGV4dDJELCB0ZXh0OiBUZXh0R2VuZXJhdGlvblN0ZXApID0+IEF3YWl0ZWQ8dm9pZD47XG59XG5cbi8qKlxuICogVGhlIHRlbXBsYXRlIHRvIHVzZSBmb3IgaW1hZ2UgZ2VuZXJhdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJSW1hZ2VHZW5lcmF0aW9uVGVtcGxhdGUge1xuICAvKipcbiAgICogVGhlIHdpZHRoIG9mIHRoZSB0ZW1wbGF0ZS5cbiAgICovXG4gIHdpZHRoPzogbnVtYmVyO1xuICAvKipcbiAgICogVGhlIGhlaWdodCBvZiB0aGUgdGVtcGxhdGUuXG4gICAqL1xuICBoZWlnaHQ/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBUaGUgc3RlcHMgdG8gYXBwbHkgdG8gdGhlIGNhbnZhcy5cbiAgICovXG4gIHN0ZXBzOiBJbWFnZUdlbmVyYXRpb25TdGVwW107XG4gIC8qKlxuICAgKiBUaGUgZ2lmIG9wdGlvbnMuXG4gICAqL1xuICBnaWY/OiBFbmNvZGVyT3B0aW9ucztcbn1cblxuZXhwb3J0IGNsYXNzIEltYWdlR2VuZXJhdGlvblRlbXBsYXRlIGltcGxlbWVudHMgSUltYWdlR2VuZXJhdGlvblRlbXBsYXRlIHtcbiAgLyoqXG4gICAqIFRoZSBzdGVwcyB0byBhcHBseSB0byB0aGUgY2FudmFzLlxuICAgKi9cbiAgcHVibGljIHN0ZXBzOiBJbWFnZUdlbmVyYXRpb25TdGVwW10gPSBbXTtcbiAgLyoqXG4gICAqIFRoZSBnaWYgb3B0aW9ucy5cbiAgICovXG4gIHB1YmxpYyBnaWY/OiBFbmNvZGVyT3B0aW9ucztcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBJbWFnZUdlbmVyYXRpb25UZW1wbGF0ZSBpbnN0YW5jZSBmcm9tIGEgdGVtcGxhdGUuXG4gICAqIEBwYXJhbSB0ZW1wbGF0ZSBUaGUgdGVtcGxhdGUgdG8gdXNlXG4gICAqIEByZXR1cm5zIFRoZSBjcmVhdGVkIHRlbXBsYXRlXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZyb20odGVtcGxhdGU6IElJbWFnZUdlbmVyYXRpb25UZW1wbGF0ZSkge1xuICAgIHJldHVybiBuZXcgSW1hZ2VHZW5lcmF0aW9uVGVtcGxhdGUodGVtcGxhdGUud2lkdGgsIHRlbXBsYXRlLmhlaWdodClcbiAgICAgIC5zZXRTdGVwcyh0ZW1wbGF0ZS5zdGVwcylcbiAgICAgIC5zZXRHaWZPcHRpb25zKHRlbXBsYXRlLmdpZik7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBJbWFnZUdlbmVyYXRpb25UZW1wbGF0ZSBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHdpZHRoIFRoZSB3aWR0aCBvZiB0aGUgdGVtcGxhdGVcbiAgICogQHBhcmFtIGhlaWdodCBUaGUgaGVpZ2h0IG9mIHRoZSB0ZW1wbGF0ZVxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSB3aWR0aD86IG51bWJlciwgcHVibGljIHJlYWRvbmx5IGhlaWdodD86IG51bWJlcikge31cblxuICAvKipcbiAgICogU2V0cyB0aGUgc3RlcHMuIFRoaXMgd2lsbCBvdmVyd3JpdGUgYW55IGV4aXN0aW5nIHN0ZXBzLlxuICAgKiBAcGFyYW0gc3RlcHMgVGhlIHN0ZXBzIHRvIHNldFxuICAgKi9cbiAgcHVibGljIHNldFN0ZXBzKHN0ZXBzOiBJbWFnZUdlbmVyYXRpb25TdGVwW10pIHtcbiAgICB0aGlzLnN0ZXBzID0gc3RlcHM7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgZ2lmIG9wdGlvbnMuXG4gICAqIEBwYXJhbSBvcHRpb25zIFRoZSBnaWYgb3B0aW9uc1xuICAgKi9cbiAgcHVibGljIHNldEdpZk9wdGlvbnMob3B0aW9ucz86IEVuY29kZXJPcHRpb25zKSB7XG4gICAgdGhpcy5naWYgPSBvcHRpb25zO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgdGVtcGxhdGUgaXMgYSBnaWYuXG4gICAqL1xuICBwdWJsaWMgaXNHaWYoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2lmICE9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIHN0ZXAgdG8gdGhlIHRlbXBsYXRlLlxuICAgKiBAcGFyYW0gc3RlcCBUaGUgc3RlcCB0byBhZGRcbiAgICovXG4gIHB1YmxpYyBhZGRTdGVwKHN0ZXA6IEltYWdlR2VuZXJhdGlvblN0ZXApIHtcbiAgICB0aGlzLnN0ZXBzLnB1c2goc3RlcCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBzdGVwcyB0byB0aGUgdGVtcGxhdGUuXG4gICAqIEBwYXJhbSBzdGVwcyBUaGUgc3RlcHMgdG8gYWRkXG4gICAqL1xuICBwdWJsaWMgYWRkU3RlcHMoc3RlcHM6IEltYWdlR2VuZXJhdGlvblN0ZXBbXSkge1xuICAgIHRoaXMuc3RlcHMucHVzaCguLi5zdGVwcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXJzIHRoZSBzdGVwcy5cbiAgICovXG4gIHB1YmxpYyBjbGVhclN0ZXBzKCkge1xuICAgIHRoaXMuc3RlcHMgPSBbXTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHNpemUgaXMgaW5mZXJyYWJsZS5cbiAgICovXG4gIHB1YmxpYyBpc0luZmVycmFibGUoKSB7XG4gICAgcmV0dXJuIFt0aGlzLndpZHRoLCB0aGlzLmhlaWdodF0uc29tZSgocikgPT4gciAhPSBudWxsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB3aWR0aCBvZiB0aGUgdGVtcGxhdGUuXG4gICAqL1xuICBwdWJsaWMgZ2V0V2lkdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMud2lkdGggPz8gdGhpcy5oZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaGVpZ2h0IG9mIHRoZSB0ZW1wbGF0ZS5cbiAgICovXG4gIHB1YmxpYyBnZXRIZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGVpZ2h0ID8/IHRoaXMud2lkdGg7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgdGVtcGxhdGUuXG4gICAqL1xuICBwdWJsaWMgdG9KU09OKCk6IElJbWFnZUdlbmVyYXRpb25UZW1wbGF0ZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdpZHRoOiB0aGlzLndpZHRoLFxuICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodCxcbiAgICAgIHN0ZXBzOiB0aGlzLnN0ZXBzLFxuICAgICAgZ2lmOiB0aGlzLmdpZixcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbWFnZUdlbiBleHRlbmRzIEVuY29kYWJsZSB7XG4gIHByaXZhdGUgX2NhbnZhcyE6IENhbnZhcztcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgSW1hZ2VHZW4gaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB0ZW1wbGF0ZSBUaGUgdGVtcGxhdGUgdG8gdXNlXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlOiBJbWFnZUdlbmVyYXRpb25UZW1wbGF0ZSkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIHN0ZXAgdG8gdGhlIHRlbXBsYXRlLlxuICAgKiBAcGFyYW0gc3RlcCBUaGUgc3RlcCB0byBhZGRcbiAgICovXG4gIHB1YmxpYyBhZGRTdGVwKHN0ZXA6IEltYWdlR2VuZXJhdGlvblN0ZXApIHtcbiAgICB0aGlzLnRlbXBsYXRlLmFkZFN0ZXAoc3RlcCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBzdGVwcyB0byB0aGUgdGVtcGxhdGUuXG4gICAqIEBwYXJhbSBzdGVwcyBUaGUgc3RlcHMgdG8gYWRkXG4gICAqL1xuICBwdWJsaWMgYWRkU3RlcHMoc3RlcHM6IEltYWdlR2VuZXJhdGlvblN0ZXBbXSkge1xuICAgIHRoaXMudGVtcGxhdGUuYWRkU3RlcHMoc3RlcHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGdpZiBvcHRpb25zLlxuICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgZ2lmIG9wdGlvbnNcbiAgICovXG4gIHB1YmxpYyBzZXRHaWZPcHRpb25zKG9wdGlvbnM/OiBFbmNvZGVyT3B0aW9ucykge1xuICAgIHRoaXMudGVtcGxhdGUuc2V0R2lmT3B0aW9ucyhvcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHRlbXBsYXRlIGlzIGEgZ2lmLlxuICAgKi9cbiAgcHVibGljIGlzR2lmKCkge1xuICAgIHJldHVybiB0aGlzLnRlbXBsYXRlLmlzR2lmKCk7XG4gIH1cblxuICBhc3luYyAjaW5mZXJTaXplKCkge1xuICAgIGlmICh0aGlzLnRlbXBsYXRlLmlzSW5mZXJyYWJsZSgpKSByZXR1cm4geyB3aWR0aDogdGhpcy50ZW1wbGF0ZS5nZXRXaWR0aCgpISwgaGVpZ2h0OiB0aGlzLnRlbXBsYXRlLmdldEhlaWdodCgpISB9O1xuXG4gICAgaWYgKCF0aGlzLnRlbXBsYXRlLnN0ZXBzLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGluZmVyIHNpemUgZnJvbSBlbXB0eSB0ZW1wbGF0ZVwiKTtcbiAgICBjb25zdCBmaXJzdEltZyA9IHRoaXMudGVtcGxhdGUuc3RlcHMuZmluZCgocykgPT4gcy5pbWFnZT8ubGVuZ3RoKT8uaW1hZ2U/LlswXTtcbiAgICBpZiAoIWZpcnN0SW1nKSB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgaW5mZXIgc2l6ZSBmcm9tIG5vbi1pbWFnZSB0ZW1wbGF0ZVwiKTtcblxuICAgIGNvbnN0IGltZyA9IGF3YWl0IGZpcnN0SW1nLnNvdXJjZS5yZXNvbHZlKCk7XG5cbiAgICByZXR1cm4geyB3aWR0aDogaW1nLndpZHRoLCBoZWlnaHQ6IGltZy5oZWlnaHQgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSByZWFkYWJsZSBzdHJlYW0gY29udGFpbmluZyBHSUYgZGF0YSBieSBhcHBseWluZyB0aGUgc3RlcHMuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgZ2VuZXJhdGVHaWYoKSB7XG4gICAgaWYgKHRoaXMudGVtcGxhdGUuZ2lmID09IG51bGwpIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBnZW5lcmF0ZSBnaWYgb24gbm9uLWdpZiB0ZW1wbGF0ZVwiKTtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy50ZW1wbGF0ZS5naWY7XG5cbiAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IGF3YWl0IHRoaXMuI2luZmVyU2l6ZSgpO1xuXG4gICAgY29uc3QgZW5jb2RlciA9IG5ldyBHaWZFbmNvZGVyKHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgaWYgKG9wdGlvbnMucmVwZWF0ICE9IG51bGwpIGVuY29kZXIuc2V0UmVwZWF0KG9wdGlvbnMucmVwZWF0KTtcbiAgICBpZiAob3B0aW9ucy5kZWxheSAhPSBudWxsKSBlbmNvZGVyLnNldERlbGF5KG9wdGlvbnMuZGVsYXkpO1xuICAgIGlmIChvcHRpb25zLnF1YWxpdHkgIT0gbnVsbCkgZW5jb2Rlci5zZXRRdWFsaXR5KG9wdGlvbnMucXVhbGl0eSk7XG4gICAgaWYgKG9wdGlvbnMuZGlzcG9zZSAhPSBudWxsKSBlbmNvZGVyLnNldERpc3Bvc2Uob3B0aW9ucy5kaXNwb3NlKTtcbiAgICBpZiAob3B0aW9ucy5mcmFtZXJhdGUgIT0gbnVsbCkgZW5jb2Rlci5zZXRGcmFtZXJhdGUob3B0aW9ucy5mcmFtZXJhdGUpO1xuICAgIGlmIChvcHRpb25zLnRyYW5zcGFyZW50ICE9IG51bGwpIGVuY29kZXIuc2V0VHJhbnNwYXJlbnQob3B0aW9ucy50cmFuc3BhcmVudCk7XG5cbiAgICBjb25zdCBjYW52YXMgPSAodGhpcy5fY2FudmFzID0gY3JlYXRlQ2FudmFzKHdpZHRoLCBoZWlnaHQpKTtcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuXG4gICAgY29uc3Qgc3RyZWFtID0gZW5jb2Rlci5jcmVhdGVSZWFkU3RyZWFtKCk7XG5cbiAgICBlbmNvZGVyLnN0YXJ0KCk7XG5cbiAgICBmb3IgKGNvbnN0IHN0ZXAgb2YgdGhpcy50ZW1wbGF0ZS5zdGVwcykge1xuICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgYXdhaXQgdGhpcy4jYXBwbHlHZW5lcmF0aW9uKGNhbnZhcywgY3R4LCBzdGVwKTtcbiAgICAgIGVuY29kZXIuYWRkRnJhbWUoY3R4KTtcbiAgICB9XG5cbiAgICBlbmNvZGVyLmZpbmlzaCgpO1xuXG4gICAgcmV0dXJuIHN0cmVhbTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoZSBpbWFnZSBieSBhcHBseWluZyB0aGUgc3RlcHMuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gYXdhaXQgdGhpcy4jaW5mZXJTaXplKCk7XG5cbiAgICBjb25zdCBjYW52YXMgPSAodGhpcy5fY2FudmFzID0gY3JlYXRlQ2FudmFzKHdpZHRoLCBoZWlnaHQpKTtcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuXG4gICAgZm9yIChjb25zdCBzdGVwIG9mIHRoaXMudGVtcGxhdGUuc3RlcHMpIHtcbiAgICAgIGF3YWl0IHRoaXMuI2FwcGx5R2VuZXJhdGlvbihjYW52YXMsIGN0eCwgc3RlcCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY2FudmFzIGluc3RhbmNlIGJ5IGFwcGx5aW5nIHRoZSBzdGVwcy5cbiAgICovXG4gIHB1YmxpYyBnZXRGaW5hbENhbnZhcygpOiBQcm9taXNlPENhbnZhcz4ge1xuICAgIGlmICghdGhpcy5fY2FudmFzKSB0aHJvdyBuZXcgRXJyb3IoXCJyZW5kZXIoKSBvciBnZW5lcmF0ZUdpZigpIG11c3QgYmUgY2FsbGVkIGJlZm9yZSBhY2Nlc3NpbmcgdGhlIGZpbmFsIGNhbnZhc1wiKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2NhbnZhcyk7XG4gIH1cblxuICBhc3luYyAjYXBwbHlHZW5lcmF0aW9uKGNhbnZhczogQ2FudmFzLCBjdHg6IFNLUlNDb250ZXh0MkQsIHN0ZXA6IEltYWdlR2VuZXJhdGlvblN0ZXApIHtcbiAgICBpZiAoc3RlcC5wcmVwcm9jZXNzKSB7XG4gICAgICBhd2FpdCBzdGVwLnByZXByb2Nlc3MoY2FudmFzLCBjdHgsIHN0ZXApO1xuICAgIH1cblxuICAgIGlmIChzdGVwLnByb2Nlc3MpIHtcbiAgICAgIGF3YWl0IHN0ZXAucHJvY2VzcyhjYW52YXMsIGN0eCwgc3RlcCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzdGVwLmN1c3RvbSkge1xuICAgICAgICBmb3IgKGNvbnN0IGN1c3RvbSBvZiBzdGVwLmN1c3RvbSkge1xuICAgICAgICAgIGF3YWl0IGN1c3RvbS5wcm9jZXNzKGNhbnZhcywgY3R4LCBzdGVwKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3RlcC5pbWFnZSkge1xuICAgICAgICBmb3IgKGNvbnN0IGltZyBvZiBzdGVwLmltYWdlKSB7XG4gICAgICAgICAgaWYgKGltZy5wcmVwcm9jZXNzKSB7XG4gICAgICAgICAgICBhd2FpdCBpbWcucHJlcHJvY2VzcyhjYW52YXMsIGN0eCwgaW1nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaW1nLnByb2Nlc3MpIHtcbiAgICAgICAgICAgIGF3YWl0IGltZy5wcm9jZXNzKGNhbnZhcywgY3R4LCBpbWcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBpbWFnZSA9IGF3YWl0IGltZy5zb3VyY2UucmVzb2x2ZSgpO1xuXG4gICAgICAgICAgICBpZiAoIWltZy53aWR0aCB8fCAhaW1nLmhlaWdodCkge1xuICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltYWdlLCBpbWcueCwgaW1nLnksIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltYWdlLCBpbWcueCwgaW1nLnksIGltZy53aWR0aCwgaW1nLmhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGltZy5wb3N0cHJvY2Vzcykge1xuICAgICAgICAgICAgYXdhaXQgaW1nLnBvc3Rwcm9jZXNzKGNhbnZhcywgY3R4LCBpbWcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3RlcC50ZXh0KSB7XG4gICAgICAgIGZvciAoY29uc3QgdGV4dCBvZiBzdGVwLnRleHQpIHtcbiAgICAgICAgICBpZiAodGV4dC5wcmVwcm9jZXNzKSB7XG4gICAgICAgICAgICBhd2FpdCB0ZXh0LnByZXByb2Nlc3MoY2FudmFzLCBjdHgsIHRleHQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0ZXh0LnByb2Nlc3MpIHtcbiAgICAgICAgICAgIGF3YWl0IHRleHQucHJvY2VzcyhjYW52YXMsIGN0eCwgdGV4dCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0ZXh0LmZvbnQgIT0gbnVsbCkgY3R4LmZvbnQgPSB0ZXh0LmZvbnQ7XG4gICAgICAgICAgICBpZiAodGV4dC5jb2xvciAhPSBudWxsKSBjdHhbdGV4dC5zdHJva2UgPyBcInN0cm9rZVN0eWxlXCIgOiBcImZpbGxTdHlsZVwiXSA9IHRleHQuY29sb3I7XG4gICAgICAgICAgICBpZiAodGV4dC5hbGlnbiAhPSBudWxsKSBjdHgudGV4dEFsaWduID0gdGV4dC5hbGlnbjtcbiAgICAgICAgICAgIGlmICh0ZXh0LmJhc2VsaW5lICE9IG51bGwpIGN0eC50ZXh0QmFzZWxpbmUgPSB0ZXh0LmJhc2VsaW5lO1xuICAgICAgICAgICAgaWYgKHRleHQuZGlyZWN0aW9uICE9IG51bGwpIGN0eC5kaXJlY3Rpb24gPSB0ZXh0LmRpcmVjdGlvbjtcbiAgICAgICAgICAgIGlmICh0ZXh0LmxpbmVXaWR0aCAhPSBudWxsKSBjdHgubGluZVdpZHRoID0gdGV4dC5saW5lV2lkdGg7XG5cbiAgICAgICAgICAgIGN0eFt0ZXh0LnN0cm9rZSA/IFwic3Ryb2tlVGV4dFwiIDogXCJmaWxsVGV4dFwiXSh0ZXh0LnZhbHVlLCB0ZXh0LngsIHRleHQueSwgdGV4dC5tYXhXaWR0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRleHQucG9zdHByb2Nlc3MpIHtcbiAgICAgICAgICAgIGF3YWl0IHRleHQucG9zdHByb2Nlc3MoY2FudmFzLCBjdHgsIHRleHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdGVwLnBvc3Rwcm9jZXNzKSB7XG4gICAgICBhd2FpdCBzdGVwLnBvc3Rwcm9jZXNzKGNhbnZhcywgY3R4LCBzdGVwKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGltYWdlIGdlbmVyYXRvci5cbiAqIEBwYXJhbSB0ZW1wbGF0ZSBUaGUgdGVtcGxhdGUgdG8gdXNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbWFnZUdlbmVyYXRvcih0ZW1wbGF0ZTogSW1hZ2VHZW5lcmF0aW9uVGVtcGxhdGUpIHtcbiAgY29uc3QgZ2VuID0gbmV3IEltYWdlR2VuKHRlbXBsYXRlKTtcblxuICByZXR1cm4gZ2VuO1xufVxuIiwgImltcG9ydCB7IEF2aWZDb25maWcsIENhbnZhcyB9IGZyb20gXCJAbmFwaS1ycy9jYW52YXNcIjtcblxuZXhwb3J0IHR5cGUgRW5jb2RpbmdGb3JtYXQgPSBcInBuZ1wiIHwgXCJqcGVnXCIgfCBcIndlYnBcIiB8IFwiYXZpZlwiO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRW5jb2RhYmxlIHtcbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNhbnZhcyBpbnN0YW5jZSBieSBhcHBseWluZyB0aGUgc3RlcHMuXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0RmluYWxDYW52YXMoKTogUHJvbWlzZTxDYW52YXM+O1xuXG4gIC8qKlxuICAgKiBFbmNvZGVzIHRoZSBjYW52YXMgdG8gYSBidWZmZXIuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgZW5jb2RlKCk6IFByb21pc2U8QnVmZmVyPjtcbiAgLyoqXG4gICAqIEVuY29kZXMgdGhlIGNhbnZhcyB0byBhIHBuZyBidWZmZXIuXG4gICAqIEBwYXJhbSBmb3JtYXQgVGhlIGVuY29kaW5nIGZvcm1hdCAtIGBwbmdgXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgZW5jb2RlKGZvcm1hdDogXCJwbmdcIik6IFByb21pc2U8QnVmZmVyPjtcbiAgLyoqXG4gICAqIEVuY29kZXMgdGhlIGNhbnZhcyB0byBhIGpwZWcgb3Igd2VicCBidWZmZXIuXG4gICAqIEBwYXJhbSBmb3JtYXQgVGhlIGVuY29kaW5nIGZvcm1hdCAtIGBqcGVnYCBvciBgd2VicGBcbiAgICogQHBhcmFtIFtvcHRpb25zXSBUaGUgcXVhbGl0eSBvZiB0aGUgaW1hZ2VcbiAgICovXG4gIHB1YmxpYyBhc3luYyBlbmNvZGUoZm9ybWF0OiBcImpwZWdcIiB8IFwid2VicFwiLCBvcHRpb25zPzogbnVtYmVyKTogUHJvbWlzZTxCdWZmZXI+O1xuICAvKipcbiAgICogRW5jb2RlcyB0aGUgY2FudmFzIHRvIGFuIGF2aWYgYnVmZmVyLlxuICAgKiBAcGFyYW0gZm9ybWF0IFRoZSBlbmNvZGluZyBmb3JtYXQgLSBgYXZpZmBcbiAgICogQHBhcmFtIFtvcHRpb25zXSBUaGUgZW5jb2Rpbmcgb3B0aW9uc1xuICAgKi9cbiAgcHVibGljIGFzeW5jIGVuY29kZShmb3JtYXQ6IFwiYXZpZlwiLCBvcHRpb25zPzogQXZpZkNvbmZpZyk6IFByb21pc2U8QnVmZmVyPjtcbiAgLyoqXG4gICAqIEVuY29kZXMgdGhlIGNhbnZhcyB0byBhIGJ1ZmZlci5cbiAgICogQHBhcmFtIGZvcm1hdCBUaGUgZW5jb2RpbmcgZm9ybWF0XG4gICAqIEBwYXJhbSBbb3B0aW9uc10gVGhlIGVuY29kaW5nIG9wdGlvbnMgb3IgcXVhbGl0eVxuICAgKi9cbiAgcHVibGljIGFzeW5jIGVuY29kZShmb3JtYXQ6IEVuY29kaW5nRm9ybWF0ID0gXCJwbmdcIiwgb3B0aW9ucz86IG51bWJlciB8IEF2aWZDb25maWcpOiBQcm9taXNlPEJ1ZmZlcj4ge1xuICAgIGNvbnN0IGNhbnZhcyA9IGF3YWl0IHRoaXMuZ2V0RmluYWxDYW52YXMoKTtcblxuICAgIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgICBjYXNlIFwicG5nXCI6XG4gICAgICAgIHJldHVybiBjYW52YXMuZW5jb2RlKGZvcm1hdCk7XG4gICAgICBjYXNlIFwianBlZ1wiOlxuICAgICAgY2FzZSBcIndlYnBcIjpcbiAgICAgICAgLy8gUGFzc2luZyBhcmdzIGNvbmRpdGlvbmFsbHkgYmVjYXVzZSBjYW52YXMgbWF5IHBhbmljIGR1ZSB0byBgdW5kZWZpbmVkYCB2YWx1ZVxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwibnVtYmVyXCIpIHJldHVybiBjYW52YXMuZW5jb2RlKGZvcm1hdCwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBjYW52YXMuZW5jb2RlKGZvcm1hdCk7XG4gICAgICBjYXNlIFwiYXZpZlwiOlxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwib2JqZWN0XCIpIHJldHVybiBjYW52YXMuZW5jb2RlKGZvcm1hdCwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBjYW52YXMuZW5jb2RlKGZvcm1hdCk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIGVuY29kaW5nIGZvcm1hdDogXCIke2Zvcm1hdH1cImApO1xuICAgIH1cbiAgfVxufVxuIiwgImltcG9ydCB7IGNyZWF0ZUNhbnZhc0ltYWdlIH0gZnJvbSBcIi4uL2NhbnZhcy91dGlsc1wiO1xuaW1wb3J0IHsgSUltYWdlR2VuZXJhdGlvblRlbXBsYXRlLCBJbWFnZUdlbmVyYXRpb25TdGVwLCBJbWFnZUdlbmVyYXRpb25UZW1wbGF0ZSB9IGZyb20gXCIuLi9jYW52YXMvSW1hZ2VHZW5cIjtcbmltcG9ydCB7IEltYWdlU291cmNlIH0gZnJvbSBcIi4uL2hlbHBlcnNcIjtcbmltcG9ydCB7IEltYWdlRmFjdG9yeSB9IGZyb20gXCIuL0Fzc2V0c0ZhY3RvcnlcIjtcbmltcG9ydCB0eXBlIHsgSW1hZ2UsIFNLUlNDb250ZXh0MkQgfSBmcm9tIFwiQG5hcGktcnMvY2FudmFzXCI7XG5cbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZUltYWdlIHtcbiAgI3Jlc29sdmVkOiBJbWFnZSB8IG51bGwgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFRlbXBsYXRlSW1hZ2UgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSBzb3VyY2UgVGhlIGltYWdlIHNvdXJjZVxuICAgKlxuICAgKiBjb25zdCBpbWFnZSA9IG5ldyBUZW1wbGF0ZUltYWdlKCdodHRwczovL2V4YW1wbGUuY29tL2ltYWdlLnBuZycpO1xuICAgXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIHNvdXJjZTogSW1hZ2VTb3VyY2UpIHt9XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhpcyBpbWFnZSBoYXMgYmVlbiByZXNvbHZlZC5cbiAgICovXG4gIHB1YmxpYyByZXNvbHZlZCgpIHtcbiAgICByZXR1cm4gdGhpcy4jcmVzb2x2ZWQgIT0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNvbHZlcyB0aGlzIGltYWdlIHRvIGNvbnN1bWFibGUgZm9ybS5cbiAgICovXG4gIHB1YmxpYyBhc3luYyByZXNvbHZlKCk6IFByb21pc2U8SW1hZ2U+IHtcbiAgICBpZiAodGhpcy4jcmVzb2x2ZWQpIHJldHVybiB0aGlzLiNyZXNvbHZlZDtcbiAgICByZXR1cm4gKHRoaXMuI3Jlc29sdmVkID0gYXdhaXQgY3JlYXRlQ2FudmFzSW1hZ2UodGhpcy5zb3VyY2UpKTtcbiAgfVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdGVtcGxhdGUgZnJvbSB0aGUgcHJvdmlkZWQgdGVtcGxhdGUuXG4gKiBAcGFyYW0gdGVtcGxhdGUgVGhlIHRlbXBsYXRlIHRvIGNyZWF0ZSBmcm9tXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVUZW1wbGF0ZSA9IDxGIGV4dGVuZHMgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnksIFAgZXh0ZW5kcyBQYXJhbWV0ZXJzPEY+PihcbiAgY2I6ICguLi5hcmdzOiBQKSA9PiBJSW1hZ2VHZW5lcmF0aW9uVGVtcGxhdGUsXG4pID0+IHtcbiAgcmV0dXJuICguLi5hcmdzOiBQYXJhbWV0ZXJzPHR5cGVvZiBjYj4pID0+IHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGNiKC4uLmFyZ3MpO1xuXG4gICAgcmV0dXJuIEltYWdlR2VuZXJhdGlvblRlbXBsYXRlLmZyb20odGVtcGxhdGUpO1xuICB9O1xufTtcblxuLyoqXG4gKiBUaGUgYnVpbHQtaW4gdGVtcGxhdGUgZmFjdG9yeS5cbiAqL1xuZXhwb3J0IGNvbnN0IFRlbXBsYXRlRmFjdG9yeSA9IHtcbiAgQWZmZWN0OiBjcmVhdGVUZW1wbGF0ZSgoaW1hZ2U6IEltYWdlU291cmNlKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0ZXBzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBpbWFnZTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBUZW1wbGF0ZUltYWdlKEltYWdlRmFjdG9yeS5BRkZFQ1QpLFxuICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaW1hZ2U6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc291cmNlOiBuZXcgVGVtcGxhdGVJbWFnZShpbWFnZSksXG4gICAgICAgICAgICAgIHg6IDE4MCxcbiAgICAgICAgICAgICAgeTogMzgzLFxuICAgICAgICAgICAgICB3aWR0aDogMjAwLFxuICAgICAgICAgICAgICBoZWlnaHQ6IDE1NyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfTtcbiAgfSksXG4gIFRyaWdnZXJlZDogY3JlYXRlVGVtcGxhdGUoKGltYWdlOiBJbWFnZVNvdXJjZSkgPT4ge1xuICAgIGNvbnN0IHNyYyA9IG5ldyBUZW1wbGF0ZUltYWdlKGltYWdlKTtcbiAgICBjb25zdCBmYWN0b3J5ID0gbmV3IFRlbXBsYXRlSW1hZ2UoSW1hZ2VGYWN0b3J5LlRSSUdHRVJFRCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZ2lmOiB7XG4gICAgICAgIHJlcGVhdDogMCxcbiAgICAgICAgZGVsYXk6IDE1LFxuICAgICAgfSxcbiAgICAgIHdpZHRoOiAyNTYsXG4gICAgICBoZWlnaHQ6IDMxMCxcbiAgICAgIHN0ZXBzOiAoKCkgPT4ge1xuICAgICAgICBjb25zdCBkOiBJbWFnZUdlbmVyYXRpb25TdGVwW10gPSBbXTtcblxuICAgICAgICBjb25zdCBCUiA9IDMwO1xuICAgICAgICBjb25zdCBMUiA9IDIwO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgOTsgaSsrKSB7XG4gICAgICAgICAgZC5wdXNoKHtcbiAgICAgICAgICAgIGltYWdlOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzb3VyY2U6IHNyYyxcbiAgICAgICAgICAgICAgICB4OiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBCUikgLSBCUixcbiAgICAgICAgICAgICAgICB5OiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBCUikgLSBCUixcbiAgICAgICAgICAgICAgICB3aWR0aDogMjU2ICsgQlIsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAzMTAgLSA1NCArIEJSLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc291cmNlOiBmYWN0b3J5LFxuICAgICAgICAgICAgICAgIHg6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIExSKSAtIExSLFxuICAgICAgICAgICAgICAgIHk6IDMxMCAtIDU0ICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTFIpIC0gTFIsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDI1NiArIExSLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNTQgKyBMUixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZDtcbiAgICAgIH0pKCksXG4gICAgfTtcbiAgfSksXG4gIEZ1c2U6IGNyZWF0ZVRlbXBsYXRlKChkZXN0aW5hdGlvbjogSW1hZ2VTb3VyY2UsIHNvdXJjZTogSW1hZ2VTb3VyY2UpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RlcHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGltYWdlOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHNvdXJjZTogbmV3IFRlbXBsYXRlSW1hZ2UoZGVzdGluYXRpb24pLFxuICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJlcHJvY2VzcyhjYW52YXMsIGN0eCkge1xuICAgICAgICAgICAgY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwibXVsdGlwbHlcIjtcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaW1hZ2U6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc291cmNlOiBuZXcgVGVtcGxhdGVJbWFnZShzb3VyY2UpLFxuICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9KSxcbiAgS2lzczogY3JlYXRlVGVtcGxhdGUoKGltYWdlMTogSW1hZ2VTb3VyY2UsIGltYWdlMjogSW1hZ2VTb3VyY2UpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RlcHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGltYWdlOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHNvdXJjZTogbmV3IFRlbXBsYXRlSW1hZ2UoSW1hZ2VGYWN0b3J5LktJU1MpLFxuICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaW1hZ2U6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc291cmNlOiBuZXcgVGVtcGxhdGVJbWFnZShpbWFnZTEpLFxuICAgICAgICAgICAgICB4OiAzNzAsXG4gICAgICAgICAgICAgIHk6IDI1LFxuICAgICAgICAgICAgICB3aWR0aDogMjAwLFxuICAgICAgICAgICAgICBoZWlnaHQ6IDIwMCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGltYWdlOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHNvdXJjZTogbmV3IFRlbXBsYXRlSW1hZ2UoaW1hZ2UyKSxcbiAgICAgICAgICAgICAgeDogMTUwLFxuICAgICAgICAgICAgICB5OiAyNSxcbiAgICAgICAgICAgICAgd2lkdGg6IDIwMCxcbiAgICAgICAgICAgICAgaGVpZ2h0OiAyMDAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH07XG4gIH0pLFxuICBTcGFuazogY3JlYXRlVGVtcGxhdGUoKGltYWdlMTogSW1hZ2VTb3VyY2UsIGltYWdlMjogSW1hZ2VTb3VyY2UpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgd2lkdGg6IDUwMCxcbiAgICAgIGhlaWdodDogNTAwLFxuICAgICAgc3RlcHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGltYWdlOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHNvdXJjZTogbmV3IFRlbXBsYXRlSW1hZ2UoSW1hZ2VGYWN0b3J5LlNQQU5LKSxcbiAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgd2lkdGg6IDUwMCxcbiAgICAgICAgICAgICAgaGVpZ2h0OiA1MDAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpbWFnZTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBUZW1wbGF0ZUltYWdlKGltYWdlMSksXG4gICAgICAgICAgICAgIHg6IDM1MCxcbiAgICAgICAgICAgICAgeTogMjIwLFxuICAgICAgICAgICAgICB3aWR0aDogMTIwLFxuICAgICAgICAgICAgICBoZWlnaHQ6IDEyMCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGltYWdlOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHNvdXJjZTogbmV3IFRlbXBsYXRlSW1hZ2UoaW1hZ2UyKSxcbiAgICAgICAgICAgICAgeDogMjI1LFxuICAgICAgICAgICAgICB5OiA1LFxuICAgICAgICAgICAgICB3aWR0aDogMTQwLFxuICAgICAgICAgICAgICBoZWlnaHQ6IDE0MCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfTtcbiAgfSksXG4gIFNsYXA6IGNyZWF0ZVRlbXBsYXRlKChpbWFnZTE6IEltYWdlU291cmNlLCBpbWFnZTI6IEltYWdlU291cmNlKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdpZHRoOiAxMDAwLFxuICAgICAgaGVpZ2h0OiA1MDAsXG4gICAgICBzdGVwczogW1xuICAgICAgICB7XG4gICAgICAgICAgaW1hZ2U6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc291cmNlOiBuZXcgVGVtcGxhdGVJbWFnZShJbWFnZUZhY3RvcnkuQkFUU0xBUCksXG4gICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICAgIHdpZHRoOiAxMDAwLFxuICAgICAgICAgICAgICBoZWlnaHQ6IDUwMCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGltYWdlOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHNvdXJjZTogbmV3IFRlbXBsYXRlSW1hZ2UoaW1hZ2UxKSxcbiAgICAgICAgICAgICAgeDogMzUwLFxuICAgICAgICAgICAgICB5OiA3MCxcbiAgICAgICAgICAgICAgd2lkdGg6IDIyMCxcbiAgICAgICAgICAgICAgaGVpZ2h0OiAyMjAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpbWFnZTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBUZW1wbGF0ZUltYWdlKGltYWdlMiksXG4gICAgICAgICAgICAgIHg6IDU4MCxcbiAgICAgICAgICAgICAgeTogMjYwLFxuICAgICAgICAgICAgICB3aWR0aDogMjAwLFxuICAgICAgICAgICAgICBoZWlnaHQ6IDIwMCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfTtcbiAgfSksXG4gIEJlYXV0aWZ1bDogY3JlYXRlVGVtcGxhdGUoKGltYWdlOiBJbWFnZVNvdXJjZSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB3aWR0aDogMzc2LFxuICAgICAgaGVpZ2h0OiA0MDAsXG4gICAgICBzdGVwczogW1xuICAgICAgICB7XG4gICAgICAgICAgaW1hZ2U6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc291cmNlOiBuZXcgVGVtcGxhdGVJbWFnZShJbWFnZUZhY3RvcnkuQkVBVVRJRlVMKSxcbiAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgd2lkdGg6IDM3NixcbiAgICAgICAgICAgICAgaGVpZ2h0OiA0MDAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpbWFnZTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBUZW1wbGF0ZUltYWdlKGltYWdlKSxcbiAgICAgICAgICAgICAgeDogMjU4LFxuICAgICAgICAgICAgICB5OiAyOCxcbiAgICAgICAgICAgICAgd2lkdGg6IDg0LFxuICAgICAgICAgICAgICBoZWlnaHQ6IDk1LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaW1hZ2U6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc291cmNlOiBuZXcgVGVtcGxhdGVJbWFnZShpbWFnZSksXG4gICAgICAgICAgICAgIHg6IDI1OCxcbiAgICAgICAgICAgICAgeTogMjI5LFxuICAgICAgICAgICAgICB3aWR0aDogODQsXG4gICAgICAgICAgICAgIGhlaWdodDogOTUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH07XG4gIH0pLFxuICBGYWNlcGFsbTogY3JlYXRlVGVtcGxhdGUoKGltYWdlOiBJbWFnZVNvdXJjZSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB3aWR0aDogNjMyLFxuICAgICAgaGVpZ2h0OiAzNTcsXG4gICAgICBzdGVwczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJlcHJvY2VzcyhjYW52YXMsIGN0eCkge1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFwiIzAwMDAwMFwiO1xuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGltYWdlOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHNvdXJjZTogbmV3IFRlbXBsYXRlSW1hZ2UoaW1hZ2UpLFxuICAgICAgICAgICAgICB4OiAxOTksXG4gICAgICAgICAgICAgIHk6IDExMixcbiAgICAgICAgICAgICAgd2lkdGg6IDIzNSxcbiAgICAgICAgICAgICAgaGVpZ2h0OiAyMzUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpbWFnZTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBUZW1wbGF0ZUltYWdlKEltYWdlRmFjdG9yeS5GQUNFUEFMTSksXG4gICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICAgIHdpZHRoOiA2MzIsXG4gICAgICAgICAgICAgIGhlaWdodDogMzU3LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9KSxcbiAgUmFpbmJvdzogY3JlYXRlVGVtcGxhdGUoKGltYWdlOiBJbWFnZVNvdXJjZSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBzdGVwczogW1xuICAgICAgICB7XG4gICAgICAgICAgaW1hZ2U6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc291cmNlOiBuZXcgVGVtcGxhdGVJbWFnZShpbWFnZSksXG4gICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpbWFnZTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBUZW1wbGF0ZUltYWdlKEltYWdlRmFjdG9yeS5SQUlOQk9XKSxcbiAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfTtcbiAgfSksXG4gIFJpcDogY3JlYXRlVGVtcGxhdGUoKGltYWdlOiBJbWFnZVNvdXJjZSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB3aWR0aDogMjQ0LFxuICAgICAgaGVpZ2h0OiAyNTMsXG4gICAgICBzdGVwczogW1xuICAgICAgICB7XG4gICAgICAgICAgaW1hZ2U6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc291cmNlOiBuZXcgVGVtcGxhdGVJbWFnZShJbWFnZUZhY3RvcnkuUklQKSxcbiAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGltYWdlOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHNvdXJjZTogbmV3IFRlbXBsYXRlSW1hZ2UoaW1hZ2UpLFxuICAgICAgICAgICAgICB4OiA2MyxcbiAgICAgICAgICAgICAgeTogMTEwLFxuICAgICAgICAgICAgICB3aWR0aDogOTAsXG4gICAgICAgICAgICAgIGhlaWdodDogOTAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH07XG4gIH0pLFxuICBUcmFzaDogY3JlYXRlVGVtcGxhdGUoKGltYWdlOiBJbWFnZVNvdXJjZSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBzdGVwczogW1xuICAgICAgICB7XG4gICAgICAgICAgaW1hZ2U6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc291cmNlOiBuZXcgVGVtcGxhdGVJbWFnZShJbWFnZUZhY3RvcnkuVFJBU0gpLFxuICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaW1hZ2U6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc291cmNlOiBuZXcgVGVtcGxhdGVJbWFnZShpbWFnZSksXG4gICAgICAgICAgICAgIHg6IDMwOSxcbiAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgd2lkdGg6IDMwOSxcbiAgICAgICAgICAgICAgaGVpZ2h0OiAzMDQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH07XG4gIH0pLFxuICBIaXRsZXI6IGNyZWF0ZVRlbXBsYXRlKChpbWFnZTogSW1hZ2VTb3VyY2UpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RlcHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGltYWdlOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHNvdXJjZTogbmV3IFRlbXBsYXRlSW1hZ2UoSW1hZ2VGYWN0b3J5LkhJVExFUiksXG4gICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpbWFnZTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBUZW1wbGF0ZUltYWdlKGltYWdlKSxcbiAgICAgICAgICAgICAgeDogNDYsXG4gICAgICAgICAgICAgIHk6IDQzLFxuICAgICAgICAgICAgICB3aWR0aDogMTQwLFxuICAgICAgICAgICAgICBoZWlnaHQ6IDE0MCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfTtcbiAgfSksXG4gIERpc3RyYWN0ZWQ6IGNyZWF0ZVRlbXBsYXRlKChpbWFnZTE6IEltYWdlU291cmNlLCBpbWFnZTI6IEltYWdlU291cmNlLCBpbWFnZTM/OiBJbWFnZVNvdXJjZSB8IG51bGwpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RlcHM6ICgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGNsaXBDaXJjbGUgPSAoY3R4OiBTS1JTQ29udGV4dDJELCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikgPT4ge1xuICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwiZGVzdGluYXRpb24taW5cIjtcbiAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgY3R4LmFyYyh3aWR0aCAvIDIsIGhlaWdodCAvIDIsIHdpZHRoIC8gMiwgMCwgTWF0aC5QSSAqIDIpO1xuICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmV0OiBJbWFnZUdlbmVyYXRpb25TdGVwW10gPSBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW1hZ2U6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNvdXJjZTogbmV3IFRlbXBsYXRlSW1hZ2UoSW1hZ2VGYWN0b3J5LkRJU1RSQUNURUQpLFxuICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbWFnZTogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc291cmNlOiBuZXcgVGVtcGxhdGVJbWFnZShpbWFnZTEpLFxuICAgICAgICAgICAgICAgIHg6IDE4MCxcbiAgICAgICAgICAgICAgICB5OiA5MCxcbiAgICAgICAgICAgICAgICB3aWR0aDogMTUwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMTUwLFxuICAgICAgICAgICAgICAgIHBvc3Rwcm9jZXNzKGNhbnZhcywgY3R4KSB7XG4gICAgICAgICAgICAgICAgICBjbGlwQ2lyY2xlKGN0eCwgMTUwLCAxNTApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW1hZ2U6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNvdXJjZTogbmV3IFRlbXBsYXRlSW1hZ2UoaW1hZ2UyKSxcbiAgICAgICAgICAgICAgICB4OiA0ODAsXG4gICAgICAgICAgICAgICAgeTogMzUsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEzMCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEzMCxcbiAgICAgICAgICAgICAgICBwb3N0cHJvY2VzcyhjYW52YXMsIGN0eCkge1xuICAgICAgICAgICAgICAgICAgY2xpcENpcmNsZShjdHgsIDEzMCwgMTMwKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9LFxuICAgICAgICBdO1xuXG4gICAgICAgIGlmIChpbWFnZTMpIHtcbiAgICAgICAgICByZXQucHVzaCh7XG4gICAgICAgICAgICBpbWFnZTogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc291cmNlOiBuZXcgVGVtcGxhdGVJbWFnZShpbWFnZTMpLFxuICAgICAgICAgICAgICAgIHg6IDczMCxcbiAgICAgICAgICAgICAgICB5OiAxMTAsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEzMCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEzMCxcbiAgICAgICAgICAgICAgICBwb3N0cHJvY2VzcyhjYW52YXMsIGN0eCkge1xuICAgICAgICAgICAgICAgICAgY2xpcENpcmNsZShjdHgsIDEzMCwgMTMwKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9KSgpLFxuICAgIH07XG4gIH0pLFxuICBDb2xvcmZ5OiBjcmVhdGVUZW1wbGF0ZSgoaW1hZ2U6IEltYWdlU291cmNlLCBjb2xvcjogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0ZXBzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBpbWFnZTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBUZW1wbGF0ZUltYWdlKGltYWdlKSxcbiAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByZXByb2Nlc3MoY2FudmFzLCBjdHgpIHtcbiAgICAgICAgICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBcImNvbG9yXCI7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gY29sb3I7XG4gICAgICAgICAgICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9KSxcbiAgSmFpbDogY3JlYXRlVGVtcGxhdGUoKGltYWdlOiBJbWFnZVNvdXJjZSwgZ3JleXNjYWxlPzogYm9vbGVhbikgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBzdGVwczogW1xuICAgICAgICB7XG4gICAgICAgICAgaW1hZ2U6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc291cmNlOiBuZXcgVGVtcGxhdGVJbWFnZShJbWFnZUZhY3RvcnkuSkFJTCksXG4gICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpbWFnZTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBUZW1wbGF0ZUltYWdlKGltYWdlKSxcbiAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgd2lkdGg6IDI1NixcbiAgICAgICAgICAgICAgaGVpZ2h0OiAyNTYsXG4gICAgICAgICAgICAgIHBvc3Rwcm9jZXNzKGNhbnZhcywgY3R4KSB7XG4gICAgICAgICAgICAgICAgaWYgKGdyZXlzY2FsZSkge1xuICAgICAgICAgICAgICAgICAgY3R4LmZpbHRlciA9IFwiZ3JheXNjYWxlKDEwMCUpXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9KSxcbiAgQmVkOiBjcmVhdGVUZW1wbGF0ZSgoaW1hZ2UxOiBJbWFnZVNvdXJjZSwgaW1hZ2UyOiBJbWFnZVNvdXJjZSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBzdGVwczogW1xuICAgICAgICB7XG4gICAgICAgICAgaW1hZ2U6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc291cmNlOiBuZXcgVGVtcGxhdGVJbWFnZShJbWFnZUZhY3RvcnkuQkVEKSxcbiAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGltYWdlOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHNvdXJjZTogbmV3IFRlbXBsYXRlSW1hZ2UoaW1hZ2UxKSxcbiAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgd2lkdGg6IDI1NixcbiAgICAgICAgICAgICAgaGVpZ2h0OiAyNTYsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpbWFnZTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBUZW1wbGF0ZUltYWdlKGltYWdlMiksXG4gICAgICAgICAgICAgIHg6IDI1NixcbiAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgd2lkdGg6IDI1NixcbiAgICAgICAgICAgICAgaGVpZ2h0OiAyNTYsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH07XG4gIH0pLFxuICBKb2tlT3ZlckhlYWQ6IGNyZWF0ZVRlbXBsYXRlKChpbWFnZTogSW1hZ2VTb3VyY2UpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RlcHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByZXByb2Nlc3MoX2NhbnZhcywgY3R4KSB7XG4gICAgICAgICAgICBjdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJjb2xvclwiO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcbiAgICAgICAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCA0MjUsIDQwNCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGltYWdlOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHNvdXJjZTogbmV3IFRlbXBsYXRlSW1hZ2UoaW1hZ2UpLFxuICAgICAgICAgICAgICB4OiAxMjUsXG4gICAgICAgICAgICAgIHk6IDEzMCxcbiAgICAgICAgICAgICAgd2lkdGg6IDE0MCxcbiAgICAgICAgICAgICAgaGVpZ2h0OiAxMzUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpbWFnZTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBUZW1wbGF0ZUltYWdlKEltYWdlRmFjdG9yeS5KT0tFT1ZFUkhFQUQpLFxuICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgICB3aWR0aDogNDI1LFxuICAgICAgICAgICAgICBoZWlnaHQ6IDQwNCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfTtcbiAgfSksXG4gIERlbGV0ZTogY3JlYXRlVGVtcGxhdGUoKGltYWdlOiBJbWFnZVNvdXJjZSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBzdGVwczogW1xuICAgICAgICB7XG4gICAgICAgICAgaW1hZ2U6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc291cmNlOiBuZXcgVGVtcGxhdGVJbWFnZShJbWFnZUZhY3RvcnkuREVMRVRFKSxcbiAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGltYWdlOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHNvdXJjZTogbmV3IFRlbXBsYXRlSW1hZ2UoaW1hZ2UpLFxuICAgICAgICAgICAgICB4OiAxMjAsXG4gICAgICAgICAgICAgIHk6IDEzNSxcbiAgICAgICAgICAgICAgd2lkdGg6IDE5NSxcbiAgICAgICAgICAgICAgaGVpZ2h0OiAxOTUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH07XG4gIH0pLFxuICBXYW50ZWQ6IGNyZWF0ZVRlbXBsYXRlKChpbWFnZTogSW1hZ2VTb3VyY2UpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RlcHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGltYWdlOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHNvdXJjZTogbmV3IFRlbXBsYXRlSW1hZ2UoSW1hZ2VGYWN0b3J5LldBTlRFRCksXG4gICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpbWFnZTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBUZW1wbGF0ZUltYWdlKGltYWdlKSxcbiAgICAgICAgICAgICAgeDogMTQ1LFxuICAgICAgICAgICAgICB5OiAyODIsXG4gICAgICAgICAgICAgIHdpZHRoOiA0NDcsXG4gICAgICAgICAgICAgIGhlaWdodDogNDQ3LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9KSxcbiAgV2FzdGVkOiBjcmVhdGVUZW1wbGF0ZSgoaW1hZ2U6IEltYWdlU291cmNlKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0ZXBzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBpbWFnZTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBUZW1wbGF0ZUltYWdlKGltYWdlKSxcbiAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgcHJlcHJvY2VzcyhfY2FudmFzLCBjdHgpIHtcbiAgICAgICAgICAgICAgICBjdHguZmlsdGVyID0gXCJncmV5c2NhbGUoMTAwJSlcIjtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGltYWdlOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHNvdXJjZTogbmV3IFRlbXBsYXRlSW1hZ2UoSW1hZ2VGYWN0b3J5LldBU1RFRCksXG4gICAgICAgICAgICAgIHg6IDE0NSxcbiAgICAgICAgICAgICAgeTogMjgyLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9KSxcbiAgU2hpdDogY3JlYXRlVGVtcGxhdGUoKGltYWdlOiBJbWFnZVNvdXJjZSkgPT4ge1xuICAgIGNvbnN0IGNsaXBDaXJjbGUgPSAoY3R4OiBTS1JTQ29udGV4dDJELCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikgPT4ge1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBcImRlc3RpbmF0aW9uLWluXCI7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBjdHguYXJjKHdpZHRoIC8gMiwgaGVpZ2h0IC8gMiwgd2lkdGggLyAyLCAwLCBNYXRoLlBJICogMik7XG4gICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICBjdHguZmlsbCgpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN0ZXBzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBpbWFnZTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzb3VyY2U6IG5ldyBUZW1wbGF0ZUltYWdlKEltYWdlRmFjdG9yeS5TSElUKSxcbiAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGltYWdlOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHNvdXJjZTogbmV3IFRlbXBsYXRlSW1hZ2UoaW1hZ2UpLFxuICAgICAgICAgICAgICB4OiAyMTAsXG4gICAgICAgICAgICAgIHk6IDcwMCxcbiAgICAgICAgICAgICAgd2lkdGg6IDE3MCxcbiAgICAgICAgICAgICAgaGVpZ2h0OiAxNzAsXG4gICAgICAgICAgICAgIHByZXByb2Nlc3MoX2NhbnZhcywgY3R4KSB7XG4gICAgICAgICAgICAgICAgY2xpcENpcmNsZShjdHgsIDE3MCwgMTcwKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfTtcbiAgfSksXG59O1xuIiwgImltcG9ydCB7IEZvbnQsIEZvbnRGYWN0b3J5IH0gZnJvbSBcIi4uL2Fzc2V0c1wiO1xuXG4vKipcbiAqIEFiYnJldmlhdGVzIHRoZSBnaXZlbiBudW1iZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBmaXhlZCA9ICh2OiBudW1iZXIsIHI6IGJvb2xlYW4pID0+IHtcbiAgaWYgKCFyKSByZXR1cm4gdjtcbiAgY29uc3QgZm9ybWF0dGVyID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KFwiZW4tVVNcIiwgeyBub3RhdGlvbjogXCJjb21wYWN0XCIgfSk7XG4gIHJldHVybiBmb3JtYXR0ZXIuZm9ybWF0KHYpO1xufTtcblxuLyoqXG4gKiBSZXNvbHZlcyB0aGUgZmlyc3QgcmVnaXN0ZXJlZCBmb250IGluc3RhbmNlIGlmIGF2YWlsYWJsZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldERlZmF1bHRGb250ID0gKCkgPT4ge1xuICByZXR1cm4gKEZvbnRGYWN0b3J5LnZhbHVlcygpLm5leHQoKS52YWx1ZSA/PyBudWxsKSBhcyBGb250IHwgbnVsbDtcbn07XG4iLCAiaW1wb3J0IHR5cGUgeyBDU1NQcm9wZXJ0aWVzIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc2F0b3JpLCB7IFNhdG9yaU9wdGlvbnMgfSBmcm9tIFwic2F0b3JpXCI7XG5pbXBvcnQgeyBGb250RmFjdG9yeSB9IGZyb20gXCIuLi9hc3NldHMvQXNzZXRzRmFjdG9yeVwiO1xuaW1wb3J0IHsgQ1NTUHJvcGVydGllc0xpa2UsIFN0eWxlU2hlZXQgfSBmcm9tIFwiLi4vaGVscGVyc1wiO1xuaW1wb3J0IHsgcmVuZGVyU3ZnLCBSZW5kZXJTdmdPcHRpb25zIH0gZnJvbSBcIi4uL2hlbHBlcnMvaW1hZ2VcIjtcbmltcG9ydCB7IEpTWCwgRWxlbWVudCB9IGZyb20gXCIuLi9oZWxwZXJzL2pzeFwiO1xuaW1wb3J0IHsgQnVpbGRlck9wdGlvbnNNYW5hZ2VyIH0gZnJvbSBcIi4vQnVpbGRlck9wdGlvbnNNYW5hZ2VyXCI7XG5cbmV4cG9ydCB0eXBlIEdyYXBoZW1lUHJvdmlkZXIgPSBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuXG5jb25zdCBpc0Vtb2ppID0gKHN0cjogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IGVtb2ppUmVnZXggPSAvXltcXHB7RW1vaml9XSQvdTtcbiAgcmV0dXJuIGVtb2ppUmVnZXgudGVzdChzdHIpO1xufTtcblxuZnVuY3Rpb24gZW1vamlUb1VuaWNvZGUoZW1vamk6IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmIChlbW9qaS5sZW5ndGggPT09IDEpIHJldHVybiBlbW9qaS5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KTtcbiAgbGV0IGNvbXAgPVxuICAgIChlbW9qaS5jaGFyQ29kZUF0KDApIC0gMHhkODAwKSAqIDB4NDAwICtcbiAgICAoZW1vamkuY2hhckNvZGVBdCgxKSAtIDB4ZGMwMCkgK1xuICAgIDB4MTAwMDA7XG4gIGlmIChjb21wIDwgMCkgcmV0dXJuIGVtb2ppLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpO1xuICByZXR1cm4gY29tcC50b1N0cmluZygxNikudG9Mb3dlckNhc2UoKTtcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUVtb2ppUHJvdmlkZXIgPSAoXG4gIGJ1aWxkZXI6IChjb2RlOiBzdHJpbmcpID0+IHN0cmluZ1xuKTogR3JhcGhlbWVQcm92aWRlciA9PiB7XG4gIGNvbnN0IGdyYXBoZW1lUHJvdmlkZXI6IEdyYXBoZW1lUHJvdmlkZXIgPSB7fTtcblxuICBjb25zdCBoYW5kbGVyOiBQcm94eUhhbmRsZXI8R3JhcGhlbWVQcm92aWRlcj4gPSB7XG4gICAgaGFzKHRhcmdldCwgcCkge1xuICAgICAgcmV0dXJuIGlzRW1vamkocCBhcyBzdHJpbmcpIHx8IHAgaW4gdGFyZ2V0O1xuICAgIH0sXG4gICAgZ2V0KHRhcmdldCwgcHJvcDogc3RyaW5nKSB7XG4gICAgICBpZiAoaXNFbW9qaShwcm9wKSkge1xuICAgICAgICBjb25zdCBjb2RlID0gZW1vamlUb1VuaWNvZGUocHJvcCk7XG4gICAgICAgIGNvbnN0IHVybCA9IGJ1aWxkZXIoY29kZSk7XG5cbiAgICAgICAgcmV0dXJuIHVybDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb3A7XG4gICAgfSxcbiAgfTtcblxuICByZXR1cm4gbmV3IFByb3h5KGdyYXBoZW1lUHJvdmlkZXIsIGhhbmRsZXIpO1xufTtcblxuY29uc3QgRmx1ZW50RW1vamlCYXNlID0gKHM6IHN0cmluZykgPT5cbiAgYGh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9naC9zaHVkaW5nL2ZsdWVudHVpLWVtb2ppLXVuaWNvZGUvYXNzZXRzLyR7c30uc3ZnYDtcblxuZXhwb3J0IGNvbnN0IEJ1aWx0SW5HcmFwaGVtZVByb3ZpZGVyID0ge1xuICBUd2Vtb2ppOiBjcmVhdGVFbW9qaVByb3ZpZGVyKFxuICAgIChjb2RlOiBzdHJpbmcpID0+XG4gICAgICBgaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvdHdlbW9qaS8xNC4wLjIvc3ZnLyR7Y29kZX0uc3ZnYFxuICApLFxuICBGbHVlbnRFbW9qaUhpZ2hDb250cmFzdDogY3JlYXRlRW1vamlQcm92aWRlcigoY29kZSkgPT5cbiAgICBGbHVlbnRFbW9qaUJhc2UoYCR7Y29kZX1faGlnaC1jb250cmFzdGApXG4gICksXG4gIEZsdWVudEVtb2ppRmxhdDogY3JlYXRlRW1vamlQcm92aWRlcigoY29kZSkgPT5cbiAgICBGbHVlbnRFbW9qaUJhc2UoYCR7Y29kZX1fZmxhdGApXG4gICksXG4gIEZsdWVudEVtb2ppQ29sb3I6IGNyZWF0ZUVtb2ppUHJvdmlkZXIoKGNvZGUpID0+XG4gICAgRmx1ZW50RW1vamlCYXNlKGAke2NvZGV9X2NvbG9yYClcbiAgKSxcbiAgT3Blbm1vamk6IGNyZWF0ZUVtb2ppUHJvdmlkZXIoXG4gICAgKGNvZGUpID0+XG4gICAgICBgaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9Ac3ZnbW9qaS9vcGVubW9qaUAyLjAuMC9zdmcvJHtjb2RlLnRvVXBwZXJDYXNlKCl9LnN2Z2BcbiAgKSxcbiAgTm90bzogY3JlYXRlRW1vamlQcm92aWRlcihcbiAgICAoY29kZSkgPT5cbiAgICAgIGBodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvZ2gvc3ZnbW9qaS9zdmdtb2ppL3BhY2thZ2VzL3N2Z21vamlfX25vdG8vc3ZnLyR7Y29kZS50b1VwcGVyQ2FzZSgpfS5zdmdgXG4gICksXG4gIEJsb2Jtb2ppOiBjcmVhdGVFbW9qaVByb3ZpZGVyKFxuICAgIChjb2RlKSA9PlxuICAgICAgYGh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vQHN2Z21vamkvYmxvYkAyLjAuMC9zdmcvJHtjb2RlLnRvVXBwZXJDYXNlKCl9LnN2Z2BcbiAgKSxcbiAgTm9uZToge30gYXMgR3JhcGhlbWVQcm92aWRlcixcbn07XG5cbmV4cG9ydCBjb25zdCBFbW9qaUNhY2hlID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oKTtcblxuLyoqXG4gKiBUaGUgYnVpbGRlciB0ZW1wbGF0ZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCdWlsZGVyVGVtcGxhdGUge1xuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgb2YgdGhpcyB0ZW1wbGF0ZS5cbiAgICovXG4gIGNvbXBvbmVudHM6IEFycmF5PE5vZGUgfCBFbGVtZW50PjtcbiAgLyoqXG4gICAqIFRoZSB3aWR0aCBvZiB0aGlzIHRlbXBsYXRlLlxuICAgKi9cbiAgd2lkdGg6IG51bWJlcjtcbiAgLyoqXG4gICAqIFRoZSBoZWlnaHQgb2YgdGhpcyB0ZW1wbGF0ZS5cbiAgICovXG4gIGhlaWdodDogbnVtYmVyO1xuICAvKipcbiAgICogVGhlIHN0eWxlIG9mIHRoaXMgdGVtcGxhdGUuXG4gICAqL1xuICBzdHlsZT86IENTU1Byb3BlcnRpZXM7XG59XG5cbi8qKlxuICogVGhlIGJ1aWxkIG91dHB1dCBmb3JtYXQuXG4gKi9cbmV4cG9ydCB0eXBlIEJ1aWxkRm9ybWF0ID0gXCJzdmdcIiB8IFwicG5nXCIgfCBcImF2aWZcIiB8IFwianBlZ1wiIHwgXCJ3ZWJwXCI7XG5cbi8qKlxuICogVGhlIGJ1aWxkZXIgYnVpbGQgb3B0aW9ucy5cbiAqL1xuZXhwb3J0IHR5cGUgQnVpbGRlckJ1aWxkT3B0aW9ucyA9IHtcbiAgLyoqXG4gICAqIFRoZSBvdXRwdXQgZm9ybWF0LlxuICAgKi9cbiAgZm9ybWF0PzogQnVpbGRGb3JtYXQ7XG4gIC8qKlxuICAgKiBUaGUgb3B0aW9ucyBmb3IgdGhpcyBidWlsZC5cbiAgICovXG4gIG9wdGlvbnM/OiBSZW5kZXJTdmdPcHRpb25zO1xuICAvKipcbiAgICogVGhlIGFib3J0IHNpZ25hbC5cbiAgICovXG4gIHNpZ25hbD86IEFib3J0U2lnbmFsO1xufSAmIFNhdG9yaU9wdGlvbnM7XG5cbi8qKlxuICogVGhlIGJ1aWxkZXIgbm9kZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBOb2RlIHtcbiAgLyoqXG4gICAqIENvbnZlcnQgdGhpcyBub2RlIHRvIGVsZW1lbnQuXG4gICAqL1xuICB0b0VsZW1lbnQoKTogRWxlbWVudDtcbn1cblxuZXhwb3J0IGNsYXNzIEJ1aWxkZXI8VCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4gPSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4ge1xuICAjc3R5bGU6IENTU1Byb3BlcnRpZXNMaWtlID0ge307XG4gIC8qKlxuICAgKiBUaGUgdGFpbHdpbmQgc3Vic2V0IHRvIGFwcGx5IHRvIHRoaXMgYnVpbGRlci5cbiAgICovXG4gIHB1YmxpYyB0dzogc3RyaW5nID0gXCJcIjtcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIG9mIHRoaXMgYnVpbGRlci5cbiAgICovXG4gIHB1YmxpYyBjb21wb25lbnRzID0gbmV3IEFycmF5PE5vZGUgfCBFbGVtZW50PigpO1xuICAvKipcbiAgICogVGhlIG9wdGlvbnMgbWFuYWdlciBvZiB0aGlzIGJ1aWxkZXIuXG4gICAqL1xuICBwdWJsaWMgb3B0aW9ucyA9IG5ldyBCdWlsZGVyT3B0aW9uc01hbmFnZXI8VD4oKTtcblxuICAvKipcbiAgICogVGhlIGdyYXBoZW1lIHByb3ZpZGVyIG9mIHRoaXMgYnVpbGRlci5cbiAgICovXG4gIHB1YmxpYyBncmFwaGVtZVByb3ZpZGVyOiBHcmFwaGVtZVByb3ZpZGVyID0gQnVpbHRJbkdyYXBoZW1lUHJvdmlkZXIuVHdlbW9qaTtcblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGJ1aWxkZXIuXG4gICAqIEBwYXJhbSB3aWR0aCB0aGUgd2lkdGggb2YgdGhpcyBidWlsZGVyLlxuICAgKiBAcGFyYW0gaGVpZ2h0IHRoZSBoZWlnaHQgb2YgdGhpcyBidWlsZGVyLlxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyB3aWR0aDogbnVtYmVyLCBwdWJsaWMgaGVpZ2h0OiBudW1iZXIpIHtcbiAgICB0aGlzLmFkanVzdENhbnZhcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEJvb3RzdHJhcCB0aGlzIGJ1aWxkZXIgd2l0aCBkYXRhLlxuICAgKi9cbiAgcHVibGljIGJvb3RzdHJhcChkYXRhOiBUKSB7XG4gICAgdGhpcy5vcHRpb25zLnNldE9wdGlvbnMoZGF0YSk7XG4gIH1cblxuICAvKipcbiAgICogQWRqdXN0IHRoZSBjYW52YXMgc2l6ZS5cbiAgICovXG4gIHB1YmxpYyBhZGp1c3RDYW52YXMoKSB7XG4gICAgdGhpcy4jc3R5bGUgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAgICByb290OiB7XG4gICAgICAgIHdpZHRoOiBgJHt0aGlzLndpZHRofXB4YCxcbiAgICAgICAgaGVpZ2h0OiBgJHt0aGlzLmhlaWdodH1weGAsXG4gICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgc3R5bGUgb2YgdGhpcyBidWlsZGVyLlxuICAgKi9cbiAgcHVibGljIGdldCBzdHlsZSgpIHtcbiAgICByZXR1cm4gdGhpcy4jc3R5bGUucm9vdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHN0eWxlIG9mIHRoaXMgYnVpbGRlci5cbiAgICovXG4gIHB1YmxpYyBzZXQgc3R5bGUobmV3U3R5bGU6IENTU1Byb3BlcnRpZXMpIHtcbiAgICBTdHlsZVNoZWV0LmNvbXBvc2UodGhpcy4jc3R5bGUucm9vdCwgbmV3U3R5bGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBjb21wb25lbnQgdG8gdGhpcyBidWlsZGVyLlxuICAgKiBAcGFyYW0gY29tcG9uZW50IHRoZSBjb21wb25lbnQgdG8gYWRkLlxuICAgKi9cbiAgcHVibGljIGFkZENvbXBvbmVudDxUIGV4dGVuZHMgTm9kZSB8IEVsZW1lbnQ+KGNvbXBvbmVudDogVCB8IFRbXSkge1xuICAgIGlmIChcbiAgICAgIGNvbXBvbmVudCBpbnN0YW5jZW9mIEVsZW1lbnQgJiZcbiAgICAgIChjb21wb25lbnQudHlwZSBhcyB1bmtub3duIGFzIEZ1bmN0aW9uKSA9PT0gSlNYLkZyYWdtZW50XG4gICAgKVxuICAgICAgY29tcG9uZW50ID0gY29tcG9uZW50LmNoaWxkcmVuO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShjb21wb25lbnQpKSBjb21wb25lbnQgPSBbY29tcG9uZW50XTtcbiAgICB0aGlzLmNvbXBvbmVudHMucHVzaCguLi5jb21wb25lbnQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBncmFwaGVtZSBpbWFnZSBwcm92aWRlciBmb3IgdGhpcyBidWlsZGVyLlxuICAgKi9cbiAgcHVibGljIHNldEdyYXBoZW1lUHJvdmlkZXIocHJvdmlkZXI6IEdyYXBoZW1lUHJvdmlkZXIpIHtcbiAgICB0aGlzLmdyYXBoZW1lUHJvdmlkZXIgPSBwcm92aWRlcjtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHN0eWxlIG9mIHRoaXMgYnVpbGRlci5cbiAgICogQHBhcmFtIG5ld1N0eWxlIHRoZSBuZXcgc3R5bGUuXG4gICAqL1xuICBwdWJsaWMgc2V0U3R5bGUobmV3U3R5bGU6IENTU1Byb3BlcnRpZXMpIHtcbiAgICBTdHlsZVNoZWV0LmNvbXBvc2UodGhpcy4jc3R5bGUucm9vdCB8fCB7fSwgbmV3U3R5bGUgfHwge30pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudHNcbiAgICAgIC5tYXAoKGNvbXBvbmVudCkgPT4ge1xuICAgICAgICBpZiAoY29tcG9uZW50ID09IG51bGwpIHJldHVybiBbXTtcbiAgICAgICAgaWYgKGNvbXBvbmVudCBpbnN0YW5jZW9mIEVsZW1lbnQpIHJldHVybiBjb21wb25lbnQ7XG4gICAgICAgIGlmIChjb21wb25lbnQudG9FbGVtZW50KSByZXR1cm4gY29tcG9uZW50LnRvRWxlbWVudCgpO1xuICAgICAgICByZXR1cm4gPHNwYW4+e1N0cmluZyhjb21wb25lbnQpfTwvc3Bhbj47XG4gICAgICB9KVxuICAgICAgLmZsYXQoMSkgYXMgUmVhY3QuUmVhY3ROb2RlW107XG4gIH1cblxuICAvKipcbiAgICogUmVuZGVyIHRoaXMgYnVpbGRlci5cbiAgICovXG4gIHB1YmxpYyBhc3luYyByZW5kZXIoKTogUHJvbWlzZTxSZWFjdC5SZWFjdE5vZGU+IHtcbiAgICByZXR1cm4gPGRpdiBzdHlsZT17dGhpcy5zdHlsZX0+e3RoaXMuX3JlbmRlcigpfTwvZGl2PjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IHRoaXMgYnVpbGRlciBpbnRvIGFuIGltYWdlLlxuICAgKiBAcGFyYW0gb3B0aW9ucyB0aGUgYnVpbGQgb3B0aW9ucy5cbiAgICogQHJldHVybnMgdGhlIGltYWdlIGJ1ZmZlciBvciBzdmcgc3RyaW5nLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIGJ1aWxkKG9wdGlvbnM6IFBhcnRpYWw8QnVpbGRlckJ1aWxkT3B0aW9ucz4gPSB7fSkge1xuICAgIG9wdGlvbnMuZm9ybWF0ID8/PSBcInBuZ1wiO1xuXG4gICAgY29uc3QgZm9udHMgPSBBcnJheS5mcm9tKEZvbnRGYWN0b3J5LnZhbHVlcygpKS5tYXAoKGZvbnQpID0+XG4gICAgICBmb250LmdldERhdGEoKVxuICAgICk7XG4gICAgY29uc3QgZWxlbWVudCA9IGF3YWl0IHRoaXMucmVuZGVyKCk7XG5cbiAgICBjb25zdCBzdmcgPSBhd2FpdCBzYXRvcmkoZWxlbWVudCwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlaWdodDogdGhpcy5oZWlnaHQsXG4gICAgICB3aWR0aDogdGhpcy53aWR0aCxcbiAgICAgIGZvbnRzLFxuICAgICAgZW1iZWRGb250OiB0cnVlLFxuICAgICAgbG9hZEFkZGl0aW9uYWxBc3NldDogYXN5bmMgKGxhbmd1YWdlQ29kZSwgc2VnbWVudCkgPT4ge1xuICAgICAgICBjb25zdCBmYWxsYmFjayA9ICgpID0+XG4gICAgICAgICAgb3B0aW9ucz8ubG9hZEFkZGl0aW9uYWxBc3NldD8uKGxhbmd1YWdlQ29kZSwgc2VnbWVudCkgPz8gc2VnbWVudDtcbiAgICAgICAgaWYgKGxhbmd1YWdlQ29kZSA9PT0gXCJlbW9qaVwiICYmIHRoaXMuZ3JhcGhlbWVQcm92aWRlcikge1xuICAgICAgICAgIGNvbnN0IGNhY2hlZCA9IEVtb2ppQ2FjaGUuZ2V0KHNlZ21lbnQpO1xuICAgICAgICAgIGlmIChjYWNoZWQpIHJldHVybiBjYWNoZWQ7XG4gICAgICAgICAgY29uc3QgaXNTdXBwb3J0ZWQgPSBzZWdtZW50IGluIHRoaXMuZ3JhcGhlbWVQcm92aWRlcjtcbiAgICAgICAgICBpZiAoIWlzU3VwcG9ydGVkKSByZXR1cm4gZmFsbGJhY2soKTtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB1cmwgPSB0aGlzLmdyYXBoZW1lUHJvdmlkZXJbc2VnbWVudF07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCk7XG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSByZXR1cm4gZmFsbGJhY2soKTtcbiAgICAgICAgICAgIGNvbnN0IHN2ZyA9IGF3YWl0IHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG4gICAgICAgICAgICBjb25zdCBiYXNlNjQgPSBgZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCwke0J1ZmZlci5mcm9tKFxuICAgICAgICAgICAgICBzdmdcbiAgICAgICAgICAgICkudG9TdHJpbmcoXCJiYXNlNjRcIil9YDtcbiAgICAgICAgICAgIEVtb2ppQ2FjaGUuc2V0KHNlZ21lbnQsIGJhc2U2NCk7XG4gICAgICAgICAgICByZXR1cm4gYmFzZTY0O1xuICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgcmV0dXJuIGZhbGxiYWNrKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrKCk7XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9wdGlvbnM/LmZvcm1hdCA9PT0gXCJzdmdcIlxuICAgICAgPyBzdmdcbiAgICAgIDogcmVuZGVyU3ZnKHtcbiAgICAgICAgICBzdmcsXG4gICAgICAgICAgZm9ybWF0OiBvcHRpb25zLmZvcm1hdCxcbiAgICAgICAgICBvcHRpb25zOiBvcHRpb25zLm9wdGlvbnMsXG4gICAgICAgICAgc2lnbmFsOiBvcHRpb25zLnNpZ25hbCxcbiAgICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgYnVpbGRlciBmcm9tIGJ1aWxkZXIgdGVtcGxhdGUuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZyb20odGVtcGxhdGU6IEJ1aWxkZXJUZW1wbGF0ZSkge1xuICAgIGNvbnN0IGJ1aWxkZXIgPSBuZXcgdGhpcyh0ZW1wbGF0ZS53aWR0aCwgdGVtcGxhdGUuaGVpZ2h0KTtcblxuICAgIGlmICh0ZW1wbGF0ZS5zdHlsZSkgYnVpbGRlci5zdHlsZSA9IHRlbXBsYXRlLnN0eWxlO1xuICAgIGJ1aWxkZXIuY29tcG9uZW50cyA9IHRlbXBsYXRlLmNvbXBvbmVudHM7XG5cbiAgICByZXR1cm4gYnVpbGRlcjtcbiAgfVxufVxuIiwgImV4cG9ydCBjbGFzcyBCdWlsZGVyT3B0aW9uc01hbmFnZXI8VCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4+IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgYnVpbGRlciBvcHRpb25zIG1hbmFnZXIuXG4gICAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIHRvIHVzZVxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBvcHRpb25zOiBUID0ge30gYXMgVCkge31cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgb3B0aW9ucy5cbiAgICovXG4gIHB1YmxpYyBnZXRPcHRpb25zKCk6IFQge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgb3B0aW9ucy4gVGhpcyB3aWxsIG92ZXJyaWRlIHRoZSBwcmV2aW91cyBvcHRpb25zLlxuICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgb3B0aW9ucyB0byB1c2VcbiAgICovXG4gIHB1YmxpYyBzZXRPcHRpb25zKG9wdGlvbnM6IFQpOiB2b2lkIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbiBvcHRpb24gYnkgbmFtZS5cbiAgICogQHBhcmFtIGtleSBUaGUgb3B0aW9uIG5hbWVcbiAgICogQHJldHVybnMgVGhlIG9wdGlvbiB2YWx1ZVxuICAgKi9cbiAgcHVibGljIGdldDxLIGV4dGVuZHMga2V5b2YgVD4oa2V5OiBLKTogVFtLXSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9uc1trZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBhbiBvcHRpb24gYnkgbmFtZS5cbiAgICogQHBhcmFtIGtleSBUaGUgb3B0aW9uIG5hbWVcbiAgICogQHBhcmFtIHZhbHVlIFRoZSBvcHRpb24gdmFsdWVcbiAgICovXG4gIHB1YmxpYyBzZXQ8SyBleHRlbmRzIGtleW9mIFQ+KGtleTogSywgdmFsdWU6IFRbS10pOiB2b2lkIHtcbiAgICB0aGlzLm9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIE1lcmdlIG5ldyBkYXRhIHRvIG9sZCBkYXRhIG9uIGFuIG9wdGlvbiBieSBuYW1lLlxuICAgKi9cbiAgcHVibGljIG1lcmdlPEsgZXh0ZW5kcyBrZXlvZiBUPihrZXk6IEssIHZhbHVlOiBQYXJ0aWFsPFRbS10+KTogdm9pZCB7XG4gICAgdGhpcy5vcHRpb25zW2tleV0gPSB7IC4uLnRoaXMub3B0aW9uc1trZXldLCAuLi52YWx1ZSB9O1xuICB9XG59XG4iLCAiaW1wb3J0IHsgSlNYLCBsb2FkSW1hZ2UsIFN0eWxhYmxlLCBTdHlsZVNoZWV0IH0gZnJvbSBcIi4uL2hlbHBlcnNcIjtcbmltcG9ydCB7IEltYWdlU291cmNlIH0gZnJvbSBcIi4uL2hlbHBlcnNcIjtcbmltcG9ydCB7IGZpeGVkIH0gZnJvbSBcIi4uL2hlbHBlcnMvdXRpbHNcIjtcbmltcG9ydCB7IEJ1aWxkZXIgfSBmcm9tIFwiLi4vdGVtcGxhdGVzXCI7XG5cbmNvbnN0IERlZmF1bHRDb2xvcnMgPSB7XG4gIFllbGxvdzogXCIjRkZBQTAwXCIsXG4gIEJsdWU6IFwiIzAwOUJENlwiLFxuICBHcmVlbjogXCIjMDBEOTVGXCIsXG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIExlYWRlcmJvYXJkUHJvcHMge1xuICAvKipcbiAgICogVGhlIGJhY2tncm91bmQgaW1hZ2UuXG4gICAqL1xuICBiYWNrZ3JvdW5kOiBJbWFnZVNvdXJjZSB8IG51bGw7XG4gIC8qKlxuICAgKiBUaGUgYmFja2dyb3VuZCBjb2xvci5cbiAgICovXG4gIGJhY2tncm91bmRDb2xvcjogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGhlYWRlciBvZiB0aGlzIGxlYWRlcmJvYXJkIHVpLlxuICAgKi9cbiAgaGVhZGVyPzoge1xuICAgIC8qKlxuICAgICAqIFRoZSB0aXRsZSBvZiB0aGlzIGxlYWRlcmJvYXJkIHVpLlxuICAgICAqL1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHN1YnRpdGxlIG9mIHRoaXMgbGVhZGVyYm9hcmQgdWkuXG4gICAgICovXG4gICAgc3VidGl0bGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgaW1hZ2Ugb2YgdGhpcyBsZWFkZXJib2FyZCB1aS5cbiAgICAgKi9cbiAgICBpbWFnZTogSW1hZ2VTb3VyY2U7XG4gIH07XG4gIC8qKlxuICAgKiBUaGUgcGxheWVycyBvZiB0aGlzIGxlYWRlcmJvYXJkIHVpLlxuICAgKi9cbiAgcGxheWVyczoge1xuICAgIC8qKlxuICAgICAqIFRoZSBkaXNwbGF5IG5hbWUgb2YgdGhpcyBwbGF5ZXIuXG4gICAgICovXG4gICAgZGlzcGxheU5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgdXNlcm5hbWUgb2YgdGhpcyBwbGF5ZXIuXG4gICAgICovXG4gICAgdXNlcm5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgbGV2ZWwgb2YgdGhpcyBwbGF5ZXIuXG4gICAgICovXG4gICAgbGV2ZWw6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgeHAgb2YgdGhpcyBwbGF5ZXIuXG4gICAgICovXG4gICAgeHA6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgcmFuayBvZiB0aGlzIHBsYXllci5cbiAgICAgKi9cbiAgICByYW5rOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIGF2YXRhciBvZiB0aGlzIHBsYXllci5cbiAgICAgKi9cbiAgICBhdmF0YXI6IEltYWdlU291cmNlO1xuICB9W107XG4gIC8qKlxuICAgKiBUaGUgdGV4dCB2YWx1ZXMgb2YgdGhpcyBsZWFkZXJib2FyZCB1aS5cbiAgICovXG4gIHRleHQ6IHtcbiAgICBsZXZlbDogc3RyaW5nO1xuICAgIHhwOiBzdHJpbmc7XG4gICAgcmFuazogc3RyaW5nO1xuICB9O1xuICAvKipcbiAgICogV2hldGhlciBvciBub3QgdG8gYWJicmV2aWF0ZSB0aGUgbnVtZXJpYyB2YWx1ZXMuXG4gICAqL1xuICBhYmJyZXZpYXRlOiBib29sZWFuO1xufVxuXG5jb25zdCBDcm93biA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8c3ZnXG4gICAgICB3aWR0aD1cIjIwXCJcbiAgICAgIGhlaWdodD1cIjIwXCJcbiAgICAgIHZpZXdCb3g9XCIwIDAgMjAgMjBcIlxuICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgPlxuICAgICAgPHBhdGhcbiAgICAgICAgZD1cIk0xNi41IDE3LjVIMy41QzMuMjI1IDE3LjUgMyAxNy43ODEzIDMgMTguMTI1VjE5LjM3NUMzIDE5LjcxODggMy4yMjUgMjAgMy41IDIwSDE2LjVDMTYuNzc1IDIwIDE3IDE5LjcxODggMTcgMTkuMzc1VjE4LjEyNUMxNyAxNy43ODEzIDE2Ljc3NSAxNy41IDE2LjUgMTcuNVpNMTguNSA1QzE3LjY3MTkgNSAxNyA1LjgzOTg0IDE3IDYuODc1QzE3IDcuMTUyMzQgMTcuMDUgNy40MTAxNiAxNy4xMzc1IDcuNjQ4NDRMMTQuODc1IDkuMzQzNzVDMTQuMzkzNyA5LjcwMzEzIDEzLjc3MTkgOS41IDEzLjQ5MzcgOC44OTA2M0wxMC45NDY5IDMuMzIwMzFDMTEuMjgxMiAyLjk3NjU2IDExLjUgMi40NjA5NCAxMS41IDEuODc1QzExLjUgMC44Mzk4NDQgMTAuODI4MSAwIDEwIDBDOS4xNzE4OCAwIDguNSAwLjgzOTg0NCA4LjUgMS44NzVDOC41IDIuNDYwOTQgOC43MTg3NSAyLjk3NjU2IDkuMDUzMTMgMy4zMjAzMUw2LjUwNjI1IDguODkwNjNDNi4yMjgxMiA5LjUgNS42MDMxMiA5LjcwMzEzIDUuMTI1IDkuMzQzNzVMMi44NjU2MiA3LjY0ODQ0QzIuOTUgNy40MTQwNiAzLjAwMzEyIDcuMTUyMzQgMy4wMDMxMiA2Ljg3NUMzLjAwMzEyIDUuODM5ODQgMi4zMzEyNSA1IDEuNTAzMTIgNUMwLjY3NSA1IDAgNS44Mzk4NCAwIDYuODc1QzAgNy45MTAxNiAwLjY3MTg3NSA4Ljc1IDEuNSA4Ljc1QzEuNTgxMjUgOC43NSAxLjY2MjUgOC43MzQzOCAxLjc0MDYzIDguNzE4NzVMNCAxNi4yNUgxNkwxOC4yNTk0IDguNzE4NzVDMTguMzM3NSA4LjczNDM4IDE4LjQxODggOC43NSAxOC41IDguNzVDMTkuMzI4MSA4Ljc1IDIwIDcuOTEwMTYgMjAgNi44NzVDMjAgNS44Mzk4NCAxOS4zMjgxIDUgMTguNSA1WlwiXG4gICAgICAgIGZpbGw9XCIjRkZBQTAwXCJcbiAgICAgIC8+XG4gICAgPC9zdmc+XG4gICk7XG59O1xuXG5jb25zdCBNSU5fUkVOREVSX0hFSUdIVCA9IDQyMDtcblxuZXhwb3J0IGNsYXNzIExlYWRlcmJvYXJkQnVpbGRlciBleHRlbmRzIEJ1aWxkZXI8TGVhZGVyYm9hcmRQcm9wcz4ge1xuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGxlYWRlcmJvYXJkIHVpIGJ1aWxkZXJcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcig1MDAsIE1JTl9SRU5ERVJfSEVJR0hUKTtcblxuICAgIHRoaXMuYm9vdHN0cmFwKHtcbiAgICAgIGJhY2tncm91bmQ6IG51bGwsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiIzdjNTYzY1wiLFxuICAgICAgcGxheWVyczogW10sXG4gICAgICBhYmJyZXZpYXRlOiB0cnVlLFxuICAgICAgdGV4dDoge1xuICAgICAgICBsZXZlbDogXCJMZXZlbFwiLFxuICAgICAgICByYW5rOiBcIlJhbmtcIixcbiAgICAgICAgeHA6IFwiWFBcIixcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICB0aGlzLnNldFN0eWxlKHtcbiAgICAgIGJvcmRlclJhZGl1czogXCIxLjVyZW1cIixcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgYmFja2dyb3VuZCBmb3IgdGhpcyBsZWFkZXJib2FyZCB1aVxuICAgKiBAcGFyYW0gYmFja2dyb3VuZCBiYWNrZ3JvdW5kIGltYWdlXG4gICAqL1xuICBwdWJsaWMgc2V0QmFja2dyb3VuZChiYWNrZ3JvdW5kOiBJbWFnZVNvdXJjZSkge1xuICAgIHRoaXMub3B0aW9ucy5zZXQoXCJiYWNrZ3JvdW5kXCIsIGJhY2tncm91bmQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBiYWNrZ3JvdW5kIGNvbG9yIGZvciB0aGlzIGxlYWRlcmJvYXJkIHVpXG4gICAqIEBwYXJhbSBjb2xvciBiYWNrZ3JvdW5kIGNvbG9yXG4gICAqL1xuICBwdWJsaWMgc2V0QmFja2dyb3VuZENvbG9yKGNvbG9yOiBzdHJpbmcpIHtcbiAgICB0aGlzLm9wdGlvbnMuc2V0KFwiYmFja2dyb3VuZENvbG9yXCIsIGNvbG9yKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgaGVhZGVyIGZvciB0aGlzIGxlYWRlcmJvYXJkIHVpXG4gICAqIEBwYXJhbSBkYXRhIGhlYWRlciBkYXRhXG4gICAqL1xuICBwdWJsaWMgc2V0SGVhZGVyKGRhdGE6IExlYWRlcmJvYXJkUHJvcHNbXCJoZWFkZXJcIl0gJiB7fSkge1xuICAgIHRoaXMub3B0aW9ucy5zZXQoXCJoZWFkZXJcIiwgZGF0YSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHBsYXllcnMgZm9yIHRoaXMgbGVhZGVyYm9hcmQgdWkuIFRoZSBjYW52YXMgc2l6ZSB3aWxsIGJlIGFkanVzdGVkIGF1dG9tYXRpY2FsbHkgYmFzZWQgb24gdGhlIG51bWJlciBvZiBwbGF5ZXJzLlxuICAgKiBAcGFyYW0gcGxheWVycyBwbGF5ZXJzIGRhdGFcbiAgICovXG4gIHB1YmxpYyBzZXRQbGF5ZXJzKHBsYXllcnM6IExlYWRlcmJvYXJkUHJvcHNbXCJwbGF5ZXJzXCJdKSB7XG4gICAgY29uc3QgaXRlbXMgPSBwbGF5ZXJzLnNsaWNlKDAsIDEwKTtcbiAgICB0aGlzLm9wdGlvbnMuc2V0KFwicGxheWVyc1wiLCBpdGVtcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25maWd1cmVzIHRoZSB0ZXh0IHJlbmRlcmVyIGZvciB0aGlzIGxlYWRlcmJvYXJkLlxuICAgKiBAcGFyYW0gY29uZmlnIFRoZSBjb25maWd1cmF0aW9uIGZvciB0aGlzIGxlYWRlcmJvYXJkLlxuICAgKi9cbiAgcHVibGljIHNldFRleHRTdHlsZXMoY29uZmlnOiBQYXJ0aWFsPExlYWRlcmJvYXJkUHJvcHNbXCJ0ZXh0XCJdPikge1xuICAgIHRoaXMub3B0aW9ucy5tZXJnZShcInRleHRcIiwgY29uZmlnKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXIgdGhpcyBsZWFkZXJib2FyZCB1aSBvbiB0aGUgY2FudmFzXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgcmVuZGVyKCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuZ2V0T3B0aW9ucygpO1xuICAgIGNvbnN0IHRvdGFsID0gb3B0aW9ucy5wbGF5ZXJzLmxlbmd0aDtcblxuICAgIGlmICghdG90YWwpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiTnVtYmVyIG9mIHBsYXllcnMgbXVzdCBiZSBncmVhdGVyIHRoYW4gMFwiKTtcbiAgICB9XG5cbiAgICBjb25zdCBtaW5oID0gb3B0aW9ucy5oZWFkZXIgPyBNSU5fUkVOREVSX0hFSUdIVCAtIDEzMCA6IE1JTl9SRU5ERVJfSEVJR0hUO1xuICAgIGNvbnN0IGNhbGN1bGF0ZWRIZWlnaHQgPSBtaW5oICsgKHRvdGFsIC0gMykgKiA5MDtcbiAgICBjb25zdCBkaWZmID0gdG90YWwgPj0gNyA/IHRvdGFsIC0gNyA6IDA7XG4gICAgY29uc3QgaW5jcmVtZW50ZWQgPSAxMCAqIGRpZmY7XG4gICAgdGhpcy5oZWlnaHQgPSBNYXRoLm1heChjYWxjdWxhdGVkSGVpZ2h0ICsgaW5jcmVtZW50ZWQsIG1pbmgpO1xuXG4gICAgdGhpcy5hZGp1c3RDYW52YXMoKTtcblxuICAgIGxldCBiYWNrZ3JvdW5kLCBoZWFkZXJJbWc7XG5cbiAgICBpZiAob3B0aW9ucy5iYWNrZ3JvdW5kKSB7XG4gICAgICBiYWNrZ3JvdW5kID0gYXdhaXQgbG9hZEltYWdlKG9wdGlvbnMuYmFja2dyb3VuZCk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaGVhZGVyKSB7XG4gICAgICBoZWFkZXJJbWcgPSBhd2FpdCBsb2FkSW1hZ2Uob3B0aW9ucy5oZWFkZXIuaW1hZ2UpO1xuICAgIH1cblxuICAgIGNvbnN0IHdpbm5lcnMgPSBbXG4gICAgICBvcHRpb25zLnBsYXllcnNbMV0sXG4gICAgICBvcHRpb25zLnBsYXllcnNbMF0sXG4gICAgICBvcHRpb25zLnBsYXllcnNbMl0sXG4gICAgXS5maWx0ZXIoQm9vbGVhbik7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJoLWZ1bGwgdy1mdWxsIGZsZXggcmVsYXRpdmVcIj5cbiAgICAgICAge2JhY2tncm91bmQgJiYgKFxuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIHNyYz17YmFja2dyb3VuZC50b0RhdGFVUkwoKX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImFic29sdXRlIHRvcC0wIGxlZnQtMCBoLWZ1bGwgdy1mdWxsXCJcbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInB5LVszMHB4XSBmbGV4IGZsZXgtY29sIGl0ZW1zLWNlbnRlciB3LWZ1bGxcIj5cbiAgICAgICAgICB7b3B0aW9ucy5oZWFkZXIgJiYgaGVhZGVySW1nID8gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBmbGV4LWNvbCB3LWZ1bGxcIj5cbiAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgIHNyYz17aGVhZGVySW1nLnRvRGF0YVVSTCgpfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInJvdW5kZWQtZnVsbCB3LTE2IGgtdy0xNlwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJ0ZXh0LXdoaXRlIHRleHQteGwgZm9udC1leHRyYWJvbGQgbS0wIG10LTJcIj5cbiAgICAgICAgICAgICAgICB7b3B0aW9ucy5oZWFkZXIudGl0bGV9XG4gICAgICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgICAgIDxoMiBjbGFzc05hbWU9XCJ0ZXh0LXdoaXRlIHRleHQtc20gZm9udC10aGluIG0tMFwiPlxuICAgICAgICAgICAgICAgIHtvcHRpb25zLmhlYWRlci5zdWJ0aXRsZX1cbiAgICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzTmFtZT17U3R5bGVTaGVldC5jbihcbiAgICAgICAgICAgICAgXCJmbGV4IGZsZXgtcm93IHctWzkwJV0ganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyIG10LTE2XCIsXG4gICAgICAgICAgICAgIHdpbm5lcnMubGVuZ3RoID8gXCJtdC0yNFwiIDogXCJcIlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7YXdhaXQgUHJvbWlzZS5hbGwod2lubmVycy5tYXAoKHdpbm5lcikgPT4gdGhpcy5yZW5kZXJUb3Aod2lubmVyKSkpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIHt0aGlzLnJlbmRlclBsYXllcnMoXG4gICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgICAgICAgb3B0aW9ucy5wbGF5ZXJzXG4gICAgICAgICAgICAgICAgLmZpbHRlcigoZikgPT4gIXdpbm5lcnMuaW5jbHVkZXMoZikpXG4gICAgICAgICAgICAgICAgLm1hcCgobSkgPT4gdGhpcy5yZW5kZXJQbGF5ZXIobSkpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlciBwbGF5ZXJzIHVpIG9uIHRoZSBjYW52YXNcbiAgICovXG4gIHB1YmxpYyByZW5kZXJQbGF5ZXJzKHBsYXllcnM6IEpTWC5FbGVtZW50W10pIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtdC00IGZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHctWzk1JV1cIj5cbiAgICAgICAge3BsYXllcnN9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlciB0b3AgcGxheWVycyB1aSBvbiB0aGUgY2FudmFzXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgcmVuZGVyVG9wKHtcbiAgICBhdmF0YXIsXG4gICAgZGlzcGxheU5hbWUsXG4gICAgbGV2ZWwsXG4gICAgcmFuayxcbiAgICB1c2VybmFtZSxcbiAgICB4cCxcbiAgfTogTGVhZGVyYm9hcmRQcm9wc1tcInBsYXllcnNcIl1bbnVtYmVyXSkge1xuICAgIGNvbnN0IGltYWdlID0gYXdhaXQgbG9hZEltYWdlKGF2YXRhcik7XG4gICAgY29uc3QgY3VycmVudENvbG9yID1cbiAgICAgIERlZmF1bHRDb2xvcnNbcmFuayA9PT0gMSA/IFwiWWVsbG93XCIgOiByYW5rID09PSAyID8gXCJCbHVlXCIgOiBcIkdyZWVuXCJdO1xuICAgIGNvbnN0IGNyb3duID0gcmFuayA9PT0gMTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17U3R5bGVTaGVldC5jbihcbiAgICAgICAgICBcInJlbGF0aXZlIGZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHAtNCBiZy1bIzFFMjIzN0NDXSB3LVszNSVdIHJvdW5kZWQtbWRcIixcbiAgICAgICAgICBjcm93biA/IFwiLW10LTQgYmctWyMyNTJBNDBDQ10gcm91bmRlZC1iLW5vbmUgaC1bMTEzJV1cIiA6IFwiXCIsXG4gICAgICAgICAgcmFuayA9PT0gMiA/IFwicm91bmRlZC1ici1ub25lXCIgOiByYW5rID09PSAzID8gXCJyb3VuZGVkLWJsLW5vbmVcIiA6IFwiXCJcbiAgICAgICAgKX1cbiAgICAgID5cbiAgICAgICAge2Nyb3duICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFic29sdXRlIGZsZXggLXRvcC0xNlwiPlxuICAgICAgICAgICAgPENyb3duIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgZmxleC1jb2wgYWJzb2x1dGUgLXRvcC0xMFwiPlxuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIHNyYz17aW1hZ2UudG9EYXRhVVJMKCl9XG4gICAgICAgICAgICBjbGFzc05hbWU9e1N0eWxlU2hlZXQuY24oXG4gICAgICAgICAgICAgIGBib3JkZXItWzNweF0gYm9yZGVyLVske2N1cnJlbnRDb2xvcn1dIHJvdW5kZWQtZnVsbCBoLTE4IHctMThgXG4gICAgICAgICAgICApfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3NOYW1lPXtgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgdGV4dC14cyBwLTIgdGV4dC1jZW50ZXIgZm9udC1ib2xkIGgtMyB3LTMgcm91bmRlZC1mdWxsIHRleHQtd2hpdGUgYWJzb2x1dGUgYmctWyR7Y3VycmVudENvbG9yfV0gLWJvdHRvbS1bMC40cmVtXWB9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3Jhbmt9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIG10LTVcIj5cbiAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwidGV4dC13aGl0ZSB0ZXh0LWJhc2UgZm9udC1leHRyYWJvbGQgbS0wXCI+XG4gICAgICAgICAgICB7ZGlzcGxheU5hbWV9XG4gICAgICAgICAgPC9oMT5cbiAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwidGV4dC13aGl0ZSB0ZXh0LXhzIGZvbnQtdGhpbiBtLTAgbWItMlwiPkB7dXNlcm5hbWV9PC9oMj5cbiAgICAgICAgICA8aDQgY2xhc3NOYW1lPXtgdGV4dC1zbSB0ZXh0LVske2N1cnJlbnRDb2xvcn1dIG0tMGB9PlxuICAgICAgICAgICAge3RoaXMub3B0aW9ucy5nZXQoXCJ0ZXh0XCIpLmxldmVsfSB7bGV2ZWx9XG4gICAgICAgICAgPC9oND5cbiAgICAgICAgICA8aDQgY2xhc3NOYW1lPXtgdGV4dC1zbSB0ZXh0LVske2N1cnJlbnRDb2xvcn1dIG0tMGB9PlxuICAgICAgICAgICAge2ZpeGVkKHhwLCB0aGlzLm9wdGlvbnMuZ2V0KFwiYWJicmV2aWF0ZVwiKSl9e1wiIFwifVxuICAgICAgICAgICAge3RoaXMub3B0aW9ucy5nZXQoXCJ0ZXh0XCIpLnhwfVxuICAgICAgICAgIDwvaDQ+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXIgcGxheWVyIHVpIG9uIHRoZSBjYW52YXNcbiAgICovXG4gIHB1YmxpYyBhc3luYyByZW5kZXJQbGF5ZXIoe1xuICAgIGF2YXRhcixcbiAgICBkaXNwbGF5TmFtZSxcbiAgICBsZXZlbCxcbiAgICByYW5rLFxuICAgIHVzZXJuYW1lLFxuICAgIHhwLFxuICB9OiBMZWFkZXJib2FyZFByb3BzW1wicGxheWVyc1wiXVtudW1iZXJdKSB7XG4gICAgY29uc3QgaW1hZ2UgPSBhd2FpdCBsb2FkSW1hZ2UoYXZhdGFyKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImJnLVsjMjUyQTQwQkJdIHAtNCByb3VuZGVkLW1kIGZsZXggZmxleC1yb3cganVzdGlmeS1iZXR3ZWVuIGl0ZW1zLWNlbnRlciB3LWZ1bGwgbWItMlwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1yb3dcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIG1yLTJcIj5cbiAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJ0ZXh0LXdoaXRlIGZvbnQtZXh0cmFib2xkIHRleHQteGwgbS0wXCI+e3Jhbmt9PC9oMT5cbiAgICAgICAgICAgIDxoNCBjbGFzc05hbWU9XCJ0ZXh0LXdoaXRlIGZvbnQtbWVkaXVtIHRleHQtc20gbS0wXCI+XG4gICAgICAgICAgICAgIHt0aGlzLm9wdGlvbnMuZ2V0KFwidGV4dFwiKS5yYW5rfVxuICAgICAgICAgICAgPC9oND5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8aW1nXG4gICAgICAgICAgICBzcmM9e2ltYWdlLnRvRGF0YVVSTCgpfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwicm91bmRlZC1mdWxsIGgtMTQgdy0xNCBtci0yXCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LWNvbCBpdGVtcy1zdGFydCBqdXN0aWZ5LWNlbnRlclwiPlxuICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cInRleHQtd2hpdGUgZm9udC1leHRyYWJvbGQgdGV4dC14bCBtLTBcIj5cbiAgICAgICAgICAgICAge2Rpc3BsYXlOYW1lfVxuICAgICAgICAgICAgPC9oMT5cbiAgICAgICAgICAgIDxoNCBjbGFzc05hbWU9XCJ0ZXh0LXdoaXRlIGZvbnQtbWVkaXVtIHRleHQtc20gbS0wXCI+QHt1c2VybmFtZX08L2g0PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIGl0ZW1zLXN0YXJ0IGp1c3RpZnktY2VudGVyXCI+XG4gICAgICAgICAgPGg0IGNsYXNzTmFtZT1cInRleHQtd2hpdGUgZm9udC1tZWRpdW0gdGV4dC1zbSBtLTBcIj5cbiAgICAgICAgICAgIHt0aGlzLm9wdGlvbnMuZ2V0KFwidGV4dFwiKS5sZXZlbH0ge2xldmVsfVxuICAgICAgICAgIDwvaDQ+XG4gICAgICAgICAgPGg0IGNsYXNzTmFtZT1cInRleHQtd2hpdGUgZm9udC1tZWRpdW0gdGV4dC1zbSBtLTBcIj5cbiAgICAgICAgICAgIHtmaXhlZCh4cCwgdGhpcy5vcHRpb25zLmdldChcImFiYnJldmlhdGVcIikpfXtcIiBcIn1cbiAgICAgICAgICAgIHt0aGlzLm9wdGlvbnMuZ2V0KFwidGV4dFwiKS54cH1cbiAgICAgICAgICA8L2g0PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBUcmFuc2Zvcm1lciB9IGZyb20gXCJAbmFwaS1ycy9pbWFnZVwiO1xuaW1wb3J0IHsgRm9udEZhY3RvcnkgfSBmcm9tIFwiLi4vYXNzZXRzXCI7XG5pbXBvcnQgeyBJbWFnZVNvdXJjZSwgSlNYLCBsb2FkSW1hZ2UgfSBmcm9tIFwiLi4vaGVscGVyc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdEZvbnQgfSBmcm9tIFwiLi4vaGVscGVycy91dGlsc1wiO1xuaW1wb3J0IHsgQnVpbGRlciB9IGZyb20gXCIuLi90ZW1wbGF0ZXMvQnVpbGRlclwiO1xuaW1wb3J0IHtcbiAgTmVvQ2xhc3NpY2FsQ2FyZCxcbiAgUmFua0NhcmRQcm9wcyxcbiAgUmFua0NhcmRVc2VyU3RhdHVzLFxuICBTdGF0dXNEYXRhLFxufSBmcm9tIFwiLi9yYW5rLWNhcmQvTmVvQ2xhc3NpY2FsQ2FyZFwiO1xuXG4vKipcbiAqIFRoZSByYW5rIGNhcmQgYnVpbGRlciBwcm9wcy5cbiAqL1xuaW50ZXJmYWNlIFJhbmtDYXJkQnVpbGRlclByb3BzXG4gIGV4dGVuZHMgT21pdDxSYW5rQ2FyZFByb3BzLCBcImF2YXRhclwiIHwgXCJiYWNrZ3JvdW5kQ29sb3JcIj4ge1xuICBhdmF0YXI6IEltYWdlU291cmNlO1xuICBiYWNrZ3JvdW5kOiBJbWFnZVNvdXJjZTtcbiAgYmFja2dyb3VuZENyb3A/OiBQYXJ0aWFsPHtcbiAgICB4OiBudW1iZXI7XG4gICAgeTogbnVtYmVyO1xuICAgIHdpZHRoOiBudW1iZXI7XG4gICAgaGVpZ2h0OiBudW1iZXI7XG4gIH0+O1xuICBmb250czogUGFydGlhbDx7XG4gICAgdXNlcm5hbWU6IFBhcnRpYWw8e1xuICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgaGFuZGxlOiBzdHJpbmc7XG4gICAgfT47XG4gICAgcHJvZ3Jlc3M6IFBhcnRpYWw8e1xuICAgICAgbGV2ZWw6IFBhcnRpYWw8e1xuICAgICAgICB0ZXh0OiBzdHJpbmc7XG4gICAgICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgICB9PjtcbiAgICAgIHhwOiBQYXJ0aWFsPHtcbiAgICAgICAgdGV4dDogc3RyaW5nO1xuICAgICAgICB2YWx1ZTogc3RyaW5nO1xuICAgICAgfT47XG4gICAgICByYW5rOiBQYXJ0aWFsPHtcbiAgICAgICAgdGV4dDogc3RyaW5nO1xuICAgICAgICB2YWx1ZTogc3RyaW5nO1xuICAgICAgfT47XG4gICAgfT47XG4gIH0+O1xufVxuXG5leHBvcnQgY2xhc3MgUmFua0NhcmRCdWlsZGVyIGV4dGVuZHMgQnVpbGRlcjxSYW5rQ2FyZEJ1aWxkZXJQcm9wcz4ge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyByYW5rIGNhcmQgYnVpbGRlci5cbiAgICogQGV4YW1wbGVcbiAgICogY29uc3QgY2FyZCA9IG5ldyBSYW5rQ2FyZEJ1aWxkZXIoKVxuICAgKiAgICAgLnNldFVzZXJuYW1lKCdraWtpJylcbiAgICogICAgIC5zZXREaXNwbGF5TmFtZSgnS2lraScpXG4gICAqICAgICAuc2V0RGlzY3JpbWluYXRvcignMTIzNCcpXG4gICAqICAgICAuc2V0QXZhdGFyKCcuLi4nKVxuICAgKiAgICAgLnNldEN1cnJlbnRYUCgzMDApXG4gICAqICAgICAuc2V0UmVxdWlyZWRYUCg2MDApXG4gICAqICAgICAuc2V0TGV2ZWwoMilcbiAgICogICAgIC5zZXRSYW5rKDUpXG4gICAqICAgICAuc2V0U3RhdHVzKCdvbmxpbmUnKTtcbiAgICpcbiAgICogY29uc3QgcG5nQnVmZmVyID0gYXdhaXQgY2FyZC5idWlsZCh7XG4gICAqICAgZm9ybWF0OiAncG5nJ1xuICAgKiB9KTtcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcig5MzAsIDI4MCk7XG5cbiAgICB0aGlzLmJvb3RzdHJhcCh7XG4gICAgICBhdmF0YXI6IFwiXCIsXG4gICAgICBhYmJyZXZpYXRlOiB0cnVlLFxuICAgICAgYmFja2dyb3VuZDogXCIjMkMyRjMzXCIsXG4gICAgICBjdXJyZW50WFA6IDAsXG4gICAgICBoYW5kbGU6IG51bGwsXG4gICAgICBsZXZlbDogbnVsbCxcbiAgICAgIG92ZXJsYXk6IDkwLFxuICAgICAgcmFuazogbnVsbCxcbiAgICAgIHJlcXVpcmVkWFA6IDAsXG4gICAgICBzdGF0dXM6IFJhbmtDYXJkVXNlclN0YXR1cy5Ob25lLFxuICAgICAgc3R5bGVzOiB7fSxcbiAgICAgIHRleHRzOiB7fSxcbiAgICAgIHVzZXJuYW1lOiBudWxsLFxuICAgICAgZm9udHM6IHt9LFxuICAgICAgY2FsY3VsYXRlUHJvZ3Jlc3M6IChjdXJyZW50WFAsIHJlcXVpcmVkWFApID0+XG4gICAgICAgICgoY3VycmVudFhQID8/IDApIC8gKHJlcXVpcmVkWFAgPz8gMCkpICogMTAwLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGZvbnRzIHRvIGJlIHVzZWQgZm9yIHRoaXMgcmFuayBjYXJkLlxuICAgKiBAcGFyYW0gZm9udENvbmZpZyBUaGUgZm9udHMgdG8gYmUgdXNlZCBmb3IgdGhpcyByYW5rIGNhcmQuXG4gICAqL1xuICBwdWJsaWMgc2V0Rm9udHMoZm9udENvbmZpZzogUmVxdWlyZWQ8UmFua0NhcmRCdWlsZGVyUHJvcHNbXCJmb250c1wiXT4pIHtcbiAgICB0aGlzLm9wdGlvbnMuc2V0KFwiZm9udHNcIiwgZm9udENvbmZpZyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgYXZhdGFyIGZvciB0aGlzIHJhbmsgY2FyZC5cbiAgICogQHBhcmFtIGltYWdlIFRoZSBhdmF0YXIgZm9yIHRoaXMgcmFuayBjYXJkLlxuICAgKi9cbiAgcHVibGljIHNldEF2YXRhcihpbWFnZTogSW1hZ2VTb3VyY2UpIHtcbiAgICB0aGlzLm9wdGlvbnMuc2V0KFwiYXZhdGFyXCIsIGltYWdlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBiYWNrZ3JvdW5kIGZvciB0aGlzIHJhbmsgY2FyZC5cbiAgICogQHBhcmFtIGltYWdlIFRoZSBiYWNrZ3JvdW5kIGZvciB0aGlzIHJhbmsgY2FyZC5cbiAgICovXG4gIHB1YmxpYyBzZXRCYWNrZ3JvdW5kKGltYWdlOiBJbWFnZVNvdXJjZSkge1xuICAgIHRoaXMub3B0aW9ucy5zZXQoXCJiYWNrZ3JvdW5kXCIsIGltYWdlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBzdGF0dXMgZm9yIHRoaXMgcmFuayBjYXJkLlxuICAgKiBAcGFyYW0gc3RhdHVzIFRoZSBzdGF0dXMgZm9yIHRoaXMgcmFuayBjYXJkLlxuICAgKi9cbiAgcHVibGljIHNldFN0YXR1cyhzdGF0dXM6IFJhbmtDYXJkVXNlclN0YXR1cyB8IFN0YXR1c0RhdGEpIHtcbiAgICB0aGlzLm9wdGlvbnMuc2V0KFwic3RhdHVzXCIsIHN0YXR1cyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgdXNlcm5hbWUgZm9yIHRoaXMgcmFuayBjYXJkLlxuICAgKiBAcGFyYW0gbmFtZSBUaGUgdXNlcm5hbWUgZm9yIHRoaXMgcmFuayBjYXJkLlxuICAgKi9cbiAgcHVibGljIHNldERpc3BsYXlOYW1lKG5hbWU6IHN0cmluZykge1xuICAgIHRoaXMub3B0aW9ucy5zZXQoXCJ1c2VybmFtZVwiLCBuYW1lKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBoYW5kbGUgbmFtZSBmb3IgdGhpcyByYW5rIGNhcmQuXG4gICAqIEBwYXJhbSBuYW1lIFRoZSBoYW5kbGUgbmFtZSBmb3IgdGhpcyByYW5rIGNhcmQuXG4gICAqL1xuICBwdWJsaWMgc2V0VXNlcm5hbWUobmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5vcHRpb25zLnNldChcImhhbmRsZVwiLCBuYW1lKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgb3ZlcmxheSBmb3IgdGhpcyByYW5rIGNhcmQuXG4gICAqL1xuICBwdWJsaWMgc2V0T3ZlcmxheShvdmVybGF5OiBSYW5rQ2FyZFByb3BzW1wib3ZlcmxheVwiXSkge1xuICAgIHRoaXMub3B0aW9ucy5zZXQoXCJvdmVybGF5XCIsIG92ZXJsYXkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGN1cnJlbnQgeHAgZm9yIHRoaXMgcmFuayBjYXJkLlxuICAgKiBAcGFyYW0geHAgVGhlIGN1cnJlbnQgeHAgZm9yIHRoaXMgcmFuayBjYXJkLlxuICAgKi9cbiAgcHVibGljIHNldEN1cnJlbnRYUCh4cDogbnVtYmVyKSB7XG4gICAgdGhpcy5vcHRpb25zLnNldChcImN1cnJlbnRYUFwiLCB4cCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgcmVxdWlyZWQgeHAgZm9yIHRoaXMgcmFuayBjYXJkLlxuICAgKiBAcGFyYW0geHAgVGhlIHJlcXVpcmVkIHhwIGZvciB0aGlzIHJhbmsgY2FyZC5cbiAgICovXG4gIHB1YmxpYyBzZXRSZXF1aXJlZFhQKHhwOiBudW1iZXIpIHtcbiAgICB0aGlzLm9wdGlvbnMuc2V0KFwicmVxdWlyZWRYUFwiLCB4cCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgbGV2ZWwgb2YgdGhpcyByYW5rIGNhcmQuXG4gICAqIEBwYXJhbSBsZXZlbCBUaGUgbGV2ZWwgb2YgdGhpcyByYW5rIGNhcmQuXG4gICAqL1xuICBwdWJsaWMgc2V0TGV2ZWwobGV2ZWw6IG51bWJlcikge1xuICAgIHRoaXMub3B0aW9ucy5zZXQoXCJsZXZlbFwiLCBsZXZlbCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgcmFuayBvZiB0aGlzIHJhbmsgY2FyZC5cbiAgICogQHBhcmFtIHJhbmsgVGhlIHJhbmsgb2YgdGhpcyByYW5rIGNhcmQuXG4gICAqL1xuICBwdWJsaWMgc2V0UmFuayhyYW5rOiBudW1iZXIpIHtcbiAgICB0aGlzLm9wdGlvbnMuc2V0KFwicmFua1wiLCByYW5rKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25maWd1cmVzIHRoZSByZW5kZXJlciBmb3IgdGhpcyByYW5rIGNhcmQuXG4gICAqIEBwYXJhbSBjb25maWcgVGhlIGNvbmZpZ3VyYXRpb24gZm9yIHRoaXMgcmFuayBjYXJkLlxuICAgKi9cbiAgcHVibGljIHNldFN0eWxlcyhjb25maWc6IFBhcnRpYWw8UmFua0NhcmRCdWlsZGVyUHJvcHNbXCJzdHlsZXNcIl0+KSB7XG4gICAgdGhpcy5vcHRpb25zLm1lcmdlKFwic3R5bGVzXCIsIGNvbmZpZyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGJhY2tncm91bmQgY3JvcCBmb3IgdGhpcyByYW5rIGNhcmQuXG4gICAqL1xuICBwdWJsaWMgc2V0QmFja2dyb3VuZENyb3AoXG4gICAgcG9zOiBQYXJ0aWFsPFJhbmtDYXJkQnVpbGRlclByb3BzW1wiYmFja2dyb3VuZENyb3BcIl0+XG4gICkge1xuICAgIHRoaXMub3B0aW9ucy5zZXQoXCJiYWNrZ3JvdW5kQ3JvcFwiLCBwb3MpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyZXMgdGhlIHRleHRzIGZvciB0aGlzIHJhbmsgY2FyZC5cbiAgICogQHBhcmFtIGNvbmZpZyBUaGUgY29uZmlndXJhdGlvbiBmb3IgdGhpcyByYW5rIGNhcmQuXG4gICAqL1xuICBwdWJsaWMgc2V0VGV4dFN0eWxlcyhjb25maWc6IFBhcnRpYWw8UmFua0NhcmRCdWlsZGVyUHJvcHNbXCJ0ZXh0c1wiXT4pIHtcbiAgICB0aGlzLm9wdGlvbnMubWVyZ2UoXCJ0ZXh0c1wiLCBjb25maWcpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHByb2dyZXNzIGNhbGN1bGF0b3IgZm9yIHRoaXMgcmFuayBjYXJkLiBUaGUgdmFsdWUgcmV0dXJuZWQgYnkgdGhpcyBjYWxjdWxhdG9yIGRlZmluZXMgdGhlIHdpZHRoIG9mIHRoZSBwcm9ncmVzcyBiYXIuXG4gICAqIFZhbGlkIHJhbmdlIGlzIDAtMTAwLiBSZXR1cm5pbmcgYSBudW1iZXIgbGVzcyB0aGFuIDAgb3IgZ3JlYXRlciB0aGFuIDEwMCB3aWxsIGJlIGNsYW1wZWQgd2l0aGluIHRoaXMgcmFuZ2UsIG9yIGludmFsaWQgdmFsdWVzIHdpbGwgcmVzdWx0IGluIDAlIHdpZHRoLlxuICAgKiBAcGFyYW0gY2FsYyBUaGUgcHJvZ3Jlc3MgY2FsY3VsYXRvciBmb3IgdGhpcyByYW5rIGNhcmQuXG4gICAqL1xuICBwdWJsaWMgc2V0UHJvZ3Jlc3NDYWxjdWxhdG9yKGNhbGM6IFJhbmtDYXJkUHJvcHNbXCJjYWxjdWxhdGVQcm9ncmVzc1wiXSkge1xuICAgIHRoaXMub3B0aW9ucy5zZXQoXCJjYWxjdWxhdGVQcm9ncmVzc1wiLCBjYWxjKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoaXMgcmFuayBjYXJkIGludG8gdGhlIGNhbnZhcy5cbiAgICovXG4gIHB1YmxpYyBhc3luYyByZW5kZXIoKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucy5nZXRPcHRpb25zKCk7XG5cbiAgICBpZiAoIW9wdGlvbnMuYXZhdGFyKSB0aHJvdyBuZXcgRXJyb3IoXCJBdmF0YXIgaXMgcmVxdWlyZWQuXCIpO1xuICAgIGlmICghRm9udEZhY3Rvcnkuc2l6ZSkgdGhyb3cgbmV3IEVycm9yKFwiTm8gZm9udHMgYXJlIGxvYWRlZC5cIik7XG5cbiAgICBjb25zdCBhdmF0YXIgPSBhd2FpdCBsb2FkSW1hZ2Uob3B0aW9ucy5hdmF0YXIpO1xuXG4gICAgbGV0IGJhY2tncm91bmQ7XG4gICAgaWYgKG9wdGlvbnMuYmFja2dyb3VuZCkge1xuICAgICAgYmFja2dyb3VuZCA9IGF3YWl0IGxvYWRJbWFnZShvcHRpb25zLmJhY2tncm91bmQpLnRoZW4oXG4gICAgICAgIGFzeW5jIChlKSA9PiB7XG4gICAgICAgICAgaWYgKG9wdGlvbnMuYmFja2dyb3VuZENyb3ApIHtcbiAgICAgICAgICAgIGNvbnN0IHggPSBvcHRpb25zLmJhY2tncm91bmRDcm9wLnggPz8gMDtcbiAgICAgICAgICAgIGNvbnN0IHkgPSBvcHRpb25zLmJhY2tncm91bmRDcm9wLnkgPz8gMDtcbiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gb3B0aW9ucy5iYWNrZ3JvdW5kQ3JvcC53aWR0aCA/PyB0aGlzLndpZHRoO1xuICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gb3B0aW9ucy5iYWNrZ3JvdW5kQ3JvcC5oZWlnaHQgPz8gdGhpcy5oZWlnaHQ7XG5cbiAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IGF3YWl0IG5ldyBUcmFuc2Zvcm1lcihlLmRhdGEpXG4gICAgICAgICAgICAgIC5jcm9wKHgsIHksIHdpZHRoLCBoZWlnaHQpXG4gICAgICAgICAgICAgIC5wbmcoKTtcblxuICAgICAgICAgICAgZS5kYXRhID0gYnVmZmVyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBgdXJsKCR7ZS50b0RhdGFVUkwoKX0pYDtcbiAgICAgICAgfSxcbiAgICAgICAgKCkgPT4gb3B0aW9ucy5iYWNrZ3JvdW5kIGFzIHN0cmluZ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBmaXJzdEZvbnQgPSBnZXREZWZhdWx0Rm9udCgpO1xuXG4gICAgaWYgKGZpcnN0Rm9udCkge1xuICAgICAgb3B0aW9ucy5mb250cy51c2VybmFtZSA/Pz0ge1xuICAgICAgICBuYW1lOiBmaXJzdEZvbnQubmFtZSxcbiAgICAgICAgaGFuZGxlOiBmaXJzdEZvbnQubmFtZSxcbiAgICAgIH07XG4gICAgICBvcHRpb25zLmZvbnRzLnByb2dyZXNzID8/PSB7XG4gICAgICAgIGxldmVsOiB7XG4gICAgICAgICAgdGV4dDogZmlyc3RGb250Lm5hbWUsXG4gICAgICAgICAgdmFsdWU6IGZpcnN0Rm9udC5uYW1lLFxuICAgICAgICB9LFxuICAgICAgICB4cDoge1xuICAgICAgICAgIHRleHQ6IGZpcnN0Rm9udC5uYW1lLFxuICAgICAgICAgIHZhbHVlOiBmaXJzdEZvbnQubmFtZSxcbiAgICAgICAgfSxcbiAgICAgICAgcmFuazoge1xuICAgICAgICAgIHRleHQ6IGZpcnN0Rm9udC5uYW1lLFxuICAgICAgICAgIHZhbHVlOiBmaXJzdEZvbnQubmFtZSxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxOZW9DbGFzc2ljYWxDYXJkXG4gICAgICAgIHsuLi57XG4gICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICBhdmF0YXI6IGF2YXRhci50b0RhdGFVUkwoKSxcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmQhLFxuICAgICAgICB9fVxuICAgICAgLz5cbiAgICApO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgSlNYLCBTdHlsYWJsZSwgU3R5bGVTaGVldCB9IGZyb20gXCIuLi8uLlwiO1xuaW1wb3J0IHsgZml4ZWQgfSBmcm9tIFwiLi4vLi4vaGVscGVycy91dGlsc1wiO1xuXG5leHBvcnQgZW51bSBSYW5rQ2FyZFVzZXJTdGF0dXMge1xuICBPbmxpbmUgPSBcIm9ubGluZVwiLFxuICBJZGxlID0gXCJpZGxlXCIsXG4gIERvTm90RGlzdHVyYiA9IFwiZG5kXCIsXG4gIE9mZmxpbmUgPSBcIm9mZmxpbmVcIixcbiAgU3RyZWFtaW5nID0gXCJzdHJlYW1pbmdcIixcbiAgTm9uZSA9IFwibm9uZVwiLFxufVxuXG5leHBvcnQgdHlwZSBTdGF0dXNEYXRhID1cbiAgfCBcIm9ubGluZVwiXG4gIHwgXCJpZGxlXCJcbiAgfCBcImRuZFwiXG4gIHwgXCJvZmZsaW5lXCJcbiAgfCBcInN0cmVhbWluZ1wiXG4gIHwgXCJub25lXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmFua0NhcmRQcm9wcyB7XG4gIGhhbmRsZTogc3RyaW5nIHwgbnVsbDtcbiAgdXNlcm5hbWU6IHN0cmluZyB8IG51bGw7XG4gIGF2YXRhcjogc3RyaW5nO1xuICBzdGF0dXM6IFJhbmtDYXJkVXNlclN0YXR1cyB8IFN0YXR1c0RhdGEgfCBudWxsO1xuICBjdXJyZW50WFA6IG51bWJlciB8IG51bGw7XG4gIHJlcXVpcmVkWFA6IG51bWJlciB8IG51bGw7XG4gIHJhbms6IG51bWJlciB8IG51bGw7XG4gIGxldmVsOiBudW1iZXIgfCBudWxsO1xuICBiYWNrZ3JvdW5kQ29sb3I6IHN0cmluZztcbiAgb3ZlcmxheTogYm9vbGVhbiB8IG51bWJlciB8IHN0cmluZztcbiAgYWJicmV2aWF0ZTogYm9vbGVhbjtcbiAgY2FsY3VsYXRlUHJvZ3Jlc3M6IChjdXJyZW50OiBudW1iZXIsIHJlcXVpcmVkOiBudW1iZXIpID0+IG51bWJlcjtcbiAgdGV4dHM6IFBhcnRpYWw8e1xuICAgIGxldmVsOiBzdHJpbmc7XG4gICAgeHA6IHN0cmluZztcbiAgICByYW5rOiBzdHJpbmc7XG4gIH0+O1xuICBzdHlsZXM6IFBhcnRpYWw8e1xuICAgIGNvbnRhaW5lcjogU3R5bGFibGU7XG4gICAgYmFja2dyb3VuZDogU3R5bGFibGU7XG4gICAgb3ZlcmxheTogU3R5bGFibGU7XG4gICAgYXZhdGFyOiBQYXJ0aWFsPHtcbiAgICAgIGNvbnRhaW5lcjogU3R5bGFibGU7XG4gICAgICBpbWFnZTogU3R5bGFibGU7XG4gICAgICBzdGF0dXM6IFN0eWxhYmxlO1xuICAgIH0+O1xuICAgIHVzZXJuYW1lOiBQYXJ0aWFsPHtcbiAgICAgIGNvbnRhaW5lcjogU3R5bGFibGU7XG4gICAgICBuYW1lOiBTdHlsYWJsZTtcbiAgICAgIGhhbmRsZTogU3R5bGFibGU7XG4gICAgfT47XG4gICAgcHJvZ3Jlc3NiYXI6IFBhcnRpYWw8e1xuICAgICAgY29udGFpbmVyOiBTdHlsYWJsZTtcbiAgICAgIHRodW1iOiBTdHlsYWJsZTtcbiAgICAgIHRyYWNrOiBTdHlsYWJsZTtcbiAgICB9PjtcbiAgICBzdGF0aXN0aWNzOiBQYXJ0aWFsPHtcbiAgICAgIGNvbnRhaW5lcjogU3R5bGFibGU7XG4gICAgICBsZXZlbDogUGFydGlhbDx7XG4gICAgICAgIGNvbnRhaW5lcjogU3R5bGFibGU7XG4gICAgICAgIHRleHQ6IFN0eWxhYmxlO1xuICAgICAgICB2YWx1ZTogU3R5bGFibGU7XG4gICAgICB9PjtcbiAgICAgIHhwOiBQYXJ0aWFsPHtcbiAgICAgICAgY29udGFpbmVyOiBTdHlsYWJsZTtcbiAgICAgICAgdGV4dDogU3R5bGFibGU7XG4gICAgICAgIHZhbHVlOiBTdHlsYWJsZTtcbiAgICAgIH0+O1xuICAgICAgcmFuazogUGFydGlhbDx7XG4gICAgICAgIGNvbnRhaW5lcjogU3R5bGFibGU7XG4gICAgICAgIHRleHQ6IFN0eWxhYmxlO1xuICAgICAgICB2YWx1ZTogU3R5bGFibGU7XG4gICAgICB9PjtcbiAgICB9PjtcbiAgfT47XG59XG5cbmNvbnN0IENvbG9ycyA9IHtcbiAgb25saW5lOiBcIiM0M2I1ODFcIixcbiAgaWRsZTogXCIjZmFhNjFhXCIsXG4gIGRuZDogXCIjZjA0NzQ3XCIsXG4gIG9mZmxpbmU6IFwiIzc0N2Y4ZFwiLFxuICBzdHJlYW1pbmc6IFwiIzU5MzY5NVwiLFxufTtcblxuY29uc3QgY2xhbXAgPSAodmFsdWU6IG51bWJlcikgPT4gTWF0aC5tYXgoMCwgTWF0aC5taW4oMTAwLCB2YWx1ZSkpO1xuXG5leHBvcnQgZnVuY3Rpb24gTmVvQ2xhc3NpY2FsQ2FyZChwcm9wczogUmFua0NhcmRQcm9wcykge1xuICBjb25zdCB7XG4gICAgcmFuayxcbiAgICBsZXZlbCxcbiAgICBjdXJyZW50WFAsXG4gICAgcmVxdWlyZWRYUCxcbiAgICBhYmJyZXZpYXRlLFxuICAgIHVzZXJuYW1lLFxuICAgIGhhbmRsZSxcbiAgICBhdmF0YXIsXG4gICAgc3RhdHVzLFxuICAgIHN0eWxlcyxcbiAgICB0ZXh0cyxcbiAgICBiYWNrZ3JvdW5kQ29sb3IsXG4gICAgb3ZlcmxheSxcbiAgICBjYWxjdWxhdGVQcm9ncmVzcyxcbiAgfSA9IHByb3BzO1xuXG4gIGNvbnN0IHNob3VsZFNraXBTdGF0cyA9IGN1cnJlbnRYUCA9PSBudWxsICYmIHJlcXVpcmVkWFAgPT0gbnVsbDtcbiAgY29uc3QgcHJvZ3Jlc3MgPSBjYWxjdWxhdGVQcm9ncmVzcyhjdXJyZW50WFAgPz8gMCwgcmVxdWlyZWRYUCA/PyAwKTtcbiAgY29uc3QgcHJvZ3Jlc3NXaWR0aCA9XG4gICAgdHlwZW9mIHByb2dyZXNzICE9PSBcIm51bWJlclwiIHx8IGlzTmFOKHByb2dyZXNzKSA/IDAgOiBjbGFtcChwcm9ncmVzcyk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e1N0eWxlU2hlZXQuY24oXG4gICAgICAgIGJhY2tncm91bmRDb2xvciAmJiAhYmFja2dyb3VuZENvbG9yLnN0YXJ0c1dpdGgoXCJ1cmwoXCIpXG4gICAgICAgICAgPyBgYmctWyR7YmFja2dyb3VuZENvbG9yfV1gXG4gICAgICAgICAgOiBcImJnLVsjMjMyNzJhXVwiLFxuICAgICAgICBcImZsZXggZmxleC1jb2wgaC1mdWxsIHJvdW5kZWQtbWQgdy1mdWxsIHAtNlwiLFxuICAgICAgICBTdHlsZVNoZWV0LnR3KHN0eWxlcy5iYWNrZ3JvdW5kKVxuICAgICAgKX1cbiAgICAgIHN0eWxlPXtTdHlsZVNoZWV0LmNvbXBvc2UoXG4gICAgICAgIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3IgJiYgYmFja2dyb3VuZENvbG9yLnN0YXJ0c1dpdGgoXCJ1cmwoXCIpXG4gICAgICAgICAgICAgID8gYmFja2dyb3VuZENvbG9yXG4gICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGJhY2tncm91bmRTaXplOlxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yICYmIGJhY2tncm91bmRDb2xvci5zdGFydHNXaXRoKFwidXJsKFwiKVxuICAgICAgICAgICAgICA/IFwiMTAwJSAxMDAlXCJcbiAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgIH0sXG4gICAgICAgIFN0eWxlU2hlZXQuY3NzKHN0eWxlcy5iYWNrZ3JvdW5kKVxuICAgICAgKX1cbiAgICA+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17U3R5bGVTaGVldC5jbihcbiAgICAgICAgICBvdmVybGF5XG4gICAgICAgICAgICA/IGBiZy1bJHt0eXBlb2Ygb3ZlcmxheSA9PT0gXCJzdHJpbmdcIiA/IG92ZXJsYXkgOiBcIiMyYjJmMzVcIn1dLyR7XG4gICAgICAgICAgICAgICAgdHlwZW9mIG92ZXJsYXkgPT09IFwibnVtYmVyXCIgPyBvdmVybGF5IDogXCI5MFwiXG4gICAgICAgICAgICAgIH1gXG4gICAgICAgICAgICA6IG51bGwsXG4gICAgICAgICAgXCJmbGV4IGl0ZW1zLWNlbnRlciByb3VuZGVkLWxnIGgtZnVsbCB3LWZ1bGwgcHgtNFwiLFxuICAgICAgICAgIFN0eWxlU2hlZXQudHcoc3R5bGVzLm92ZXJsYXkpXG4gICAgICAgICl9XG4gICAgICAgIHN0eWxlPXtTdHlsZVNoZWV0LmNzcyhzdHlsZXMub3ZlcmxheSl9XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9e1N0eWxlU2hlZXQuY24oXG4gICAgICAgICAgICBcImZsZXggcmVsYXRpdmVcIixcbiAgICAgICAgICAgIFN0eWxlU2hlZXQudHcoc3R5bGVzLmF2YXRhcj8uY29udGFpbmVyKVxuICAgICAgICAgICl9XG4gICAgICAgICAgc3R5bGU9e1N0eWxlU2hlZXQuY3NzKHN0eWxlcy5hdmF0YXI/LmNvbnRhaW5lcil9XG4gICAgICAgID5cbiAgICAgICAgICA8aW1nXG4gICAgICAgICAgICBzcmM9e2F2YXRhcn1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17U3R5bGVTaGVldC5jbihcbiAgICAgICAgICAgICAgXCJoLTM4IHctMzggcm91bmRlZC1mdWxsIG1sLTRcIixcbiAgICAgICAgICAgICAgU3R5bGVTaGVldC50dyhzdHlsZXMuYXZhdGFyPy5pbWFnZSlcbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICBzdHlsZT17U3R5bGVTaGVldC5jc3Moc3R5bGVzLmF2YXRhcj8uaW1hZ2UpfVxuICAgICAgICAgIC8+XG4gICAgICAgICAge3N0YXR1cyAmJiBzdGF0dXMgIT09IFJhbmtDYXJkVXNlclN0YXR1cy5Ob25lID8gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBjbGFzc05hbWU9e1N0eWxlU2hlZXQuY24oXG4gICAgICAgICAgICAgICAgXCJhYnNvbHV0ZSBoLTggdy04IHJvdW5kZWQtZnVsbCBib3R0b20tNSByaWdodC0wIGZsZXhcIixcbiAgICAgICAgICAgICAgICBgYmctWyR7Q29sb3JzW3N0YXR1c119XWAsXG4gICAgICAgICAgICAgICAgU3R5bGVTaGVldC50dyhzdHlsZXMuYXZhdGFyPy5zdGF0dXMpXG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIHN0eWxlPXtTdHlsZVNoZWV0LmNzcyhzdHlsZXMuYXZhdGFyPy5zdGF0dXMpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9e1N0eWxlU2hlZXQuY24oXG4gICAgICAgICAgICBcImZsZXggZmxleC1jb2wgbWwtOFwiLFxuICAgICAgICAgICAgU3R5bGVTaGVldC50dyhzdHlsZXMuY29udGFpbmVyKVxuICAgICAgICAgICl9XG4gICAgICAgICAgc3R5bGU9e1N0eWxlU2hlZXQuY3NzKHN0eWxlcy5jb250YWluZXIpfVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3NOYW1lPXtTdHlsZVNoZWV0LmNuKFxuICAgICAgICAgICAgICBcImZsZXggZmxleC1jb2xcIixcbiAgICAgICAgICAgICAgU3R5bGVTaGVldC50dyhzdHlsZXMudXNlcm5hbWU/LmNvbnRhaW5lcilcbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICBzdHlsZT17U3R5bGVTaGVldC5jc3Moc3R5bGVzLnVzZXJuYW1lPy5jb250YWluZXIpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt1c2VybmFtZSAmJiAoXG4gICAgICAgICAgICAgIDxoMVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17U3R5bGVTaGVldC5jbihcbiAgICAgICAgICAgICAgICAgIFwidGV4dC13aGl0ZSBmb250LXNlbWlib2xkIHRleHQtM3hsIG1iLTBcIixcbiAgICAgICAgICAgICAgICAgIFN0eWxlU2hlZXQudHcoc3R5bGVzLnVzZXJuYW1lPy5uYW1lKSxcbiAgICAgICAgICAgICAgICAgICFoYW5kbGUgPyBcIm1iLTJcIiA6IFwiXCJcbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIHN0eWxlPXtTdHlsZVNoZWV0LmNzcyhzdHlsZXMudXNlcm5hbWU/Lm5hbWUpfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3VzZXJuYW1lfVxuICAgICAgICAgICAgICA8L2gxPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtoYW5kbGUgJiYgKFxuICAgICAgICAgICAgICA8cFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17U3R5bGVTaGVldC5jbihcbiAgICAgICAgICAgICAgICAgIFwidGV4dC1bIzgwODM4Nl0gZm9udC1zZW1pYm9sZCB0ZXh0LWxnIG10LTBcIixcbiAgICAgICAgICAgICAgICAgIFN0eWxlU2hlZXQudHcoc3R5bGVzLnVzZXJuYW1lPy5oYW5kbGUpXG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICBzdHlsZT17U3R5bGVTaGVldC5jc3Moc3R5bGVzLnVzZXJuYW1lPy5oYW5kbGUpfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge2hhbmRsZX1cbiAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9e1N0eWxlU2hlZXQuY24oXG4gICAgICAgICAgICAgIFwiZmxleCByZWxhdGl2ZVwiLFxuICAgICAgICAgICAgICBTdHlsZVNoZWV0LnR3KHN0eWxlcy5wcm9ncmVzc2Jhcj8uY29udGFpbmVyKVxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHN0eWxlPXtTdHlsZVNoZWV0LmNzcyhzdHlsZXMucHJvZ3Jlc3NiYXI/LmNvbnRhaW5lcil9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBjbGFzc05hbWU9e1N0eWxlU2hlZXQuY24oXG4gICAgICAgICAgICAgICAgXCJiZy1bIzQ4NGI0ZV0gdy0xNjAgaC02IHJvdW5kZWQteGwgZmxleFwiLFxuICAgICAgICAgICAgICAgIFN0eWxlU2hlZXQudHcoc3R5bGVzLnByb2dyZXNzYmFyPy50cmFjaylcbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgc3R5bGU9e1N0eWxlU2hlZXQuY3NzKHN0eWxlcy5wcm9ncmVzc2Jhcj8udHJhY2spfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtTdHlsZVNoZWV0LmNuKFxuICAgICAgICAgICAgICAgIFwiYmctWyNmZmZdIG1heC13LTE2MCBoLTYgcm91bmRlZC14bCBhYnNvbHV0ZSBmbGV4XCIsXG4gICAgICAgICAgICAgICAgYHctWyR7cHJvZ3Jlc3NXaWR0aH0lXWAsXG4gICAgICAgICAgICAgICAgU3R5bGVTaGVldC50dyhzdHlsZXMucHJvZ3Jlc3NiYXI/LnRodW1iKVxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICBzdHlsZT17U3R5bGVTaGVldC5jc3Moc3R5bGVzLnByb2dyZXNzYmFyPy50aHVtYil9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzTmFtZT17U3R5bGVTaGVldC5jbihcbiAgICAgICAgICAgICAgXCJmbGV4XCIsXG4gICAgICAgICAgICAgIFN0eWxlU2hlZXQudHcoc3R5bGVzLnN0YXRpc3RpY3M/LmNvbnRhaW5lcilcbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICBzdHlsZT17U3R5bGVTaGVldC5jc3Moc3R5bGVzLnN0YXRpc3RpY3M/LmNvbnRhaW5lcil9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2xldmVsICE9IG51bGwgJiYgKFxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtTdHlsZVNoZWV0LmNuKFxuICAgICAgICAgICAgICAgICAgXCJmbGV4IGl0ZW1zLWNlbnRlciB0ZXh0LVsjODA4Mzg2XSBmb250LW1lZGl1bVwiLFxuICAgICAgICAgICAgICAgICAgU3R5bGVTaGVldC50dyhzdHlsZXMuc3RhdGlzdGljcz8ubGV2ZWw/LmNvbnRhaW5lcilcbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIHN0eWxlPXtTdHlsZVNoZWV0LmNzcyhzdHlsZXMuc3RhdGlzdGljcz8ubGV2ZWw/LmNvbnRhaW5lcil9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8aDNcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17U3R5bGVTaGVldC50dyhzdHlsZXMuc3RhdGlzdGljcz8ubGV2ZWw/LnRleHQpfVxuICAgICAgICAgICAgICAgICAgc3R5bGU9e1N0eWxlU2hlZXQuY3NzKHN0eWxlcy5zdGF0aXN0aWNzPy5sZXZlbD8udGV4dCl9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge3RleHRzLmxldmVsIHx8IFwiTEVWRUw6XCJ9XG4gICAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1N0eWxlU2hlZXQuY24oXG4gICAgICAgICAgICAgICAgICAgICAgXCJ0ZXh0LXdoaXRlIG1sLTFcIixcbiAgICAgICAgICAgICAgICAgICAgICBTdHlsZVNoZWV0LnR3KHN0eWxlcy5zdGF0aXN0aWNzPy5sZXZlbD8udmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXtTdHlsZVNoZWV0LmNzcyhzdHlsZXMuc3RhdGlzdGljcz8ubGV2ZWw/LnZhbHVlKX1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge2ZpeGVkKGxldmVsLCBhYmJyZXZpYXRlKX1cbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2gzPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICB7IXNob3VsZFNraXBTdGF0cyAmJiAoXG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1N0eWxlU2hlZXQuY24oXG4gICAgICAgICAgICAgICAgICBcImZsZXggaXRlbXMtY2VudGVyIHRleHQtWyM4MDgzODZdIGZvbnQtbWVkaXVtIG1sLThcIixcbiAgICAgICAgICAgICAgICAgIFN0eWxlU2hlZXQudHcoc3R5bGVzLnN0YXRpc3RpY3M/LnhwPy5jb250YWluZXIpXG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICBzdHlsZT17U3R5bGVTaGVldC5jc3Moc3R5bGVzLnN0YXRpc3RpY3M/LnhwPy5jb250YWluZXIpfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGgzXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1N0eWxlU2hlZXQudHcoc3R5bGVzLnN0YXRpc3RpY3M/LnhwPy50ZXh0KX1cbiAgICAgICAgICAgICAgICAgIHN0eWxlPXtTdHlsZVNoZWV0LmNzcyhzdHlsZXMuc3RhdGlzdGljcz8ueHA/LnRleHQpfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHt0ZXh0cy54cCB8fCBcIlhQOlwifVxuICAgICAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtTdHlsZVNoZWV0LmNuKFxuICAgICAgICAgICAgICAgICAgICAgIFwidGV4dC13aGl0ZSBtbC0xXCIsXG4gICAgICAgICAgICAgICAgICAgICAgU3R5bGVTaGVldC50dyhzdHlsZXMuc3RhdGlzdGljcz8ueHA/LnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17U3R5bGVTaGVldC5jc3Moc3R5bGVzLnN0YXRpc3RpY3M/LnhwPy52YWx1ZSl9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHtmaXhlZChjdXJyZW50WFAgPz8gMCwgYWJicmV2aWF0ZSl9L1xuICAgICAgICAgICAgICAgICAgICB7Zml4ZWQocmVxdWlyZWRYUCA/PyAwLCBhYmJyZXZpYXRlKX1cbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2gzPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICB7cmFuayAhPSBudWxsICYmIChcbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17U3R5bGVTaGVldC5jbihcbiAgICAgICAgICAgICAgICAgIFwiZmxleCBpdGVtcy1jZW50ZXIgdGV4dC1bIzgwODM4Nl0gZm9udC1tZWRpdW0gbWwtOFwiLFxuICAgICAgICAgICAgICAgICAgU3R5bGVTaGVldC50dyhzdHlsZXMuc3RhdGlzdGljcz8ucmFuaz8uY29udGFpbmVyKVxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgc3R5bGU9e1N0eWxlU2hlZXQuY3NzKHN0eWxlcy5zdGF0aXN0aWNzPy5yYW5rPy5jb250YWluZXIpfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGgzXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1N0eWxlU2hlZXQudHcoc3R5bGVzLnN0YXRpc3RpY3M/LnJhbms/LnRleHQpfVxuICAgICAgICAgICAgICAgICAgc3R5bGU9e1N0eWxlU2hlZXQuY3NzKHN0eWxlcy5zdGF0aXN0aWNzPy5yYW5rPy50ZXh0KX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7dGV4dHMucmFuayB8fCBcIlJBTks6XCJ9XG4gICAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1N0eWxlU2hlZXQuY24oXG4gICAgICAgICAgICAgICAgICAgICAgXCJ0ZXh0LXdoaXRlIG1sLTFcIixcbiAgICAgICAgICAgICAgICAgICAgICBTdHlsZVNoZWV0LnR3KHN0eWxlcy5zdGF0aXN0aWNzPy5yYW5rPy52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e1N0eWxlU2hlZXQuY3NzKHN0eWxlcy5zdGF0aXN0aWNzPy5yYW5rPy52YWx1ZSl9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICN7Zml4ZWQocmFuaywgYWJicmV2aWF0ZSl9XG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuIiwgImltcG9ydCB7IENhbnZhcywgY3JlYXRlQ2FudmFzLCBTS1JTQ29udGV4dDJEIH0gZnJvbSBcIkBuYXBpLXJzL2NhbnZhc1wiO1xuaW1wb3J0IHsgRW5jb2RhYmxlIH0gZnJvbSBcIi4vRW5jb2RhYmxlXCI7XG5pbXBvcnQgeyBDb250ZXh0TWFuaXB1bGF0aW9uU3RlcCB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDYW52YXNIZWxwZXIgZXh0ZW5kcyBFbmNvZGFibGUge1xuICAvKipcbiAgICogVGhlIHN0ZXBzIHRvIGFwcGx5IHRvIHRoZSBjYW52YXMuXG4gICAqL1xuICBwdWJsaWMgc3RlcHM6IENvbnRleHRNYW5pcHVsYXRpb25TdGVwW10gPSBbXTtcbiAgcHJpdmF0ZSBfY2FudmFzITogQ2FudmFzO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IENhbnZhc0hlbHBlciBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHdpZHRoIFRoZSB3aWR0aCBvZiB0aGUgY2FudmFzXG4gICAqIEBwYXJhbSBoZWlnaHQgVGhlIGhlaWdodCBvZiB0aGUgY2FudmFzXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIHdpZHRoOiBudW1iZXIsIHB1YmxpYyBoZWlnaHQ6IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY2FudmFzIGluc3RhbmNlIGJ5IGFwcGx5aW5nIHRoZSBzdGVwcy5cbiAgICovXG4gIHB1YmxpYyBhc3luYyBnZXRGaW5hbENhbnZhcygpOiBQcm9taXNlPENhbnZhcz4ge1xuICAgIHRoaXMuX2NhbnZhcyA/Pz0gY3JlYXRlQ2FudmFzKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICBjb25zdCBjdHggPSB0aGlzLl9jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuXG4gICAgYXdhaXQgdGhpcy5wcm9jZXNzKHRoaXMuX2NhbnZhcywgY3R4KTtcblxuICAgIHJldHVybiB0aGlzLl9jYW52YXM7XG4gIH1cblxuICAvKipcbiAgICogUHJvY2Vzc2VzIHRoZSBzdGVwcyBhbmQgYXBwbGllcyB0aGVtIHRvIHRoZSBjYW52YXMuXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgcHJvY2VzcyhjYW52YXM6IENhbnZhcywgY3R4OiBTS1JTQ29udGV4dDJEKTogUHJvbWlzZTx2b2lkPjtcbn1cbiIsICJpbXBvcnQgeyBDYW52YXMsIEltYWdlLCBTS1JTQ29udGV4dDJEIH0gZnJvbSBcIkBuYXBpLXJzL2NhbnZhc1wiO1xuaW1wb3J0IHsgSW1hZ2VTb3VyY2UgfSBmcm9tIFwiLi4vaGVscGVyc1wiO1xuaW1wb3J0IHsgSW1hZ2VGaWx0ZXJlciB9IGZyb20gXCIuL0ltYWdlRmlsdGVyZXJcIjtcbmltcG9ydCB7IGNyZWF0ZUNhbnZhc0ltYWdlIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuZXhwb3J0IGNsYXNzIENhbnZhc0ltYWdlIGV4dGVuZHMgSW1hZ2VGaWx0ZXJlciB7XG4gICNpbWc6IEltYWdlIHwgbnVsbCA9IG51bGw7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgQ2FudmFzSW1hZ2UgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSBzb3VyY2UgVGhlIGltYWdlIHNvdXJjZVxuICAgKiBAcGFyYW0gW3dpZHRoXSBUaGUgd2lkdGggb2YgdGhlIGltYWdlXG4gICAqIEBwYXJhbSBbaGVpZ2h0XSBUaGUgaGVpZ2h0IG9mIHRoZSBpbWFnZVxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyBzb3VyY2U6IEltYWdlU291cmNlLCB3aWR0aCA9IC0xLCBoZWlnaHQgPSAtMSkge1xuICAgIHN1cGVyKHdpZHRoLCBoZWlnaHQpO1xuICAgIGlmIChzb3VyY2UgaW5zdGFuY2VvZiBJbWFnZSkgdGhpcy4jc2V0SW1nKHNvdXJjZSk7XG4gIH1cblxuICAjc2V0SW1nKHNyYzogSW1hZ2UpIHtcbiAgICB0aGlzLiNpbWcgPSBzcmM7XG4gICAgaWYgKHRoaXMud2lkdGggPT09IC0xKSB0aGlzLndpZHRoID0gc3JjLndpZHRoO1xuICAgIGlmICh0aGlzLmhlaWdodCA9PT0gLTEpIHRoaXMuaGVpZ2h0ID0gc3JjLmhlaWdodDtcbiAgICByZXR1cm4gdGhpcy4jaW1nO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdzIHRoZSBpbWFnZSB0byB0aGUgY2FudmFzLlxuICAgKiBAcGFyYW0geCBUaGUgeCBwb3NpdGlvbiB0byBkcmF3IHRoZSBpbWFnZVxuICAgKiBAcGFyYW0geSBUaGUgeSBwb3NpdGlvbiB0byBkcmF3IHRoZSBpbWFnZVxuICAgKiBAcGFyYW0gW3dpZHRoXSBUaGUgd2lkdGggb2YgdGhlIGltYWdlXG4gICAqIEBwYXJhbSBbaGVpZ2h0XSBUaGUgaGVpZ2h0IG9mIHRoZSBpbWFnZVxuICAgKi9cbiAgcHVibGljIGRyYXcoeCA9IDAsIHkgPSAwLCB3aWR0aD86IG51bWJlciwgaGVpZ2h0PzogbnVtYmVyKSB7XG4gICAgdGhpcy5zdGVwcy5wdXNoKGFzeW5jIChjdHgpID0+IHtcbiAgICAgIGNvbnN0IGltZyA9IHRoaXMuI2ltZyB8fCB0aGlzLiNzZXRJbWcoYXdhaXQgY3JlYXRlQ2FudmFzSW1hZ2UodGhpcy5zb3VyY2UpKTtcblxuICAgICAgd2lkdGggPz89IHRoaXMud2lkdGg7XG4gICAgICBoZWlnaHQgPz89IHRoaXMuaGVpZ2h0O1xuXG4gICAgICBjdHguZHJhd0ltYWdlKGltZywgeCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3cyB0aGUgaW1hZ2UgdG8gdGhlIGNhbnZhcyB3aXRoIGEgY2lyY2xlIGNsaXAuXG4gICAqIEBwYXJhbSBbd2lkdGhdIFRoZSB3aWR0aCBvZiB0aGUgaW1hZ2VcbiAgICogQHBhcmFtIFtoZWlnaHRdIFRoZSBoZWlnaHQgb2YgdGhlIGltYWdlXG4gICAqL1xuICBwdWJsaWMgY2lyY2xlKHdpZHRoPzogbnVtYmVyLCBoZWlnaHQ/OiBudW1iZXIpIHtcbiAgICB0aGlzLnN0ZXBzLnB1c2goKGN0eCkgPT4ge1xuICAgICAgd2lkdGggPz89IGN0eC5jYW52YXMud2lkdGg7XG4gICAgICBoZWlnaHQgPz89IGN0eC5jYW52YXMuaGVpZ2h0O1xuXG4gICAgICBjdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJkZXN0aW5hdGlvbi1pblwiO1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4LmFyYyh3aWR0aCAvIDIsIGhlaWdodCAvIDIsIHdpZHRoIC8gMiwgMCwgTWF0aC5QSSAqIDIpO1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgY3R4LmZpbGwoKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdzIHBpeGVsYXRlZCBpbWFnZSB0byB0aGUgY2FudmFzLlxuICAgKiBAcGFyYW0gW3BpeGVscz01XSBUaGUgYW1vdW50IG9mIHBpeGVscyB0byB1c2VcbiAgICovXG4gIHB1YmxpYyBwaXhlbGF0ZShwaXhlbHMgPSA1KSB7XG4gICAgdGhpcy5zdGVwcy5wdXNoKChjdHgpID0+IHtcbiAgICAgIGNvbnN0IHBpeGVsID0gcGl4ZWxzIC8gMTAwO1xuICAgICAgY29uc3QgeyBjYW52YXMgfSA9IGN0eDtcblxuICAgICAgY3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgY3R4LmRyYXdJbWFnZShcbiAgICAgICAgY2FudmFzLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICBjYW52YXMud2lkdGggKiBwaXhlbCxcbiAgICAgICAgY2FudmFzLmhlaWdodCAqIHBpeGVsLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICBjYW52YXMud2lkdGggKyA1LFxuICAgICAgICBjYW52YXMuaGVpZ2h0ICsgNSxcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTYXZlcyB0aGUgY2FudmFzIGNvbnRleHQgc3RhdGUuXG4gICAqL1xuICBwdWJsaWMgc2F2ZSgpIHtcbiAgICB0aGlzLnN0ZXBzLnB1c2goKGN0eCkgPT4ge1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc3RvcmVzIHRoZSBsYXN0IHNhdmVkIGNhbnZhcyBjb250ZXh0IHN0YXRlLlxuICAgKi9cbiAgcHVibGljIHJlc3RvcmUoKSB7XG4gICAgdGhpcy5zdGVwcy5wdXNoKChjdHgpID0+IHtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjYW52YXMgaW5zdGFuY2UgYnkgYXBwbHlpbmcgdGhlIHN0ZXBzLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIGdldEZpbmFsQ2FudmFzKCk6IFByb21pc2U8Q2FudmFzPiB7XG4gICAgaWYgKHRoaXMud2lkdGggPT09IC0xIHx8IHRoaXMuaGVpZ2h0ID09PSAtMSkge1xuICAgICAgaWYgKCF0aGlzLiNpbWcpIHRoaXMuI3NldEltZyhhd2FpdCBjcmVhdGVDYW52YXNJbWFnZSh0aGlzLnNvdXJjZSkpO1xuICAgIH1cblxuICAgIHJldHVybiBzdXBlci5nZXRGaW5hbENhbnZhcygpO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgQ2FudmFzLCBJbWFnZSwgU0tSU0NvbnRleHQyRCB9IGZyb20gXCJAbmFwaS1ycy9jYW52YXNcIjtcbmltcG9ydCB7IEltYWdlU291cmNlIH0gZnJvbSBcIi4uL2hlbHBlcnNcIjtcbmltcG9ydCB7IENhbnZhc0hlbHBlciB9IGZyb20gXCIuL0NhbnZhc0hlbHBlclwiO1xuaW1wb3J0IHsgY3JlYXRlQ2FudmFzSW1hZ2UgfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5leHBvcnQgY2xhc3MgSW1hZ2VGaWx0ZXJlciBleHRlbmRzIENhbnZhc0hlbHBlciB7XG4gICNmaWx0ZXJzID0gW10gYXMgc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIERyYXdzIHRoZSBpbWFnZSB0byB0aGUgY2FudmFzLlxuICAgKiBAcGFyYW0gaW1hZ2UgVGhlIGltYWdlIHRvIGRyYXdcbiAgICogQHBhcmFtIHggVGhlIHggcG9zaXRpb24gdG8gZHJhdyB0aGUgaW1hZ2VcbiAgICogQHBhcmFtIHkgVGhlIHkgcG9zaXRpb24gdG8gZHJhdyB0aGUgaW1hZ2VcbiAgICogQHBhcmFtIFt3aWR0aF0gVGhlIHdpZHRoIG9mIHRoZSBpbWFnZVxuICAgKiBAcGFyYW0gW2hlaWdodF0gVGhlIGhlaWdodCBvZiB0aGUgaW1hZ2VcbiAgICovXG4gIHB1YmxpYyBkcmF3SW1hZ2UoaW1hZ2U6IEltYWdlU291cmNlLCB4ID0gMCwgeSA9IDAsIHdpZHRoID0gdGhpcy53aWR0aCwgaGVpZ2h0ID0gdGhpcy5oZWlnaHQpIHtcbiAgICB0aGlzLnN0ZXBzLnB1c2goYXN5bmMgKGN0eCkgPT4ge1xuICAgICAgY29uc3QgaW1nID0gYXdhaXQgY3JlYXRlQ2FudmFzSW1hZ2UoaW1hZ2UpO1xuICAgICAgY3R4LmRyYXdJbWFnZShpbWcsIHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQXBwbGllcyBpbnZlcnQgZmlsdGVyIHRvIHRoZSBpbWFnZS5cbiAgICogQHBhcmFtIHZhbHVlIFRoZSBmaWx0ZXIgaW50ZW5zaXR5XG4gICAqL1xuICBwdWJsaWMgaW52ZXJ0KHZhbHVlOiBudW1iZXIpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBcInZhbHVlXCIgdG8gYmUgYSBudW1iZXIsIHJlY2VpdmVkICR7dHlwZW9mIHZhbHVlfWApO1xuICAgIHRoaXMuI2ZpbHRlcnMucHVzaChgaW52ZXJ0KCR7dmFsdWV9JSlgKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIGdyYXlzY2FsZSBmaWx0ZXIgdG8gdGhlIGltYWdlLlxuICAgKiBAcGFyYW0gdmFsdWUgVGhlIGZpbHRlciBpbnRlbnNpdHlcbiAgICovXG4gIHB1YmxpYyBncmF5c2NhbGUodmFsdWUgPSAxMDApIHtcbiAgICB0aGlzLiNmaWx0ZXJzLnB1c2goYGdyYXlzY2FsZSgke3ZhbHVlfSUpYCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQXBwbGllcyBzZXBpYSBmaWx0ZXIgdG8gdGhlIGltYWdlLlxuICAgKiBAcGFyYW0gdmFsdWUgVGhlIGZpbHRlciBpbnRlbnNpdHlcbiAgICovXG4gIHB1YmxpYyBzZXBpYSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJudW1iZXJcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgXCJ2YWx1ZVwiIHRvIGJlIGEgbnVtYmVyLCByZWNlaXZlZCAke3R5cGVvZiB2YWx1ZX1gKTtcbiAgICB0aGlzLiNmaWx0ZXJzLnB1c2goYHNlcGlhKCR7dmFsdWV9JSlgKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIG9wYWNpdHkgZmlsdGVyIHRvIHRoZSBpbWFnZS5cbiAgICogQHBhcmFtIHZhbHVlIFRoZSBmaWx0ZXIgaW50ZW5zaXR5XG4gICAqL1xuICBwdWJsaWMgb3BhY2l0eSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJudW1iZXJcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgXCJ2YWx1ZVwiIHRvIGJlIGEgbnVtYmVyLCByZWNlaXZlZCAke3R5cGVvZiB2YWx1ZX1gKTtcbiAgICB0aGlzLiNmaWx0ZXJzLnB1c2goYG9wYWNpdHkoJHt2YWx1ZX0lKWApO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgc2F0dXJhdGUgZmlsdGVyIHRvIHRoZSBpbWFnZS5cbiAgICogQHBhcmFtIHZhbHVlIFRoZSBmaWx0ZXIgaW50ZW5zaXR5XG4gICAqL1xuICBwdWJsaWMgc2F0dXJhdGUodmFsdWU6IG51bWJlcikge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIFwidmFsdWVcIiB0byBiZSBhIG51bWJlciwgcmVjZWl2ZWQgJHt0eXBlb2YgdmFsdWV9YCk7XG4gICAgdGhpcy4jZmlsdGVycy5wdXNoKGBzYXR1cmF0ZSgke3ZhbHVlfSUpYCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQXBwbGllcyBodWUtcm90YXRlIGZpbHRlciB0byB0aGUgaW1hZ2UuXG4gICAqIEBwYXJhbSB2YWx1ZSBUaGUgZGVncmVlcyB0byByb3RhdGVcbiAgICovXG4gIHB1YmxpYyBodWVSb3RhdGUodmFsdWU6IG51bWJlcikge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIFwidmFsdWVcIiB0byBiZSBhIG51bWJlciwgcmVjZWl2ZWQgJHt0eXBlb2YgdmFsdWV9YCk7XG4gICAgdGhpcy4jZmlsdGVycy5wdXNoKGBodWUtcm90YXRlKCR7dmFsdWV9ZGVnKWApO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgY29udHJhc3QgZmlsdGVyIHRvIHRoZSBpbWFnZS5cbiAgICogQHBhcmFtIHZhbHVlIFRoZSBmaWx0ZXIgaW50ZW5zaXR5XG4gICAqL1xuICBwdWJsaWMgY29udHJhc3QodmFsdWU6IG51bWJlcikge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIFwidmFsdWVcIiB0byBiZSBhIG51bWJlciwgcmVjZWl2ZWQgJHt0eXBlb2YgdmFsdWV9YCk7XG4gICAgdGhpcy4jZmlsdGVycy5wdXNoKGBjb250cmFzdCgke3ZhbHVlfSUpYCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQXBwbGllcyBicmlnaHRuZXNzIGZpbHRlciB0byB0aGUgaW1hZ2UuXG4gICAqIEBwYXJhbSB2YWx1ZSBUaGUgZmlsdGVyIGludGVuc2l0eVxuICAgKi9cbiAgcHVibGljIGJyaWdodG5lc3ModmFsdWU6IG51bWJlcikge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIFwidmFsdWVcIiB0byBiZSBhIG51bWJlciwgcmVjZWl2ZWQgJHt0eXBlb2YgdmFsdWV9YCk7XG4gICAgdGhpcy4jZmlsdGVycy5wdXNoKGBicmlnaHRuZXNzKCR7dmFsdWV9JSlgKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIGJsdXIgZmlsdGVyIHRvIHRoZSBpbWFnZS5cbiAgICogQHBhcmFtIHZhbHVlIFRoZSBmaWx0ZXIgaW50ZW5zaXR5XG4gICAqL1xuICBwdWJsaWMgYmx1cih2YWx1ZTogbnVtYmVyKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJudW1iZXJcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgXCJ2YWx1ZVwiIHRvIGJlIGEgbnVtYmVyLCByZWNlaXZlZCAke3R5cGVvZiB2YWx1ZX1gKTtcbiAgICB0aGlzLiNmaWx0ZXJzLnB1c2goYGJsdXIoJHt2YWx1ZX1weClgKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIGRyb3Atc2hhZG93IGZpbHRlciB0byB0aGUgaW1hZ2UuXG4gICAqIEBwYXJhbSBjb25maWcgVGhlIGRyb3Atc2hhZG93IGNvbmZpZ1xuICAgKiBAcGFyYW0gY29uZmlnLnggVGhlIHggb2Zmc2V0IG9mIHRoZSBzaGFkb3dcbiAgICogQHBhcmFtIGNvbmZpZy55IFRoZSB5IG9mZnNldCBvZiB0aGUgc2hhZG93XG4gICAqIEBwYXJhbSBjb25maWcucmFkaXVzIFRoZSBibHVyIHJhZGl1cyBvZiB0aGUgc2hhZG93XG4gICAqIEBwYXJhbSBjb25maWcuY29sb3IgVGhlIGNvbG9yIG9mIHRoZSBzaGFkb3dcbiAgICovXG4gIHB1YmxpYyBkcm9wU2hhZG93KGNvbmZpZzogRHJvcFNoYWRvd0NvbmZpZykge1xuICAgIGNvbnN0IHsgeCwgeSwgcmFkaXVzLCBjb2xvciB9ID0gY29uZmlnO1xuXG4gICAgdGhpcy4jZmlsdGVycy5wdXNoKGBkcm9wLXNoYWRvdygke1t4LCB5LCBgJHtyYWRpdXN9cHhgLCBjb2xvcl0uam9pbihcIiBcIil9KWApO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIGFwcGxpZWQgZmlsdGVycyB0byB0aGUgY2FudmFzLlxuICAgKiBAcGFyYW0gY2FudmFzIFRoZSBjYW52YXMgdG8gcmVuZGVyIHRoZSBmaWx0ZXJzIHRvXG4gICAqIEBwYXJhbSBjdHggVGhlIGNhbnZhcyBjb250ZXh0XG4gICAqL1xuICBwdWJsaWMgYXN5bmMgcHJvY2VzcyhjYW52YXM6IENhbnZhcywgY3R4OiBTS1JTQ29udGV4dDJEKSB7XG4gICAgaWYgKHRoaXMuI2ZpbHRlcnMubGVuZ3RoKSBjdHguZmlsdGVyID0gdGhpcy4jZmlsdGVycy5qb2luKFwiIFwiKTtcblxuICAgIHdoaWxlICh0aGlzLnN0ZXBzLmxlbmd0aCA+IDApIHtcbiAgICAgIGF3YWl0IHRoaXMuc3RlcHMuc2hpZnQoKSEoY3R4KTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBEcm9wU2hhZG93Q29uZmlnIHtcbiAgeDogbnVtYmVyO1xuICB5OiBudW1iZXI7XG4gIHJhZGl1czogbnVtYmVyO1xuICBjb2xvcjogc3RyaW5nO1xufVxuIiwgImltcG9ydCB7IENhbnZhcywgU0tSU0NvbnRleHQyRCB9IGZyb20gXCJAbmFwaS1ycy9jYW52YXNcIjtcbmltcG9ydCB7IENhbnZhc0ltYWdlIH0gZnJvbSBcIi4vQ2FudmFzSW1hZ2VcIjtcbmltcG9ydCB7IENvbnRleHRNYW5pcHVsYXRpb25TdGVwIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuZXhwb3J0IGNsYXNzIEltYWdlTWFuaXB1bGF0b3IgZXh0ZW5kcyBDYW52YXNJbWFnZSB7XG4gICNzdGVwczogQ29udGV4dE1hbmlwdWxhdGlvblN0ZXBbXSA9IFtdO1xuXG4gIC8qKlxuICAgKiBSb3RhdGVzIHRoZSBjYW52YXMuXG4gICAqL1xuICBwdWJsaWMgcm90YXRlKGRlZ3JlZXM6IG51bWJlcikge1xuICAgIHRoaXMuI3N0ZXBzLnB1c2goKGN0eCkgPT4ge1xuICAgICAgY3R4LnJvdGF0ZShkZWdyZWVzKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEZsaXBzIHRoZSBjYW52YXMuXG4gICAqIEBwYXJhbSBheGlzIFRoZSBheGlzIHRvIGZsaXAsIGB4YCBvciBgeWAuXG4gICAqL1xuICBwdWJsaWMgZmxpcChheGlzOiBcInhcIiB8IFwieVwiKSB7XG4gICAgdGhpcy4jc3RlcHMucHVzaCgoY3R4KSA9PiB7XG4gICAgICBzd2l0Y2ggKGF4aXMpIHtcbiAgICAgICAgY2FzZSBcInhcIjpcbiAgICAgICAgICBjdHguc2NhbGUoLTEsIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwieVwiOlxuICAgICAgICAgIGN0eC5zY2FsZSgxLCAtMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2NhbGVzIHRoZSBjYW52YXMuXG4gICAqIEBwYXJhbSB4IFRoZSB4IHNjYWxlXG4gICAqIEBwYXJhbSB5IFRoZSB5IHNjYWxlXG4gICAqL1xuICBwdWJsaWMgc2NhbGUoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICB0aGlzLiNzdGVwcy5wdXNoKChjdHgpID0+IHtcbiAgICAgIGN0eC5zY2FsZSh4LCB5KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2xhdGVzIHRoZSBjYW52YXMuXG4gICAqIEBwYXJhbSB4IFRoZSB4IHBvc2l0aW9uIHRvIHRyYW5zbGF0ZVxuICAgKiBAcGFyYW0geSBUaGUgeSBwb3NpdGlvbiB0byB0cmFuc2xhdGVcbiAgICovXG4gIHB1YmxpYyB0cmFuc2xhdGUoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICB0aGlzLiNzdGVwcy5wdXNoKChjdHgpID0+IHtcbiAgICAgIGN0eC50cmFuc2xhdGUoeCwgeSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRXJhc2VzIGEgcGFydCBvZiB0aGUgY2FudmFzLlxuICAgKiBAcGFyYW0geCBUaGUgeCBwb3NpdGlvbiB0byBlcmFzZVxuICAgKiBAcGFyYW0geSBUaGUgeSBwb3NpdGlvbiB0byBlcmFzZVxuICAgKiBAcGFyYW0gd2lkdGggVGhlIHdpZHRoIG9mIHRoZSBhcmVhIHRvIGVyYXNlXG4gICAqIEBwYXJhbSBoZWlnaHQgVGhlIGhlaWdodCBvZiB0aGUgYXJlYSB0byBlcmFzZVxuICAgKi9cbiAgcHVibGljIGVyYXNlKHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xuICAgIHRoaXMuI3N0ZXBzLnB1c2goKGN0eCkgPT4ge1xuICAgICAgY3R4LmNsZWFyUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIGEgdHJhbnNmb3JtIHRvIHRoZSBjYW52YXMuXG4gICAqL1xuICBwdWJsaWMgdHJhbnNmb3JtKGE6IG51bWJlciwgYjogbnVtYmVyLCBjOiBudW1iZXIsIGQ6IG51bWJlciwgZTogbnVtYmVyLCBmOiBudW1iZXIpIHtcbiAgICB0aGlzLiNzdGVwcy5wdXNoKChjdHgpID0+IHtcbiAgICAgIGN0eC50cmFuc2Zvcm0oYSwgYiwgYywgZCwgZSwgZik7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVzZXRzIHRoZSB0cmFuc2Zvcm0gb2YgdGhlIGNhbnZhcy5cbiAgICovXG4gIHB1YmxpYyByZXNldFRyYW5zZm9ybSgpIHtcbiAgICB0aGlzLiNzdGVwcy5wdXNoKChjdHgpID0+IHtcbiAgICAgIGN0eC5yZXNldFRyYW5zZm9ybSgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgYSBjaXJjdWxhciBjbGlwIHRvIHRoZSBpbWFnZS5cbiAgICogQHBhcmFtIHdpZHRoIFRoZSB3aWR0aCBvZiB0aGUgaW1hZ2VcbiAgICogQHBhcmFtIGhlaWdodCBUaGUgaGVpZ2h0IG9mIHRoZSBpbWFnZVxuICAgKi9cbiAgcHVibGljIGNpcmN1bGFyaXplKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgLy8gVE9ETzogSW1wbGVtZW50IHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzZXMgdGhlIHN0ZXBzIGFuZCBhcHBsaWVzIHRoZW0gdG8gdGhlIGNhbnZhcy5cbiAgICogQHBhcmFtIGNhbnZhcyBUaGUgY2FudmFzIHRvIGFwcGx5IHRoZSBzdGVwcyB0b1xuICAgKiBAcGFyYW0gY3R4IFRoZSBjYW52YXMgY29udGV4dCB0byBhcHBseSB0aGUgc3RlcHMgdG9cbiAgICovXG4gIHB1YmxpYyBhc3luYyBwcm9jZXNzKGNhbnZhczogQ2FudmFzLCBjdHg6IFNLUlNDb250ZXh0MkQpIHtcbiAgICBmb3IgKGNvbnN0IHN0ZXAgb2YgdGhpcy4jc3RlcHMpIHtcbiAgICAgIGF3YWl0IHN0ZXAoY3R4KTtcbiAgICB9XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBJbWFnZVNvdXJjZSB9IGZyb20gXCIuLi9oZWxwZXJzXCI7XG5pbXBvcnQgeyBJbWFnZUdlbiB9IGZyb20gXCIuL0ltYWdlR2VuXCI7XG5pbXBvcnQgeyBidWZmZXIgfSBmcm9tIFwic3RyZWFtL2NvbnN1bWVyc1wiO1xuaW1wb3J0IHR5cGUgeyBSZWFkYWJsZSB9IGZyb20gXCJzdHJlYW1cIjtcbmltcG9ydCB7IEltYWdlRmlsdGVyZXIgfSBmcm9tIFwiLi9JbWFnZUZpbHRlcmVyXCI7XG5pbXBvcnQgeyBDYW52YXNJbWFnZSB9IGZyb20gXCIuL0NhbnZhc0ltYWdlXCI7XG5pbXBvcnQgeyBUZW1wbGF0ZUZhY3RvcnkgfSBmcm9tIFwiLi4vYXNzZXRzL1RlbXBsYXRlRmFjdG9yeVwiO1xuXG5leHBvcnQgdHlwZSBJbWFnZUdlbmVyYXRvckltcGxlbWVudG9yID0ge1xuICBbSyBpbiBMb3dlcmNhc2U8RXhjbHVkZTxrZXlvZiB0eXBlb2YgVGVtcGxhdGVGYWN0b3J5LCBcIlRyaWdnZXJlZFwiPj5dOiAoXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgIC4uLmFyZ3M6IFBhcmFtZXRlcnM8KHR5cGVvZiBUZW1wbGF0ZUZhY3RvcnkpW0NhcGl0YWxpemU8Sz5dPlxuICApID0+IFByb21pc2U8QnVmZmVyPjtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FudmFjb3JkRmFjdG9yeSBleHRlbmRzIEltYWdlR2VuZXJhdG9ySW1wbGVtZW50b3Ige1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBJbWFnZUZpbHRlcmVyIGluc3RhbmNlLlxuICAgKiBAcGFyYW0gd2lkdGggVGhlIHdpZHRoIG9mIHRoZSBpbWFnZVxuICAgKiBAcGFyYW0gaGVpZ2h0IFRoZSBoZWlnaHQgb2YgdGhlIGltYWdlXG4gICAqL1xuICBmaWx0ZXJzKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTogSW1hZ2VGaWx0ZXJlcjtcblxuICAvKipcbiAgICogR2VuZXJhdGVzIFRyaWdnZXJlZCBnaWYgd2l0aCB0aGUgcHJvdmlkZWQgaW1hZ2UuXG4gICAqIEBwYXJhbSBpbWFnZSBUaGUgaW1hZ2UgdG8gdXNlXG4gICAqIEBwYXJhbSBbYXNCdWZmZXJdIFdoZXRoZXIgdG8gcmV0dXJuIGEgYnVmZmVyIGluc3RlYWQgb2YgYSBzdHJlYW1cbiAgICogQHJldHVybnMgVGhlIGdlbmVyYXRlZCBnaWZcbiAgICovXG4gIHRyaWdnZXJlZChpbWFnZTogSW1hZ2VTb3VyY2UpOiBQcm9taXNlPFJlYWRhYmxlPjtcbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBUcmlnZ2VyZWQgZ2lmIHdpdGggdGhlIHByb3ZpZGVkIGltYWdlLlxuICAgKiBAcGFyYW0gaW1hZ2UgVGhlIGltYWdlIHRvIHVzZVxuICAgKiBAcGFyYW0gW2FzQnVmZmVyXSBXaGV0aGVyIHRvIHJldHVybiBhIGJ1ZmZlciBpbnN0ZWFkIG9mIGEgc3RyZWFtXG4gICAqIEByZXR1cm5zIFRoZSBnZW5lcmF0ZWQgZ2lmXG4gICAqL1xuICB0cmlnZ2VyZWQoaW1hZ2U6IEltYWdlU291cmNlLCBhc0J1ZmZlcjogZmFsc2UpOiBQcm9taXNlPFJlYWRhYmxlPjtcbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBUcmlnZ2VyZWQgZ2lmIHdpdGggdGhlIHByb3ZpZGVkIGltYWdlLlxuICAgKiBAcGFyYW0gaW1hZ2UgVGhlIGltYWdlIHRvIHVzZVxuICAgKiBAcGFyYW0gW2FzQnVmZmVyXSBXaGV0aGVyIHRvIHJldHVybiBhIGJ1ZmZlciBpbnN0ZWFkIG9mIGEgc3RyZWFtXG4gICAqIEByZXR1cm5zIFRoZSBnZW5lcmF0ZWQgZ2lmXG4gICAqL1xuICB0cmlnZ2VyZWQoaW1hZ2U6IEltYWdlU291cmNlLCBhc0J1ZmZlcjogdHJ1ZSk6IFByb21pc2U8QnVmZmVyPjtcbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBUcmlnZ2VyZWQgZ2lmIHdpdGggdGhlIHByb3ZpZGVkIGltYWdlLlxuICAgKiBAcGFyYW0gaW1hZ2UgVGhlIGltYWdlIHRvIHVzZVxuICAgKiBAcGFyYW0gW2FzQnVmZmVyXSBXaGV0aGVyIHRvIHJldHVybiBhIGJ1ZmZlciBpbnN0ZWFkIG9mIGEgc3RyZWFtXG4gICAqIEByZXR1cm5zIFRoZSBnZW5lcmF0ZWQgZ2lmXG4gICAqL1xuICB0cmlnZ2VyZWQoaW1hZ2U6IEltYWdlU291cmNlLCBhc0J1ZmZlcj86IGJvb2xlYW4pOiBQcm9taXNlPFJlYWRhYmxlIHwgQnVmZmVyPjtcbn1cblxuY29uc3QgZmFjdG9yeSA9IHtcbiAgZmlsdGVycyh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xuICAgIHJldHVybiBuZXcgSW1hZ2VGaWx0ZXJlcih3aWR0aCwgaGVpZ2h0KTtcbiAgfSxcbiAgYXN5bmMgdHJpZ2dlcmVkKGltYWdlOiBJbWFnZVNvdXJjZSwgYXNCdWZmZXI/OiBib29sZWFuKTogUHJvbWlzZTxSZWFkYWJsZSB8IEJ1ZmZlcj4ge1xuICAgIGNvbnN0IGdlbmVyYXRvciA9IG5ldyBJbWFnZUdlbihUZW1wbGF0ZUZhY3RvcnkuVHJpZ2dlcmVkKGltYWdlKSk7XG4gICAgY29uc3QgaW1nID0gYXdhaXQgZ2VuZXJhdG9yLmdlbmVyYXRlR2lmKCk7XG5cbiAgICBpZiAoIWFzQnVmZmVyKSByZXR1cm4gaW1nO1xuICAgIHJldHVybiBidWZmZXIoaW1nKTtcbiAgfSxcbn0gYXMgQ2FudmFjb3JkRmFjdG9yeTtcblxuY29uc3QgY2FwaXRhbGl6ZSA9IDxTIGV4dGVuZHMgc3RyaW5nPihzdHI6IFMpID0+IChzdHJbMF0udG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKSkgYXMgQ2FwaXRhbGl6ZTxTPjtcblxuZm9yIChjb25zdCBrZXkgaW4gVGVtcGxhdGVGYWN0b3J5KSB7XG4gIGNvbnN0IG1ldGhvZCA9IGtleS50b0xvd2VyQ2FzZSgpIGFzIExvd2VyY2FzZTxrZXlvZiB0eXBlb2YgVGVtcGxhdGVGYWN0b3J5PjtcbiAgaWYgKG1ldGhvZCA9PT0gXCJ0cmlnZ2VyZWRcIikgY29udGludWU7XG5cbiAgZmFjdG9yeVttZXRob2RdID0gYXN5bmMgZnVuY3Rpb24gKC4uLmFyZ3M6IFBhcmFtZXRlcnM8Q2FudmFjb3JkRmFjdG9yeVt0eXBlb2YgbWV0aG9kXT4pIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgY29uc3QgdGVtcGxhdGUgPSBUZW1wbGF0ZUZhY3RvcnlbY2FwaXRhbGl6ZShtZXRob2QpXSguLi5hcmdzKTtcbiAgICBjb25zdCBnZW5lcmF0b3IgPSBuZXcgSW1hZ2VHZW4odGVtcGxhdGUpO1xuXG4gICAgYXdhaXQgZ2VuZXJhdG9yLnJlbmRlcigpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvci5lbmNvZGUoKTtcbiAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDYW52YWNvcmRJbml0IHtcbiAgLyoqXG4gICAqIFRoZSB3aWR0aCBvZiB0aGUgaW1hZ2UuIERlZmF1bHRzIHRvIGAtMWAgKGF1dG8pLlxuICAgKi9cbiAgd2lkdGg/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBoZWlnaHQgb2YgdGhlIGltYWdlLiBEZWZhdWx0cyB0byBgLTFgIChhdXRvKS5cbiAgICovXG4gIGhlaWdodD86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IENhbnZhY29yZCBpbWFnZSBwcm9jZXNzb3IuXG4gKiBAcGFyYW0gc291cmNlIFRoZSBpbWFnZSBzb3VyY2UgdG8gdXNlXG4gKiBAcGFyYW0gb3B0aW9ucyBUaGUgb3B0aW9ucyB0byB1c2VcbiAqIEByZXR1cm5zIFRoZSBpbWFnZSBwcm9jZXNzb3JcbiAqL1xuZnVuY3Rpb24gQ2FudmFjb3JkQ29uc3RydWN0b3Ioc291cmNlOiBJbWFnZVNvdXJjZSwgb3B0aW9ucz86IENhbnZhY29yZEluaXQpIHtcbiAgb3B0aW9ucyA/Pz0ge307XG5cbiAgY29uc3QgaW1nID0gbmV3IENhbnZhc0ltYWdlKHNvdXJjZSwgb3B0aW9ucz8ud2lkdGggPz8gLTEsIG9wdGlvbnM/LmhlaWdodCA/PyAtMSk7XG4gIGltZy5kcmF3KCk7XG5cbiAgcmV0dXJuIGltZztcbn1cblxuT2JqZWN0LmFzc2lnbihDYW52YWNvcmRDb25zdHJ1Y3RvciwgZmFjdG9yeSk7XG5cbmV4cG9ydCB0eXBlIENhbnZhY29yZCA9IENhbnZhY29yZEZhY3RvcnkgJiB0eXBlb2YgQ2FudmFjb3JkQ29uc3RydWN0b3I7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBDYW52YWNvcmQgaW1hZ2UgcHJvY2Vzc29yLlxuICogQHBhcmFtIHNvdXJjZSBUaGUgaW1hZ2Ugc291cmNlIHRvIHVzZVxuICogQHBhcmFtIG9wdGlvbnMgVGhlIG9wdGlvbnMgdG8gdXNlXG4gKiBAcmV0dXJucyBUaGUgaW1hZ2UgcHJvY2Vzc29yXG4gKi9cbmV4cG9ydCBjb25zdCBjYW52YWNvcmQgPSBDYW52YWNvcmRDb25zdHJ1Y3RvciBhcyBDYW52YWNvcmQ7XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxTQUFTLGtCQUFrQjtBQUMzQixTQUFTLG9CQUFvQjtBQUM3QixTQUFTLGdCQUFnQjs7O0FDQWxCLElBQU0sY0FBYyxvQkFBSSxJQUFrQjtBQUVqRCxJQUFNLFdBQ0osUUFBUSxJQUFJLDZCQUNaO0FBQ0YsSUFBTSxhQUFhLHdCQUFDLFNBQWlCLEdBQUcsUUFBUSxJQUFJLElBQUksSUFBckM7QUFLWixJQUFNLGVBQWU7QUFBQSxFQUMxQixR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VUFBTSxXQUFXLGdCQUFnQixXQUFXLE1BQU0sQ0FBQyxFQUFFLEdBQUcsSUFBSTtBQUM1RCxVQUFNLFlBQVksSUFBSSxTQUFTLFFBQVE7QUFFdkMsVUFBTSxVQUFVLE9BQU87QUFFdkIsV0FBTyxVQUFVLE9BQU87QUFBQSxFQUMxQjtBQUNGO0FBb0JBLFNBQVMscUJBQXFCLFFBQXFCLFNBQXlCO0FBQzFFLGNBQVksQ0FBQztBQUViLFFBQU0sTUFBTSxJQUFJLFlBQVksUUFBUSxTQUFTLFNBQVMsSUFBSSxTQUFTLFVBQVUsRUFBRTtBQUMvRSxNQUFJLEtBQUs7QUFFVCxTQUFPO0FBQ1Q7QUFQUztBQVNULE9BQU8sT0FBTyxzQkFBc0IsT0FBTztBQVVwQyxJQUFNLFlBQVk7IiwKICAibmFtZXMiOiBbImJ1ZmZlciIsICJUcmFuc2Zvcm1lciIsICJUcmFuc2Zvcm1lciIsICJjcmVhdGVJbWFnZSIsICJjcmVhdGVJbWFnZSIsICJmYWN0b3J5IiwgInN2ZyIsICJUcmFuc2Zvcm1lciIsICJidWZmZXIiLCAiVHJhbnNmb3JtZXIiLCAiY3JlYXRlQ2FudmFzIiwgImNyZWF0ZUNhbnZhcyIsICJJbWFnZSIsICJJbWFnZSIsICJidWZmZXIiLCAiYnVmZmVyIl0KfQo=